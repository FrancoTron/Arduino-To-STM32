
ArduinoToSTM32_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d9c  08004d9c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d9c  08004d9c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d9c  08004d9c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001298  2000017c  08004f20  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001414  08004f20  00021414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d07  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd8  00000000  00000000  00033eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  00036b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  00037568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e1f  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8f5  00000000  00000000  0004ec2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d05c  00000000  00000000  0005a524  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c8  00000000  00000000  000c75fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d10 	.word	0x08004d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08004d10 	.word	0x08004d10

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f004 f856 	bl	8004218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000118 	.word	0x20000118
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200003bc 	.word	0x200003bc

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200003bc 	.word	0x200003bc

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000468:	b08b      	sub	sp, #44	; 0x2c
 800046a:	af06      	add	r7, sp, #24
 800046c:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d101      	bne.n	800047c <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000478:	2301      	movs	r3, #1
 800047a:	e0ca      	b.n	8000612 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d106      	bne.n	8000496 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2200      	movs	r2, #0
 800048c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f004 f83f 	bl	8004514 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2203      	movs	r2, #3
 800049a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fc02 	bl	8001cac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	687e      	ldr	r6, [r7, #4]
 80004b0:	466d      	mov	r5, sp
 80004b2:	f106 0410 	add.w	r4, r6, #16
 80004b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	602b      	str	r3, [r5, #0]
 80004be:	1d33      	adds	r3, r6, #4
 80004c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004c2:	6838      	ldr	r0, [r7, #0]
 80004c4:	f001 fbc8 	bl	8001c58 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fc08 	bl	8001ce4 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e037      	b.n	800054a <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	015b      	lsls	r3, r3, #5
 80004e0:	4413      	add	r3, r2
 80004e2:	3329      	adds	r3, #41	; 0x29
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	b2d9      	uxtb	r1, r3
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	4413      	add	r3, r2
 80004f4:	3328      	adds	r3, #40	; 0x28
 80004f6:	460a      	mov	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	b299      	uxth	r1, r3
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	015b      	lsls	r3, r3, #5
 8000504:	4413      	add	r3, r2
 8000506:	3334      	adds	r3, #52	; 0x34
 8000508:	460a      	mov	r2, r1
 800050a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	015b      	lsls	r3, r3, #5
 8000512:	4413      	add	r3, r2
 8000514:	332b      	adds	r3, #43	; 0x2b
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	015b      	lsls	r3, r3, #5
 8000520:	4413      	add	r3, r2
 8000522:	3338      	adds	r3, #56	; 0x38
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	015b      	lsls	r3, r3, #5
 800052e:	4413      	add	r3, r2
 8000530:	333c      	adds	r3, #60	; 0x3c
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3302      	adds	r3, #2
 800053c:	015b      	lsls	r3, r3, #5
 800053e:	4413      	add	r3, r2
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3301      	adds	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	2b0e      	cmp	r3, #14
 800054e:	d9c4      	bls.n	80004da <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e03c      	b.n	80005d0 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	015b      	lsls	r3, r3, #5
 800055c:	4413      	add	r3, r2
 800055e:	f203 2329 	addw	r3, r3, #553	; 0x229
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	b2d9      	uxtb	r1, r3
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	015b      	lsls	r3, r3, #5
 8000570:	4413      	add	r3, r2
 8000572:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000576:	460a      	mov	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	b299      	uxth	r1, r3
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	015b      	lsls	r3, r3, #5
 8000584:	4413      	add	r3, r2
 8000586:	3334      	adds	r3, #52	; 0x34
 8000588:	460a      	mov	r2, r1
 800058a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	015b      	lsls	r3, r3, #5
 8000592:	4413      	add	r3, r2
 8000594:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	015b      	lsls	r3, r3, #5
 80005a2:	4413      	add	r3, r2
 80005a4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	015b      	lsls	r3, r3, #5
 80005b2:	4413      	add	r3, r2
 80005b4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3312      	adds	r3, #18
 80005c2:	015b      	lsls	r3, r3, #5
 80005c4:	4413      	add	r3, r2
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b0e      	cmp	r3, #14
 80005d4:	d9bf      	bls.n	8000556 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	687e      	ldr	r6, [r7, #4]
 80005de:	466d      	mov	r5, sp
 80005e0:	f106 0410 	add.w	r4, r6, #16
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	6823      	ldr	r3, [r4, #0]
 80005ea:	602b      	str	r3, [r5, #0]
 80005ec:	1d33      	adds	r3, r6, #4
 80005ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f001 fb83 	bl	8001cfc <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fb6d 	bl	8002cea <USB_DevDisconnect>
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800061a <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000628:	2b01      	cmp	r3, #1
 800062a:	d101      	bne.n	8000630 <HAL_PCD_Start+0x16>
 800062c:	2302      	movs	r3, #2
 800062e:	e016      	b.n	800065e <HAL_PCD_Start+0x44>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000638:	2101      	movs	r1, #1
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f004 f9d1 	bl	80049e2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fb46 	bl	8002cd6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fb12 	bl	8001c78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fb43 	bl	8002cfe <USB_ReadInterrupts>
 8000678:	4603      	mov	r3, r0
 800067a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800067e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000682:	d102      	bne.n	800068a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 fad9 	bl	8000c3c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fb35 	bl	8002cfe <USB_ReadInterrupts>
 8000694:	4603      	mov	r3, r0
 8000696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800069a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800069e:	d112      	bne.n	80006c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006b2:	b292      	uxth	r2, r2
 80006b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f003 ffa0 	bl	80045fe <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80006be:	2100      	movs	r1, #0
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f8d2 	bl	800086a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fb17 	bl	8002cfe <USB_ReadInterrupts>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006da:	d10b      	bne.n	80006f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80006ee:	b292      	uxth	r2, r2
 80006f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb00 	bl	8002cfe <USB_ReadInterrupts>
 80006fe:	4603      	mov	r3, r0
 8000700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000708:	d10b      	bne.n	8000722 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800071c:	b292      	uxth	r2, r2
 800071e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fae9 	bl	8002cfe <USB_ReadInterrupts>
 800072c:	4603      	mov	r3, r0
 800072e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000736:	d126      	bne.n	8000786 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000740:	b29a      	uxth	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0204 	bic.w	r2, r2, #4
 800074a:	b292      	uxth	r2, r2
 800074c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f022 0208 	bic.w	r2, r2, #8
 8000762:	b292      	uxth	r2, r2
 8000764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f003 ff81 	bl	8004670 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000776:	b29a      	uxth	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000780:	b292      	uxth	r2, r2
 8000782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fab7 	bl	8002cfe <USB_ReadInterrupts>
 8000790:	4603      	mov	r3, r0
 8000792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800079a:	d131      	bne.n	8000800 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f042 0208 	orr.w	r2, r2, #8
 80007ae:	b292      	uxth	r2, r2
 80007b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007bc:	b29a      	uxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007c6:	b292      	uxth	r2, r2
 80007c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0204 	orr.w	r2, r2, #4
 80007de:	b292      	uxth	r2, r2
 80007e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa88 	bl	8002cfe <USB_ReadInterrupts>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f8:	d002      	beq.n	8000800 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f003 ff1e 	bl	800463c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fa7a 	bl	8002cfe <USB_ReadInterrupts>
 800080a:	4603      	mov	r3, r0
 800080c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000814:	d10e      	bne.n	8000834 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800081e:	b29a      	uxth	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000828:	b292      	uxth	r2, r2
 800082a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f003 fed7 	bl	80045e2 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fa60 	bl	8002cfe <USB_ReadInterrupts>
 800083e:	4603      	mov	r3, r0
 8000840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000848:	d10b      	bne.n	8000862 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800085c:	b292      	uxth	r2, r2
 800085e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800087c:	2b01      	cmp	r3, #1
 800087e:	d101      	bne.n	8000884 <HAL_PCD_SetAddress+0x1a>
 8000880:	2302      	movs	r3, #2
 8000882:	e013      	b.n	80008ac <HAL_PCD_SetAddress+0x42>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	78fa      	ldrb	r2, [r7, #3]
 8000890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	78fa      	ldrb	r2, [r7, #3]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fa07 	bl	8002cb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4603      	mov	r3, r0
 80008c4:	70fb      	strb	r3, [r7, #3]
 80008c6:	460b      	mov	r3, r1
 80008c8:	803b      	strh	r3, [r7, #0]
 80008ca:	4613      	mov	r3, r2
 80008cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80008d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da08      	bge.n	80008f0 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	3328      	adds	r3, #40	; 0x28
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e008      	b.n	8000902 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f6:	015b      	lsls	r3, r3, #5
 80008f8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000908:	b2da      	uxtb	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800090e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	09db      	lsrs	r3, r3, #7
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800091e:	883a      	ldrh	r2, [r7, #0]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	78ba      	ldrb	r2, [r7, #2]
 8000928:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000930:	2b01      	cmp	r3, #1
 8000932:	d101      	bne.n	8000938 <HAL_PCD_EP_Open+0x84>
 8000934:	2302      	movs	r3, #2
 8000936:	e00e      	b.n	8000956 <HAL_PCD_EP_Open+0xa2>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f9fc 	bl	8001d44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8000954:	7afb      	ldrb	r3, [r7, #11]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800096e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da08      	bge.n	8000988 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	3328      	adds	r3, #40	; 0x28
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e008      	b.n	800099a <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80009a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	09db      	lsrs	r3, r3, #7
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d101      	bne.n	80009c4 <HAL_PCD_EP_Close+0x66>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e00e      	b.n	80009e2 <HAL_PCD_EP_Close+0x84>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68f9      	ldr	r1, [r7, #12]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fc78 	bl	80022c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	460b      	mov	r3, r1
 80009f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a04:	015b      	lsls	r3, r3, #5
 8000a06:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2200      	movs	r2, #0
 8000a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000a28:	7afb      	ldrb	r3, [r7, #11]
 8000a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000a34:	7afb      	ldrb	r3, [r7, #11]
 8000a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d106      	bne.n	8000a4c <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fdc7 	bl	80025d8 <USB_EPStartXfer>
 8000a4a:	e005      	b.n	8000a58 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fdc0 	bl	80025d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	3312      	adds	r3, #18
 8000a78:	015b      	lsls	r3, r3, #5
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aa6:	015b      	lsls	r3, r3, #5
 8000aa8:	3328      	adds	r3, #40	; 0x28
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fd77 	bl	80025d8 <USB_EPStartXfer>
 8000aea:	e005      	b.n	8000af8 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fd70 	bl	80025d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da08      	bge.n	8000b2c <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b20:	015b      	lsls	r3, r3, #5
 8000b22:	3328      	adds	r3, #40	; 0x28
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e006      	b.n	8000b3a <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	015b      	lsls	r3, r3, #5
 8000b30:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	09db      	lsrs	r3, r3, #7
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <HAL_PCD_EP_SetStall+0x68>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e01c      	b.n	8000ba4 <HAL_PCD_EP_SetStall+0xa2>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68f9      	ldr	r1, [r7, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 ffaf 	bl	8002adc <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d108      	bne.n	8000b9a <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f002 f8c3 	bl	8002d20 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da08      	bge.n	8000bd6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	3328      	adds	r3, #40	; 0x28
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e006      	b.n	8000be4 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	015b      	lsls	r3, r3, #5
 8000bda:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2200      	movs	r2, #0
 8000be8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	09db      	lsrs	r3, r3, #7
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <HAL_PCD_EP_ClrStall+0x68>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e00e      	b.n	8000c32 <HAL_PCD_EP_ClrStall+0x86>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 ffba 	bl	8002b9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8000c50:	2300      	movs	r3, #0
 8000c52:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000c58:	e308      	b.n	800126c <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8000c66:	7e7b      	ldrb	r3, [r7, #25]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 812a 	bne.w	8000ec2 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14d      	bne.n	8000d16 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3328      	adds	r3, #40	; 0x28
 8000c96:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	3302      	adds	r3, #2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	441a      	add	r2, r3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f003 fc6c 	bl	80045b4 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 82c1 	beq.w	800126c <PCD_EP_ISR_Handler+0x630>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 82bc 	bne.w	800126c <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	b292      	uxth	r2, r2
 8000d08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000d14:	e2aa      	b.n	800126c <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d1c:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d28:	89bb      	ldrh	r3, [r7, #12]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d031      	beq.n	8000d98 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	3306      	adds	r3, #6
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	889a      	ldrh	r2, [r3, #4]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f002 f824 	bl	8002dc2 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b299      	uxth	r1, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f003 fbe5 	bl	8004560 <HAL_PCD_SetupStageCallback>
 8000d96:	e269      	b.n	800126c <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f280 8264 	bge.w	800126c <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b299      	uxth	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000db4:	400b      	ands	r3, r1
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4413      	add	r3, r2
 8000dce:	3306      	adds	r3, #6
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d011      	beq.n	8000e14 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	6959      	ldr	r1, [r3, #20]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	889a      	ldrh	r2, [r3, #4]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f001 ffde 	bl	8002dc2 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	441a      	add	r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e14:	2100      	movs	r1, #0
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f003 fbb4 	bl	8004584 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3306      	adds	r3, #6
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8000e3c:	d918      	bls.n	8000e70 <PCD_EP_ISR_Handler+0x234>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	82fb      	strh	r3, [r7, #22]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <PCD_EP_ISR_Handler+0x21c>
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	82fb      	strh	r3, [r7, #22]
 8000e58:	8afb      	ldrh	r3, [r7, #22]
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e012      	b.n	8000e96 <PCD_EP_ISR_Handler+0x25a>
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	085b      	lsrs	r3, r3, #1
 8000e76:	82fb      	strh	r3, [r7, #22]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <PCD_EP_ISR_Handler+0x24e>
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	3301      	adds	r3, #1
 8000e88:	82fb      	strh	r3, [r7, #22]
 8000e8a:	8afb      	ldrh	r3, [r7, #22]
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ea6:	b29c      	uxth	r4, r3
 8000ea8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8000eac:	b29c      	uxth	r4, r3
 8000eae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8000eb2:	b29c      	uxth	r4, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b98      	ldr	r3, [pc, #608]	; (800111c <PCD_EP_ISR_Handler+0x4e0>)
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	8013      	strh	r3, [r2, #0]
 8000ec0:	e1d4      	b.n	800126c <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	7e7b      	ldrb	r3, [r7, #25]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ed4:	89bb      	ldrh	r3, [r7, #12]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f280 80d0 	bge.w	8001080 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	7e7b      	ldrb	r3, [r7, #25]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7e7b      	ldrb	r3, [r7, #25]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	441a      	add	r2, r3
 8000efc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f00:	400b      	ands	r3, r1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8000f06:	7e7b      	ldrb	r3, [r7, #25]
 8000f08:	015b      	lsls	r3, r3, #5
 8000f0a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	7a9b      	ldrb	r3, [r3, #10]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d122      	bne.n	8000f62 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	3306      	adds	r3, #6
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f46:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8000f48:	8b7b      	ldrh	r3, [r7, #26]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d073      	beq.n	8001036 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	6959      	ldr	r1, [r3, #20]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	889a      	ldrh	r2, [r3, #4]
 8000f5a:	8b7b      	ldrh	r3, [r7, #26]
 8000f5c:	f001 ff31 	bl	8002dc2 <USB_ReadPMA>
 8000f60:	e069      	b.n	8001036 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d022      	beq.n	8000fc2 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	3302      	adds	r3, #2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fa6:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8000fa8:	8b7b      	ldrh	r3, [r7, #26]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d02b      	beq.n	8001006 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	6959      	ldr	r1, [r3, #20]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	88da      	ldrh	r2, [r3, #6]
 8000fba:	8b7b      	ldrh	r3, [r7, #26]
 8000fbc:	f001 ff01 	bl	8002dc2 <USB_ReadPMA>
 8000fc0:	e021      	b.n	8001006 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3306      	adds	r3, #6
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fec:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8000fee:	8b7b      	ldrh	r3, [r7, #26]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	6959      	ldr	r1, [r3, #20]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	891a      	ldrh	r2, [r3, #8]
 8001000:	8b7b      	ldrh	r3, [r7, #26]
 8001002:	f001 fede 	bl	8002dc2 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	f640 730f 	movw	r3, #3855	; 0xf0f
 800101c:	4013      	ands	r3, r2
 800101e:	b299      	uxth	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	441a      	add	r2, r3
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <PCD_EP_ISR_Handler+0x4e4>)
 8001030:	430b      	orrs	r3, r1
 8001032:	b29b      	uxth	r3, r3
 8001034:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	441a      	add	r2, r3
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	441a      	add	r2, r3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <PCD_EP_ISR_Handler+0x424>
 8001056:	8b7a      	ldrh	r2, [r7, #26]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d206      	bcs.n	800106e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f003 fa8c 	bl	8004584 <HAL_PCD_DataOutStageCallback>
 800106c:	e008      	b.n	8001080 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fcb5 	bl	80009ea <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001080:	89bb      	ldrh	r3, [r7, #12]
 8001082:	b29b      	uxth	r3, r3
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80ef 	beq.w	800126c <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800108e:	7e7b      	ldrb	r3, [r7, #25]
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	3328      	adds	r3, #40	; 0x28
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	7e7b      	ldrb	r3, [r7, #25]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	7e7a      	ldrb	r2, [r7, #25]
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	440a      	add	r2, r1
 80010b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010be:	b29b      	uxth	r3, r3
 80010c0:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	7a9b      	ldrb	r3, [r3, #10]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d12c      	bne.n	8001124 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	3302      	adds	r3, #2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8083 	beq.w	8001208 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	6959      	ldr	r1, [r3, #20]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	889a      	ldrh	r2, [r3, #4]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f001 fe0f 	bl	8002d36 <USB_WritePMA>
 8001118:	e076      	b.n	8001208 <PCD_EP_ISR_Handler+0x5cc>
 800111a:	bf00      	nop
 800111c:	ffff8080 	.word	0xffff8080
 8001120:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d026      	beq.n	800118c <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	3302      	adds	r3, #2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	4413      	add	r3, r2
 800115c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d031      	beq.n	80011d8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	6959      	ldr	r1, [r3, #20]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	88da      	ldrh	r2, [r3, #6]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	b29b      	uxth	r3, r3
 8001186:	f001 fdd6 	bl	8002d36 <USB_WritePMA>
 800118a:	e025      	b.n	80011d8 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	3306      	adds	r3, #6
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	6959      	ldr	r1, [r3, #20]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	891a      	ldrh	r2, [r3, #8]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f001 fdaf 	bl	8002d36 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f640 730f 	movw	r3, #3855	; 0xf0f
 80011ee:	4013      	ands	r3, r2
 80011f0:	b299      	uxth	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	441a      	add	r2, r3
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <PCD_EP_ISR_Handler+0x650>)
 8001202:	430b      	orrs	r3, r1
 8001204:	b29b      	uxth	r3, r3
 8001206:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001210:	b29b      	uxth	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	3302      	adds	r3, #2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	4413      	add	r3, r2
 8001226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	441a      	add	r2, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f003 f9ae 	bl	80045b4 <HAL_PCD_DataInStageCallback>
 8001258:	e008      	b.n	800126c <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	7819      	ldrb	r1, [r3, #0]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fc10 	bl	8000a8c <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	81fa      	strh	r2, [r7, #14]
 800127a:	b21b      	sxth	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	f6ff acec 	blt.w	8000c5a <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3724      	adds	r7, #36	; 0x24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	ffffc080 	.word	0xffffc080

08001290 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	817b      	strh	r3, [r7, #10]
 800129e:	4613      	mov	r3, r2
 80012a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012b6:	015b      	lsls	r3, r3, #5
 80012b8:	3328      	adds	r3, #40	; 0x28
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e006      	b.n	80012d0 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012c2:	897b      	ldrh	r3, [r7, #10]
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80012d0:	893b      	ldrh	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2200      	movs	r2, #0
 80012da:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	809a      	strh	r2, [r3, #4]
 80012e4:	e00b      	b.n	80012fe <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2201      	movs	r2, #1
 80012ea:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
	...

0800130c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8087 	beq.w	8001434 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001326:	4b92      	ldr	r3, [pc, #584]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b04      	cmp	r3, #4
 8001330:	d00c      	beq.n	800134c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001332:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d112      	bne.n	8001364 <HAL_RCC_OscConfig+0x58>
 800133e:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d06c      	beq.n	8001432 <HAL_RCC_OscConfig+0x126>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d168      	bne.n	8001432 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e22d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x70>
 800136e:	4b80      	ldr	r3, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7f      	ldr	r2, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e02e      	b.n	80013da <HAL_RCC_OscConfig+0xce>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0x92>
 8001384:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a79      	ldr	r2, [pc, #484]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b77      	ldr	r3, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a76      	ldr	r2, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e01d      	b.n	80013da <HAL_RCC_OscConfig+0xce>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0xb6>
 80013a8:	4b71      	ldr	r3, [pc, #452]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a70      	ldr	r2, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e00b      	b.n	80013da <HAL_RCC_OscConfig+0xce>
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6a      	ldr	r2, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a67      	ldr	r2, [pc, #412]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d013      	beq.n	800140a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7fe ff0b 	bl	80001fc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ea:	f7fe ff07 	bl	80001fc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1e1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0xde>
 8001408:	e014      	b.n	8001434 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7fe fef7 	bl	80001fc <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001412:	f7fe fef3 	bl	80001fc <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e1cd      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x106>
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001432:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d063      	beq.n	8001508 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	d11c      	bne.n	8001492 <HAL_RCC_OscConfig+0x186>
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001464:	4b42      	ldr	r3, [pc, #264]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x170>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e1a1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4939      	ldr	r1, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001490:	e03a      	b.n	8001508 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d020      	beq.n	80014dc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_OscConfig+0x268>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7fe feac 	bl	80001fc <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7fe fea8 	bl	80001fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e182      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4926      	ldr	r1, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_RCC_OscConfig+0x268>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7fe fe8b 	bl	80001fc <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7fe fe87 	bl	80001fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e161      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d039      	beq.n	8001588 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d019      	beq.n	8001550 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7fe fe6b 	bl	80001fc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7fe fe67 	bl	80001fc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e141      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x264>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001548:	2001      	movs	r0, #1
 800154a:	f000 fab1 	bl	8001ab0 <RCC_Delay>
 800154e:	e01b      	b.n	8001588 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7fe fe51 	bl	80001fc <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00e      	b.n	800157c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7fe fe4d 	bl	80001fc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d907      	bls.n	800157c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e127      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
 8001570:	40021000 	.word	0x40021000
 8001574:	42420000 	.word	0x42420000
 8001578:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ea      	bne.n	800155e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a6 	beq.w	80016e2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10d      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a87      	ldr	r2, [pc, #540]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b85      	ldr	r3, [pc, #532]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b82      	ldr	r3, [pc, #520]	; (80017cc <HAL_RCC_OscConfig+0x4c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <HAL_RCC_OscConfig+0x4c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7e      	ldr	r2, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x4c0>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7fe fe0f 	bl	80001fc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7fe fe0b 	bl	80001fc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b64      	cmp	r3, #100	; 0x64
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0e5      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b75      	ldr	r3, [pc, #468]	; (80017cc <HAL_RCC_OscConfig+0x4c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x30a>
 8001608:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a6e      	ldr	r2, [pc, #440]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	e02d      	b.n	8001672 <HAL_RCC_OscConfig+0x366>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x32c>
 800161e:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a66      	ldr	r2, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	e01c      	b.n	8001672 <HAL_RCC_OscConfig+0x366>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x34e>
 8001640:	4b61      	ldr	r3, [pc, #388]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a60      	ldr	r2, [pc, #384]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a5d      	ldr	r2, [pc, #372]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0x366>
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d015      	beq.n	80016a6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7fe fdbf 	bl	80001fc <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7fe fdbb 	bl	80001fc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e093      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ee      	beq.n	8001682 <HAL_RCC_OscConfig+0x376>
 80016a4:	e014      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7fe fda9 	bl	80001fc <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7fe fda5 	bl	80001fc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e07d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ee      	bne.n	80016ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d105      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a3b      	ldr	r2, [pc, #236]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80016dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d069      	beq.n	80017be <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d061      	beq.n	80017ba <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d146      	bne.n	800178c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7fe fd7a 	bl	80001fc <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7fe fd76 	bl	80001fc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e050      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d108      	bne.n	8001746 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a19      	ldr	r1, [r3, #32]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	430b      	orrs	r3, r1
 8001758:	491b      	ldr	r1, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe fd4a 	bl	80001fc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7fe fd46 	bl	80001fc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e020      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x460>
 800178a:	e018      	b.n	80017be <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7fe fd33 	bl	80001fc <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7fe fd2f 	bl	80001fc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e009      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x4bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x48e>
 80017b8:	e001      	b.n	80017be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42420060 	.word	0x42420060

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017e2:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d910      	bls.n	8001812 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f0:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 0207 	bic.w	r2, r3, #7
 80017f8:	4978      	ldr	r1, [pc, #480]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0e0      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d020      	beq.n	8001860 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182a:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a6c      	ldr	r2, [pc, #432]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001830:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001834:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001848:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800184c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4961      	ldr	r1, [pc, #388]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06a      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d115      	bne.n	80018ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0a7      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d107      	bne.n	800189c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e09b      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e093      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 0203 	bic.w	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4949      	ldr	r1, [pc, #292]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018be:	f7fe fc9d 	bl	80001fc <HAL_GetTick>
 80018c2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7fe fc95 	bl	80001fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e077      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_ClockConfig+0xfa>
 80018f0:	e027      	b.n	8001942 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d11d      	bne.n	8001936 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7fe fc7e 	bl	80001fc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e060      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_ClockConfig+0x128>
 800191e:	e010      	b.n	8001942 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7fe fc6c 	bl	80001fc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ee      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d210      	bcs.n	8001972 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 0207 	bic.w	r2, r3, #7
 8001958:	4920      	ldr	r1, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_RCC_ClockConfig+0x208>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e030      	b.n	80019d4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b0:	f000 f81c 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019b4:	4601      	mov	r1, r0
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x20c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_RCC_ClockConfig+0x210>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	fa21 f303 	lsr.w	r3, r1, r3
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_RCC_ClockConfig+0x214>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7fe fbd3 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08004d8c 	.word	0x08004d8c
 80019e8:	20000118 	.word	0x20000118

080019ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b490      	push	{r4, r7}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019f4:	1d3c      	adds	r4, r7, #4
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x40>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x46>
 8001a2a:	e02d      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a2e:	623b      	str	r3, [r7, #32]
      break;
 8001a30:	e02d      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	0c9b      	lsrs	r3, r3, #18
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a3e:	4413      	add	r3, r2
 8001a40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c5b      	lsrs	r3, r3, #17
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a5e:	4413      	add	r3, r2
 8001a60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a64:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a6a:	fb02 f203 	mul.w	r2, r2, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e004      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	623b      	str	r3, [r7, #32]
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a8a:	623b      	str	r3, [r7, #32]
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc90      	pop	{r4, r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	08004d28 	.word	0x08004d28
 8001aa0:	08004d38 	.word	0x08004d38
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	007a1200 	.word	0x007a1200
 8001aac:	003d0900 	.word	0x003d0900

08001ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <RCC_Delay+0x34>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <RCC_Delay+0x38>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001acc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	60fa      	str	r2, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f9      	bne.n	8001acc <RCC_Delay+0x1c>
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000118 	.word	0x20000118
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d07d      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b30:	2301      	movs	r3, #1
 8001b32:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d118      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4c:	f7fe fb56 	bl	80001fc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	e008      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b54:	f7fe fb52 	bl	80001fc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e06d      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d02e      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d027      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ba6:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d014      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fb21 	bl	80001fc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7fe fb1d 	bl	80001fc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e036      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4917      	ldr	r1, [pc, #92]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	490b      	ldr	r1, [pc, #44]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42420440 	.word	0x42420440

08001c58 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c58:	b084      	sub	sp, #16
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	f107 0014 	add.w	r0, r7, #20
 8001c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	b004      	add	sp, #16
 8001c76:	4770      	bx	lr

08001c78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001c84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001c88:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001cb8:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8001cbc:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	f107 0014 	add.w	r0, r7, #20
 8001d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d40:	b004      	add	sp, #16
 8001d42:	4770      	bx	lr

08001d44 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001d44:	b490      	push	{r4, r7}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	78db      	ldrb	r3, [r3, #3]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d85f      	bhi.n	8001e16 <USB_ActivateEndpoint+0xd2>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <USB_ActivateEndpoint+0x18>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001deb 	.word	0x08001deb
 8001d64:	08001d99 	.word	0x08001d99
 8001d68:	08001dbf 	.word	0x08001dbf
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]
    break;
 8001d96:	e03f      	b.n	8001e18 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	440a      	add	r2, r1
 8001db0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	8013      	strh	r3, [r2, #0]
    break;
 8001dbc:	e02c      	b.n	8001e18 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8001de4:	b292      	uxth	r2, r2
 8001de6:	801a      	strh	r2, [r3, #0]
    break;
 8001de8:	e016      	b.n	8001e18 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e10:	b292      	uxth	r2, r2
 8001e12:	801a      	strh	r2, [r3, #0]
    break;
 8001e14:	e000      	b.n	8001e18 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8001e16:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b299      	uxth	r1, r3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	441a      	add	r2, r3
 8001e42:	4b75      	ldr	r3, [pc, #468]	; (8002018 <USB_ActivateEndpoint+0x2d4>)
 8001e44:	430b      	orrs	r3, r1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	7a9b      	ldrb	r3, [r3, #10]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 80e8 	bne.w	8002024 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d04c      	beq.n	8001ef6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	0059      	lsls	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	005a      	lsls	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e82:	460a      	mov	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <USB_ActivateEndpoint+0x180>
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	441a      	add	r2, r3
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <USB_ActivateEndpoint+0x2d8>)
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eda:	b29c      	uxth	r4, r3
 8001edc:	f084 0320 	eor.w	r3, r4, #32
 8001ee0:	b29c      	uxth	r4, r3
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	441a      	add	r2, r3
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <USB_ActivateEndpoint+0x2d4>)
 8001eee:	4323      	orrs	r3, r4
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	8013      	strh	r3, [r2, #0]
 8001ef4:	e1d9      	b.n	80022aa <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	0059      	lsls	r1, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	005a      	lsls	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f1e:	460a      	mov	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	3306      	adds	r3, #6
 8001f36:	005a      	lsls	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b3e      	cmp	r3, #62	; 0x3e
 8001f48:	d918      	bls.n	8001f7c <USB_ActivateEndpoint+0x238>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	81fb      	strh	r3, [r7, #14]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <USB_ActivateEndpoint+0x220>
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	81fb      	strh	r3, [r7, #14]
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e012      	b.n	8001fa2 <USB_ActivateEndpoint+0x25e>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	81fb      	strh	r3, [r7, #14]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <USB_ActivateEndpoint+0x252>
 8001f90:	89fb      	ldrh	r3, [r7, #14]
 8001f92:	3301      	adds	r3, #1
 8001f94:	81fb      	strh	r3, [r7, #14]
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <USB_ActivateEndpoint+0x29c>
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001fca:	4013      	ands	r3, r2
 8001fcc:	b299      	uxth	r1, r3
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	441a      	add	r2, r3
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <USB_ActivateEndpoint+0x2dc>)
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	b29c      	uxth	r4, r3
 8001ff8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001ffc:	b29c      	uxth	r4, r3
 8001ffe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002002:	b29c      	uxth	r4, r3
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	441a      	add	r2, r3
 800200e:	4b02      	ldr	r3, [pc, #8]	; (8002018 <USB_ActivateEndpoint+0x2d4>)
 8002010:	4323      	orrs	r3, r4
 8002012:	b29b      	uxth	r3, r3
 8002014:	8013      	strh	r3, [r2, #0]
 8002016:	e148      	b.n	80022aa <USB_ActivateEndpoint+0x566>
 8002018:	ffff8080 	.word	0xffff8080
 800201c:	ffff80c0 	.word	0xffff80c0
 8002020:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002036:	4013      	ands	r3, r2
 8002038:	b299      	uxth	r1, r3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	441a      	add	r2, r3
 8002044:	4b9c      	ldr	r3, [pc, #624]	; (80022b8 <USB_ActivateEndpoint+0x574>)
 8002046:	430b      	orrs	r3, r1
 8002048:	b29b      	uxth	r3, r3
 800204a:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	88db      	ldrh	r3, [r3, #6]
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	0059      	lsls	r1, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	005a      	lsls	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002072:	460a      	mov	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	891b      	ldrh	r3, [r3, #8]
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	0059      	lsls	r1, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	005a      	lsls	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209e:	460a      	mov	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8083 	bne.w	80021b2 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <USB_ActivateEndpoint+0x3a6>
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80020d4:	4013      	ands	r3, r2
 80020d6:	b299      	uxth	r1, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	441a      	add	r2, r3
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <USB_ActivateEndpoint+0x578>)
 80020e4:	430b      	orrs	r3, r1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <USB_ActivateEndpoint+0x3e4>
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
 800210e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002112:	4013      	ands	r3, r2
 8002114:	b299      	uxth	r1, r3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <USB_ActivateEndpoint+0x57c>)
 8002122:	430b      	orrs	r3, r1
 8002124:	b29b      	uxth	r3, r3
 8002126:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	f640 730f 	movw	r3, #3855	; 0xf0f
 800213a:	4013      	ands	r3, r2
 800213c:	b299      	uxth	r1, r3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <USB_ActivateEndpoint+0x57c>)
 800214a:	430b      	orrs	r3, r1
 800214c:	b29b      	uxth	r3, r3
 800214e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	b29c      	uxth	r4, r3
 8002168:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800216c:	b29c      	uxth	r4, r3
 800216e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002172:	b29c      	uxth	r4, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <USB_ActivateEndpoint+0x580>)
 8002180:	4323      	orrs	r3, r4
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800219c:	b29c      	uxth	r4, r3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <USB_ActivateEndpoint+0x580>)
 80021aa:	4323      	orrs	r3, r4
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	8013      	strh	r3, [r2, #0]
 80021b0:	e07b      	b.n	80022aa <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <USB_ActivateEndpoint+0x4ac>
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80021da:	4013      	ands	r3, r2
 80021dc:	b299      	uxth	r1, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	441a      	add	r2, r3
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <USB_ActivateEndpoint+0x578>)
 80021ea:	430b      	orrs	r3, r1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <USB_ActivateEndpoint+0x4ea>
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002218:	4013      	ands	r3, r2
 800221a:	b299      	uxth	r1, r3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <USB_ActivateEndpoint+0x57c>)
 8002228:	430b      	orrs	r3, r1
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29a      	uxth	r2, r3
 800223c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002240:	4013      	ands	r3, r2
 8002242:	b299      	uxth	r1, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <USB_ActivateEndpoint+0x578>)
 8002250:	430b      	orrs	r3, r1
 8002252:	b29b      	uxth	r3, r3
 8002254:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226c:	b29c      	uxth	r4, r3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <USB_ActivateEndpoint+0x580>)
 800227a:	4323      	orrs	r3, r4
 800227c:	b29b      	uxth	r3, r3
 800227e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002296:	b29c      	uxth	r4, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <USB_ActivateEndpoint+0x580>)
 80022a4:	4323      	orrs	r3, r4
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc90      	pop	{r4, r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	ffff8180 	.word	0xffff8180
 80022bc:	ffffc080 	.word	0xffffc080
 80022c0:	ffff80c0 	.word	0xffff80c0
 80022c4:	ffff8080 	.word	0xffff8080

080022c8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7a9b      	ldrb	r3, [r3, #10]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d16d      	bne.n	80023b6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d034      	beq.n	800234c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <USB_DeactivateEndpoint+0x58>
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29a      	uxth	r2, r3
 8002306:	f640 730f 	movw	r3, #3855	; 0xf0f
 800230a:	4013      	ands	r3, r2
 800230c:	b299      	uxth	r1, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <USB_DeactivateEndpoint+0x1f4>)
 800231a:	430b      	orrs	r3, r1
 800231c:	b29b      	uxth	r3, r3
 800231e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002336:	b29c      	uxth	r4, r3
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <USB_DeactivateEndpoint+0x1f8>)
 8002344:	4323      	orrs	r3, r4
 8002346:	b29b      	uxth	r3, r3
 8002348:	8013      	strh	r3, [r2, #0]
 800234a:	e139      	b.n	80025c0 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d013      	beq.n	800238a <USB_DeactivateEndpoint+0xc2>
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
 8002370:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002374:	4013      	ands	r3, r2
 8002376:	b299      	uxth	r1, r3
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <USB_DeactivateEndpoint+0x1fc>)
 8002384:	430b      	orrs	r3, r1
 8002386:	b29b      	uxth	r3, r3
 8002388:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	b29c      	uxth	r4, r3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	441a      	add	r2, r3
 80023ac:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <USB_DeactivateEndpoint+0x1f8>)
 80023ae:	4323      	orrs	r3, r4
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
 80023b4:	e104      	b.n	80025c0 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8084 	bne.w	80024c8 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d013      	beq.n	80023fe <USB_DeactivateEndpoint+0x136>
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80023e8:	4013      	ands	r3, r2
 80023ea:	b299      	uxth	r1, r3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <USB_DeactivateEndpoint+0x1fc>)
 80023f8:	430b      	orrs	r3, r1
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <USB_DeactivateEndpoint+0x174>
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29a      	uxth	r2, r3
 8002422:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002426:	4013      	ands	r3, r2
 8002428:	b299      	uxth	r1, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <USB_DeactivateEndpoint+0x1f4>)
 8002436:	430b      	orrs	r3, r1
 8002438:	b29b      	uxth	r3, r3
 800243a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29a      	uxth	r2, r3
 800244a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800244e:	4013      	ands	r3, r2
 8002450:	b299      	uxth	r1, r3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	441a      	add	r2, r3
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <USB_DeactivateEndpoint+0x1f4>)
 800245e:	430b      	orrs	r3, r1
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	b29c      	uxth	r4, r3
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <USB_DeactivateEndpoint+0x1f8>)
 8002488:	4323      	orrs	r3, r4
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a4:	b29c      	uxth	r4, r3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <USB_DeactivateEndpoint+0x1f8>)
 80024b2:	4323      	orrs	r3, r4
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8013      	strh	r3, [r2, #0]
 80024b8:	e082      	b.n	80025c0 <USB_DeactivateEndpoint+0x2f8>
 80024ba:	bf00      	nop
 80024bc:	ffff80c0 	.word	0xffff80c0
 80024c0:	ffff8080 	.word	0xffff8080
 80024c4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <USB_DeactivateEndpoint+0x23e>
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f640 730f 	movw	r3, #3855	; 0xf0f
 80024f0:	4013      	ands	r3, r2
 80024f2:	b299      	uxth	r1, r3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <USB_DeactivateEndpoint+0x304>)
 8002500:	430b      	orrs	r3, r1
 8002502:	b29b      	uxth	r3, r3
 8002504:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <USB_DeactivateEndpoint+0x27c>
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800252e:	4013      	ands	r3, r2
 8002530:	b299      	uxth	r1, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	441a      	add	r2, r3
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <USB_DeactivateEndpoint+0x308>)
 800253e:	430b      	orrs	r3, r1
 8002540:	b29b      	uxth	r3, r3
 8002542:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29a      	uxth	r2, r3
 8002552:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002556:	4013      	ands	r3, r2
 8002558:	b299      	uxth	r1, r3
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	441a      	add	r2, r3
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <USB_DeactivateEndpoint+0x304>)
 8002566:	430b      	orrs	r3, r1
 8002568:	b29b      	uxth	r3, r3
 800256a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002582:	b29c      	uxth	r4, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <USB_DeactivateEndpoint+0x30c>)
 8002590:	4323      	orrs	r3, r4
 8002592:	b29b      	uxth	r3, r3
 8002594:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	b29c      	uxth	r4, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	441a      	add	r2, r3
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <USB_DeactivateEndpoint+0x30c>)
 80025ba:	4323      	orrs	r3, r4
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc90      	pop	{r4, r7}
 80025ca:	4770      	bx	lr
 80025cc:	ffffc080 	.word	0xffffc080
 80025d0:	ffff80c0 	.word	0xffff80c0
 80025d4:	ffff8080 	.word	0xffff8080

080025d8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b08d      	sub	sp, #52	; 0x34
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	f040 8149 	bne.w	8002888 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d909      	bls.n	8002616 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	619a      	str	r2, [r3, #24]
 8002614:	e005      	b.n	8002622 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7a9b      	ldrb	r3, [r3, #10]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11b      	bne.n	8002662 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6959      	ldr	r1, [r3, #20]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	889a      	ldrh	r2, [r3, #4]
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	b29b      	uxth	r3, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fb7d 	bl	8002d36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	3302      	adds	r3, #2
 8002650:	005a      	lsls	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265a:	461a      	mov	r2, r3
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	e0f6      	b.n	8002850 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d059      	beq.n	800272c <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13b      	bne.n	80026f8 <USB_EPStartXfer+0x120>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	3306      	adds	r3, #6
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	2b3e      	cmp	r3, #62	; 0x3e
 80026a4:	d916      	bls.n	80026d4 <USB_EPStartXfer+0xfc>
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <USB_EPStartXfer+0xe4>
 80026b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026b8:	3b01      	subs	r3, #1
 80026ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e027      	b.n	8002724 <USB_EPStartXfer+0x14c>
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <USB_EPStartXfer+0x112>
 80026e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026e6:	3301      	adds	r3, #1
 80026e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026ec:	029b      	lsls	r3, r3, #10
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e015      	b.n	8002724 <USB_EPStartXfer+0x14c>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d111      	bne.n	8002724 <USB_EPStartXfer+0x14c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	3302      	adds	r3, #2
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271e:	461a      	mov	r2, r3
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	891b      	ldrh	r3, [r3, #8]
 8002728:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800272a:	e058      	b.n	80027de <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d13b      	bne.n	80027ac <USB_EPStartXfer+0x1d4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	3302      	adds	r3, #2
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b3e      	cmp	r3, #62	; 0x3e
 8002758:	d916      	bls.n	8002788 <USB_EPStartXfer+0x1b0>
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <USB_EPStartXfer+0x198>
 800276a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800276c:	3b01      	subs	r3, #1
 800276e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	b29b      	uxth	r3, r3
 8002776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e027      	b.n	80027d8 <USB_EPStartXfer+0x200>
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <USB_EPStartXfer+0x1c6>
 8002798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800279a:	3301      	adds	r3, #1
 800279c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800279e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e015      	b.n	80027d8 <USB_EPStartXfer+0x200>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d111      	bne.n	80027d8 <USB_EPStartXfer+0x200>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	3302      	adds	r3, #2
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d2:	461a      	mov	r2, r3
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	88db      	ldrh	r3, [r3, #6]
 80027dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6959      	ldr	r1, [r3, #20]
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 faa4 	bl	8002d36 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d114      	bne.n	8002820 <USB_EPStartXfer+0x248>
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002808:	4013      	ands	r3, r2
 800280a:	b299      	uxth	r1, r3
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <USB_EPStartXfer+0x488>)
 8002818:	430b      	orrs	r3, r1
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]
 800281e:	e017      	b.n	8002850 <USB_EPStartXfer+0x278>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d113      	bne.n	8002850 <USB_EPStartXfer+0x278>
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29a      	uxth	r2, r3
 8002836:	f640 730f 	movw	r3, #3855	; 0xf0f
 800283a:	4013      	ands	r3, r2
 800283c:	b299      	uxth	r1, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	441a      	add	r2, r3
 8002848:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <USB_EPStartXfer+0x48c>)
 800284a:	430b      	orrs	r3, r1
 800284c:	b29b      	uxth	r3, r3
 800284e:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002866:	b29c      	uxth	r4, r3
 8002868:	f084 0310 	eor.w	r3, r4, #16
 800286c:	b29c      	uxth	r4, r3
 800286e:	f084 0320 	eor.w	r3, r4, #32
 8002872:	b29c      	uxth	r4, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <USB_EPStartXfer+0x490>)
 8002880:	4323      	orrs	r3, r4
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
 8002886:	e122      	b.n	8002ace <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d909      	bls.n	80028a8 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	1ad2      	subs	r2, r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	619a      	str	r2, [r3, #24]
 80028a6:	e005      	b.n	80028b4 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	7a9b      	ldrb	r3, [r3, #10]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d13b      	bne.n	8002934 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	3306      	adds	r3, #6
 80028d0:	005a      	lsls	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	2b3e      	cmp	r3, #62	; 0x3e
 80028e0:	d916      	bls.n	8002910 <USB_EPStartXfer+0x338>
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <USB_EPStartXfer+0x320>
 80028f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028f4:	3b01      	subs	r3, #1
 80028f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80028f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e0c3      	b.n	8002a98 <USB_EPStartXfer+0x4c0>
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	847b      	strh	r3, [r7, #34]	; 0x22
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <USB_EPStartXfer+0x34e>
 8002920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002922:	3301      	adds	r3, #1
 8002924:	847b      	strh	r3, [r7, #34]	; 0x22
 8002926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e0b1      	b.n	8002a98 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13b      	bne.n	80029b4 <USB_EPStartXfer+0x3dc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	3302      	adds	r3, #2
 8002950:	005a      	lsls	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	2b3e      	cmp	r3, #62	; 0x3e
 8002960:	d916      	bls.n	8002990 <USB_EPStartXfer+0x3b8>
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	843b      	strh	r3, [r7, #32]
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <USB_EPStartXfer+0x3a0>
 8002972:	8c3b      	ldrh	r3, [r7, #32]
 8002974:	3b01      	subs	r3, #1
 8002976:	843b      	strh	r3, [r7, #32]
 8002978:	8c3b      	ldrh	r3, [r7, #32]
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e027      	b.n	80029e0 <USB_EPStartXfer+0x408>
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	843b      	strh	r3, [r7, #32]
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <USB_EPStartXfer+0x3ce>
 80029a0:	8c3b      	ldrh	r3, [r7, #32]
 80029a2:	3301      	adds	r3, #1
 80029a4:	843b      	strh	r3, [r7, #32]
 80029a6:	8c3b      	ldrh	r3, [r7, #32]
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e015      	b.n	80029e0 <USB_EPStartXfer+0x408>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d111      	bne.n	80029e0 <USB_EPStartXfer+0x408>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	3302      	adds	r3, #2
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	461a      	mov	r2, r3
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d141      	bne.n	8002a6c <USB_EPStartXfer+0x494>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	3306      	adds	r3, #6
 80029fc:	005a      	lsls	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0c:	d916      	bls.n	8002a3c <USB_EPStartXfer+0x464>
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	83fb      	strh	r3, [r7, #30]
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <USB_EPStartXfer+0x44c>
 8002a1e:	8bfb      	ldrh	r3, [r7, #30]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	83fb      	strh	r3, [r7, #30]
 8002a24:	8bfb      	ldrh	r3, [r7, #30]
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e02d      	b.n	8002a98 <USB_EPStartXfer+0x4c0>
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	83fb      	strh	r3, [r7, #30]
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <USB_EPStartXfer+0x47a>
 8002a4c:	8bfb      	ldrh	r3, [r7, #30]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	83fb      	strh	r3, [r7, #30]
 8002a52:	8bfb      	ldrh	r3, [r7, #30]
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e01b      	b.n	8002a98 <USB_EPStartXfer+0x4c0>
 8002a60:	ffff80c0 	.word	0xffff80c0
 8002a64:	ffffc080 	.word	0xffffc080
 8002a68:	ffff8080 	.word	0xffff8080
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d111      	bne.n	8002a98 <USB_EPStartXfer+0x4c0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	3302      	adds	r3, #2
 8002a88:	005a      	lsls	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a92:	461a      	mov	r2, r3
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ab4:	b29c      	uxth	r4, r3
 8002ab6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002aba:	b29c      	uxth	r4, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <USB_EPStartXfer+0x500>)
 8002ac8:	4323      	orrs	r3, r4
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3734      	adds	r7, #52	; 0x34
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	ffff8080 	.word	0xffff8080

08002adc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002adc:	b490      	push	{r4, r7}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8002b00:	401c      	ands	r4, r3
 8002b02:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8002b06:	f084 0410 	eor.w	r4, r4, #16
 8002b0a:	b2a1      	uxth	r1, r4
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <USB_EPSetStall+0xbc>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8013      	strh	r3, [r2, #0]
 8002b1e:	e034      	b.n	8002b8a <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d018      	beq.n	8002b5a <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	f084 0310 	eor.w	r3, r4, #16
 8002b44:	b29c      	uxth	r4, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	441a      	add	r2, r3
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <USB_EPSetStall+0xbc>)
 8002b52:	4323      	orrs	r3, r4
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8013      	strh	r3, [r2, #0]
 8002b58:	e017      	b.n	8002b8a <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	b29c      	uxth	r4, r3
 8002b72:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002b76:	b29c      	uxth	r4, r3
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <USB_EPSetStall+0xbc>)
 8002b84:	4323      	orrs	r3, r4
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc90      	pop	{r4, r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	ffff8080 	.word	0xffff8080

08002b9c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b9c:	b490      	push	{r4, r7}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d03a      	beq.n	8002c24 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <USB_EPClearStall+0x50>
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b299      	uxth	r1, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <USB_EPClearStall+0x108>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c02:	b29c      	uxth	r4, r3
 8002c04:	f084 0310 	eor.w	r3, r4, #16
 8002c08:	b29c      	uxth	r4, r3
 8002c0a:	f084 0320 	eor.w	r3, r4, #32
 8002c0e:	b29c      	uxth	r4, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <USB_EPClearStall+0x10c>)
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]
 8002c22:	e039      	b.n	8002c98 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d013      	beq.n	8002c62 <USB_EPClearStall+0xc6>
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	441a      	add	r2, r3
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <USB_EPClearStall+0x110>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	b29c      	uxth	r4, r3
 8002c7a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c7e:	b29c      	uxth	r4, r3
 8002c80:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c84:	b29c      	uxth	r4, r3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <USB_EPClearStall+0x10c>)
 8002c92:	4323      	orrs	r3, r4
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc90      	pop	{r4, r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	ffff80c0 	.word	0xffff80c0
 8002ca8:	ffff8080 	.word	0xffff8080
 8002cac:	ffffc080 	.word	0xffffc080

08002cb0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b08b      	sub	sp, #44	; 0x2c
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	4611      	mov	r1, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	460b      	mov	r3, r1
 8002d46:	80fb      	strh	r3, [r7, #6]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	105b      	asrs	r3, r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d72:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e01b      	b.n	8002db2 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	1c9a      	adds	r2, r3, #2
 8002d98:	623a      	str	r2, [r7, #32]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	3302      	adds	r3, #2
 8002da4:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	3b01      	subs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e0      	bne.n	8002d7a <USB_WritePMA+0x44>
  }
}
 8002db8:	bf00      	nop
 8002dba:	372c      	adds	r7, #44	; 0x2c
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b089      	sub	sp, #36	; 0x24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	461a      	mov	r2, r3
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	80fb      	strh	r3, [r7, #6]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002dd8:	88bb      	ldrh	r3, [r7, #4]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	105b      	asrs	r3, r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	461a      	mov	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df6:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e00e      	b.n	8002e1c <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	61ba      	str	r2, [r7, #24]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	b28a      	uxth	r2, r1
 8002e0e:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ed      	bne.n	8002dfe <USB_ReadPMA+0x3c>
  }
}
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7c1b      	ldrb	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2181      	movs	r1, #129	; 0x81
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 fc92 	bl	8004776 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e56:	2202      	movs	r2, #2
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f001 fc8b 	bl	8004776 <USBD_LL_OpenEP>
 8002e60:	e00b      	b.n	8002e7a <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	2202      	movs	r2, #2
 8002e66:	2181      	movs	r1, #129	; 0x81
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f001 fc84 	bl	8004776 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	2202      	movs	r2, #2
 8002e72:	2101      	movs	r1, #1
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f001 fc7e 	bl	8004776 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	2182      	movs	r1, #130	; 0x82
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f001 fc78 	bl	8004776 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002e86:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002e8a:	f001 fd95 	bl	80049b8 <USBD_static_malloc>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e026      	b.n	8002ef4 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002eac:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7c1b      	ldrb	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eda:	2101      	movs	r1, #1
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f001 fd34 	bl	800494a <USBD_LL_PrepareReceive>
 8002ee2:	e007      	b.n	8002ef4 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eea:	2340      	movs	r3, #64	; 0x40
 8002eec:	2101      	movs	r1, #1
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f001 fd2b 	bl	800494a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002f0e:	2181      	movs	r1, #129	; 0x81
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f001 fc56 	bl	80047c2 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8002f16:	2101      	movs	r1, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f001 fc52 	bl	80047c2 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8002f1e:	2182      	movs	r1, #130	; 0x82
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f001 fc4e 	bl	80047c2 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fd45 	bl	80049d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f68:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03a      	beq.n	8002fec <USBD_CDC_Setup+0x94>
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d000      	beq.n	8002f7c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8002f7a:	e043      	b.n	8003004 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	88db      	ldrh	r3, [r3, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d029      	beq.n	8002fd8 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da11      	bge.n	8002fb2 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8002f9a:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	88d2      	ldrh	r2, [r2, #6]
 8002fa0:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8002fa2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	88db      	ldrh	r3, [r3, #6]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 f80e 	bl	8003fcc <USBD_CtlSendData>
    break;
 8002fb0:	e029      	b.n	8003006 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	785a      	ldrb	r2, [r3, #1]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	88db      	ldrh	r3, [r3, #6]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8002fc8:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	88db      	ldrh	r3, [r3, #6]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 f829 	bl	8004028 <USBD_CtlPrepareRx>
    break;
 8002fd6:	e016      	b.n	8003006 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	7850      	ldrb	r0, [r2, #1]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	4798      	blx	r3
    break;
 8002fea:	e00c      	b.n	8003006 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b0a      	cmp	r3, #10
 8002ff2:	d001      	beq.n	8002ff8 <USBD_CDC_Setup+0xa0>
 8002ff4:	2b0b      	cmp	r3, #11
      break;
 8002ff6:	e005      	b.n	8003004 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4905      	ldr	r1, [pc, #20]	; (8003010 <USBD_CDC_Setup+0xb8>)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 ffe5 	bl	8003fcc <USBD_CtlSendData>
      break;
 8003002:	bf00      	nop
    break;
 8003004:	bf00      	nop
  }
  return USBD_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000198 	.word	0x20000198

08003014 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003026:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fc94 	bl	8004990 <USBD_LL_GetRxDataSize>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800308e:	4611      	mov	r1, r2
 8003090:	4798      	blx	r3

    return USBD_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80030ae:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <USBD_CDC_EP0_RxReady+0x46>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80030c0:	2bff      	cmp	r3, #255	; 0xff
 80030c2:	d010      	beq.n	80030e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80030d2:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80030da:	b292      	uxth	r2, r2
 80030dc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2243      	movs	r2, #67	; 0x43
 80030fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80030fe:	4b03      	ldr	r3, [pc, #12]	; (800310c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000090 	.word	0x20000090

08003110 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2243      	movs	r2, #67	; 0x43
 800311c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800311e:	4b03      	ldr	r3, [pc, #12]	; (800312c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000004c 	.word	0x2000004c

08003130 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2243      	movs	r2, #67	; 0x43
 800313c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800313e:	4b03      	ldr	r3, [pc, #12]	; (800314c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	200000d4 	.word	0x200000d4

08003150 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	220a      	movs	r2, #10
 800315c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800315e:	4b03      	ldr	r3, [pc, #12]	; (800316c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008

08003170 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800317a:	2302      	movs	r3, #2
 800317c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80031b0:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80031de:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003202:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 800322c:	b29b      	uxth	r3, r3
 800322e:	2181      	movs	r1, #129	; 0x81
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f001 fb67 	bl	8004904 <USBD_LL_Transmit>
      
      return USBD_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e002      	b.n	8003240 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003256:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7c1b      	ldrb	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	2101      	movs	r1, #1
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f001 fb67 	bl	800494a <USBD_LL_PrepareReceive>
 800327c:	e007      	b.n	800328e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003284:	2340      	movs	r3, #64	; 0x40
 8003286:	2101      	movs	r1, #1
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 fb5e 	bl	800494a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80032b0:	2302      	movs	r3, #2
 80032b2:	e01a      	b.n	80032ea <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f001 f9d2 	bl	800468c <USBD_LL_Init>
  
  return USBD_OK; 
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e001      	b.n	8003318 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003314:	2302      	movs	r3, #2
 8003316:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f001 fa07 	bl	8004740 <USBD_LL_Start>
  
  return USBD_OK;  
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800335c:	2302      	movs	r3, #2
 800335e:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	4611      	mov	r1, r2
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
  return USBD_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fd59 	bl	8003e7e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80033da:	461a      	mov	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d00b      	beq.n	8003408 <USBD_LL_SetupStage+0x54>
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d011      	beq.n	8003418 <USBD_LL_SetupStage+0x64>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d117      	bne.n	8003428 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f987 	bl	8003714 <USBD_StdDevReq>
    break;
 8003406:	e01a      	b.n	800343e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f9cf 	bl	80037b4 <USBD_StdItfReq>
    break;
 8003416:	e012      	b.n	800343e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9fa 	bl	800381a <USBD_StdEPReq>
    break;
 8003426:	e00a      	b.n	800343e <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800342e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f001 f9e2 	bl	8004800 <USBD_LL_StallEP>
    break;
 800343c:	bf00      	nop
  }  
  return USBD_OK;  
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	460b      	mov	r3, r1
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d138      	bne.n	80034ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003462:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800346a:	2b03      	cmp	r3, #3
 800346c:	d142      	bne.n	80034f4 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	d914      	bls.n	80034a4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	1ad2      	subs	r2, r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4293      	cmp	r3, r2
 8003492:	bf28      	it	cs
 8003494:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fde1 	bl	8004064 <USBD_CtlContinueRx>
 80034a2:	e027      	b.n	80034f4 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d105      	bne.n	80034c6 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fdde 	bl	8004088 <USBD_CtlSendStatus>
 80034cc:	e012      	b.n	80034f4 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d107      	bne.n	80034f4 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	7afa      	ldrb	r2, [r7, #11]
 80034ee:	4611      	mov	r1, r2
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	4798      	blx	r3
  }  
  return USBD_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	460b      	mov	r3, r1
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d16c      	bne.n	80035ec <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3314      	adds	r3, #20
 8003516:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800351e:	2b02      	cmp	r3, #2
 8003520:	d157      	bne.n	80035d2 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	429a      	cmp	r2, r3
 800352c:	d915      	bls.n	800355a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fd5c 	bl	8004004 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800354c:	2300      	movs	r3, #0
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f001 f9f9 	bl	800494a <USBD_LL_PrepareReceive>
 8003558:	e03b      	b.n	80035d2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	fbb3 f1f2 	udiv	r1, r3, r2
 8003566:	fb02 f201 	mul.w	r2, r2, r1
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11c      	bne.n	80035aa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8003578:	429a      	cmp	r2, r3
 800357a:	d316      	bcc.n	80035aa <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8003586:	429a      	cmp	r2, r3
 8003588:	d20f      	bcs.n	80035aa <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2100      	movs	r1, #0
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fd38 	bl	8004004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800359c:	2300      	movs	r3, #0
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f001 f9d1 	bl	800494a <USBD_LL_PrepareReceive>
 80035a8:	e013      	b.n	80035d2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d105      	bne.n	80035cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fd6e 	bl	80040ae <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d11a      	bne.n	8003612 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fead 	bl	800333c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80035ea:	e012      	b.n	8003612 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d107      	bne.n	8003612 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	7afa      	ldrb	r2, [r7, #11]
 800360c:	4611      	mov	r1, r2
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	4798      	blx	r3
  }  
  return USBD_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003624:	2340      	movs	r3, #64	; 0x40
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f001 f8a3 	bl	8004776 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003638:	2340      	movs	r3, #64	; 0x40
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f001 f899 	bl	8004776 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	4611      	mov	r1, r2
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 
  
  return USBD_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2204      	movs	r2, #4
 80036b0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d10b      	bne.n	800370a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	2b09      	cmp	r3, #9
 8003728:	d839      	bhi.n	800379e <USBD_StdDevReq+0x8a>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <USBD_StdDevReq+0x1c>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003781 	.word	0x08003781
 8003734:	08003795 	.word	0x08003795
 8003738:	0800379f 	.word	0x0800379f
 800373c:	0800378b 	.word	0x0800378b
 8003740:	0800379f 	.word	0x0800379f
 8003744:	08003763 	.word	0x08003763
 8003748:	08003759 	.word	0x08003759
 800374c:	0800379f 	.word	0x0800379f
 8003750:	08003777 	.word	0x08003777
 8003754:	0800376d 	.word	0x0800376d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f936 	bl	80039cc <USBD_GetDescriptor>
    break;
 8003760:	e022      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8003762:	6839      	ldr	r1, [r7, #0]
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa25 	bl	8003bb4 <USBD_SetAddress>
    break;
 800376a:	e01d      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa5e 	bl	8003c30 <USBD_SetConfig>
    break;
 8003774:	e018      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fae1 	bl	8003d40 <USBD_GetConfig>
    break;
 800377e:	e013      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb0e 	bl	8003da4 <USBD_GetStatus>
    break;
 8003788:	e00e      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800378a:	6839      	ldr	r1, [r7, #0]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb33 	bl	8003df8 <USBD_SetFeature>
    break;
 8003792:	e009      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fb49 	bl	8003e2e <USBD_ClrFeature>
    break;
 800379c:	e004      	b.n	80037a8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fba8 	bl	8003ef6 <USBD_CtlError>
    break;
 80037a6:	bf00      	nop
  }
  
  return ret;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop

080037b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d11b      	bne.n	8003804 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	889b      	ldrh	r3, [r3, #4]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d811      	bhi.n	80037fa <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	88db      	ldrh	r3, [r3, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d110      	bne.n	800380e <USBD_StdItfReq+0x5a>
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fc48 	bl	8004088 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80037f8:	e009      	b.n	800380e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb7a 	bl	8003ef6 <USBD_CtlError>
    break;
 8003802:	e004      	b.n	800380e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb75 	bl	8003ef6 <USBD_CtlError>
    break;
 800380c:	e000      	b.n	8003810 <USBD_StdItfReq+0x5c>
    break;
 800380e:	bf00      	nop
  }
  return USBD_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	889b      	ldrh	r3, [r3, #4]
 800382c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003836:	2b20      	cmp	r3, #32
 8003838:	d108      	bne.n	800384c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	6839      	ldr	r1, [r7, #0]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
    
    return USBD_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e0ba      	b.n	80039c2 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d039      	beq.n	80038c8 <USBD_StdEPReq+0xae>
 8003854:	2b03      	cmp	r3, #3
 8003856:	d002      	beq.n	800385e <USBD_StdEPReq+0x44>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d06b      	beq.n	8003934 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800385c:	e0b0      	b.n	80039c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003864:	2b02      	cmp	r3, #2
 8003866:	d002      	beq.n	800386e <USBD_StdEPReq+0x54>
 8003868:	2b03      	cmp	r3, #3
 800386a:	d00c      	beq.n	8003886 <USBD_StdEPReq+0x6c>
 800386c:	e025      	b.n	80038ba <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d027      	beq.n	80038c4 <USBD_StdEPReq+0xaa>
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d024      	beq.n	80038c4 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800387a:	7bbb      	ldrb	r3, [r7, #14]
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 ffbe 	bl	8004800 <USBD_LL_StallEP>
      break;	
 8003884:	e01e      	b.n	80038c4 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	885b      	ldrh	r3, [r3, #2]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800388e:	7bbb      	ldrb	r3, [r7, #14]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <USBD_StdEPReq+0x8a>
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d004      	beq.n	80038a4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800389a:	7bbb      	ldrb	r3, [r7, #14]
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 ffae 	bl	8004800 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fbe8 	bl	8004088 <USBD_CtlSendStatus>
      break;
 80038b8:	e005      	b.n	80038c6 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb1a 	bl	8003ef6 <USBD_CtlError>
      break;    
 80038c2:	e000      	b.n	80038c6 <USBD_StdEPReq+0xac>
      break;	
 80038c4:	bf00      	nop
    break;
 80038c6:	e07b      	b.n	80039c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d002      	beq.n	80038d8 <USBD_StdEPReq+0xbe>
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d00c      	beq.n	80038f0 <USBD_StdEPReq+0xd6>
 80038d6:	e024      	b.n	8003922 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d026      	beq.n	800392c <USBD_StdEPReq+0x112>
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d023      	beq.n	800392c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80038e4:	7bbb      	ldrb	r3, [r7, #14]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 ff89 	bl	8004800 <USBD_LL_StallEP>
      break;	
 80038ee:	e01d      	b.n	800392c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	885b      	ldrh	r3, [r3, #2]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11b      	bne.n	8003930 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80038f8:	7bbb      	ldrb	r3, [r7, #14]
 80038fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 ff99 	bl	800483e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fbb4 	bl	8004088 <USBD_CtlSendStatus>
      break;
 8003920:	e006      	b.n	8003930 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fae6 	bl	8003ef6 <USBD_CtlError>
      break;    
 800392a:	e002      	b.n	8003932 <USBD_StdEPReq+0x118>
      break;	
 800392c:	bf00      	nop
 800392e:	e047      	b.n	80039c0 <USBD_StdEPReq+0x1a6>
      break;
 8003930:	bf00      	nop
    break;
 8003932:	e045      	b.n	80039c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800393a:	2b02      	cmp	r3, #2
 800393c:	d002      	beq.n	8003944 <USBD_StdEPReq+0x12a>
 800393e:	2b03      	cmp	r3, #3
 8003940:	d00b      	beq.n	800395a <USBD_StdEPReq+0x140>
 8003942:	e036      	b.n	80039b2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 ff54 	bl	8004800 <USBD_LL_StallEP>
      break;	
 8003958:	e030      	b.n	80039bc <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800395a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800395e:	2b00      	cmp	r3, #0
 8003960:	da08      	bge.n	8003974 <USBD_StdEPReq+0x15a>
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003968:	3301      	adds	r3, #1
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	e007      	b.n	8003984 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800397a:	3310      	adds	r3, #16
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 ff76 	bl	800487c <USBD_LL_IsStallEP>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e002      	b.n	80039a4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80039a4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80039a6:	2202      	movs	r2, #2
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fb0e 	bl	8003fcc <USBD_CtlSendData>
      break;
 80039b0:	e005      	b.n	80039be <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa9e 	bl	8003ef6 <USBD_CtlError>
      break;
 80039ba:	e000      	b.n	80039be <USBD_StdEPReq+0x1a4>
      break;	
 80039bc:	bf00      	nop
    break;
 80039be:	bf00      	nop
  }
  return ret;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	885b      	ldrh	r3, [r3, #2]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	f200 80c9 	bhi.w	8003b78 <USBD_GetDescriptor+0x1ac>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <USBD_GetDescriptor+0x20>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	08003a21 	.word	0x08003a21
 80039f4:	08003a61 	.word	0x08003a61
 80039f8:	08003b79 	.word	0x08003b79
 80039fc:	08003b79 	.word	0x08003b79
 8003a00:	08003b25 	.word	0x08003b25
 8003a04:	08003b4b 	.word	0x08003b4b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	7c12      	ldrb	r2, [r2, #16]
 8003a14:	f107 010a 	add.w	r1, r7, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
 8003a1c:	60f8      	str	r0, [r7, #12]
    break;
 8003a1e:	e0b0      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7c1b      	ldrb	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	f107 020a 	add.w	r2, r7, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4798      	blx	r3
 8003a38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8003a42:	e09e      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f107 020a 	add.w	r2, r7, #10
 8003a50:	4610      	mov	r0, r2
 8003a52:	4798      	blx	r3
 8003a54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
    break;
 8003a5e:	e090      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	885b      	ldrh	r3, [r3, #2]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d856      	bhi.n	8003b18 <USBD_GetDescriptor+0x14c>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <USBD_GetDescriptor+0xa4>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a89 	.word	0x08003a89
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003ae9 	.word	0x08003ae9
 8003a84:	08003b01 	.word	0x08003b01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	7c12      	ldrb	r2, [r2, #16]
 8003a94:	f107 010a 	add.w	r1, r7, #10
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4798      	blx	r3
 8003a9c:	60f8      	str	r0, [r7, #12]
      break;
 8003a9e:	e040      	b.n	8003b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	7c12      	ldrb	r2, [r2, #16]
 8003aac:	f107 010a 	add.w	r1, r7, #10
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
 8003ab4:	60f8      	str	r0, [r7, #12]
      break;
 8003ab6:	e034      	b.n	8003b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	7c12      	ldrb	r2, [r2, #16]
 8003ac4:	f107 010a 	add.w	r1, r7, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
 8003acc:	60f8      	str	r0, [r7, #12]
      break;
 8003ace:	e028      	b.n	8003b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	7c12      	ldrb	r2, [r2, #16]
 8003adc:	f107 010a 	add.w	r1, r7, #10
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4798      	blx	r3
 8003ae4:	60f8      	str	r0, [r7, #12]
      break;
 8003ae6:	e01c      	b.n	8003b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	7c12      	ldrb	r2, [r2, #16]
 8003af4:	f107 010a 	add.w	r1, r7, #10
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
 8003afc:	60f8      	str	r0, [r7, #12]
      break;
 8003afe:	e010      	b.n	8003b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	7c12      	ldrb	r2, [r2, #16]
 8003b0c:	f107 010a 	add.w	r1, r7, #10
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
 8003b14:	60f8      	str	r0, [r7, #12]
      break;
 8003b16:	e004      	b.n	8003b22 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9eb 	bl	8003ef6 <USBD_CtlError>
      return;
 8003b20:	e044      	b.n	8003bac <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8003b22:	e02e      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7c1b      	ldrb	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f107 020a 	add.w	r2, r7, #10
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4798      	blx	r3
 8003b3c:	60f8      	str	r0, [r7, #12]
      break;
 8003b3e:	e020      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9d7 	bl	8003ef6 <USBD_CtlError>
      return;
 8003b48:	e030      	b.n	8003bac <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7c1b      	ldrb	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f107 020a 	add.w	r2, r7, #10
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4798      	blx	r3
 8003b62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	2207      	movs	r2, #7
 8003b6a:	701a      	strb	r2, [r3, #0]
      break; 
 8003b6c:	e009      	b.n	8003b82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f9c0 	bl	8003ef6 <USBD_CtlError>
      return;
 8003b76:	e019      	b.n	8003bac <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9bb 	bl	8003ef6 <USBD_CtlError>
    return;
 8003b80:	e014      	b.n	8003bac <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d011      	beq.n	8003bac <USBD_GetDescriptor+0x1e0>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	88db      	ldrh	r3, [r3, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	88da      	ldrh	r2, [r3, #6]
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf28      	it	cs
 8003b9a:	4613      	movcs	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8003ba0:	897b      	ldrh	r3, [r7, #10]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa10 	bl	8003fcc <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop

08003bb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	889b      	ldrh	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12c      	bne.n	8003c20 <USBD_SetAddress+0x6c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	88db      	ldrh	r3, [r3, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d128      	bne.n	8003c20 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	885b      	ldrh	r3, [r3, #2]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd8:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d104      	bne.n	8003bee <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f985 	bl	8003ef6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bec:	e01c      	b.n	8003c28 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fe63 	bl	80048c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fa41 	bl	8004088 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003c14:	e008      	b.n	8003c28 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003c1e:	e003      	b.n	8003c28 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f967 	bl	8003ef6 <USBD_CtlError>
  } 
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	885b      	ldrh	r3, [r3, #2]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b3e      	ldr	r3, [pc, #248]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003c42:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c44:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d904      	bls.n	8003c56 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f951 	bl	8003ef6 <USBD_CtlError>
 8003c54:	e06f      	b.n	8003d36 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d002      	beq.n	8003c66 <USBD_SetConfig+0x36>
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d023      	beq.n	8003cac <USBD_SetConfig+0x7c>
 8003c64:	e062      	b.n	8003d2c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8003c66:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01a      	beq.n	8003ca4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003c6e:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003c80:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fb62 	bl	8003350 <USBD_SetClassConfig>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d104      	bne.n	8003c9c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f92e 	bl	8003ef6 <USBD_CtlError>
          return;
 8003c9a:	e04c      	b.n	8003d36 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f9f3 	bl	8004088 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8003ca2:	e048      	b.n	8003d36 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f9ef 	bl	8004088 <USBD_CtlSendStatus>
      break;
 8003caa:	e044      	b.n	8003d36 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d112      	bne.n	8003cda <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fb5e 	bl	800338e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f9d8 	bl	8004088 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8003cd8:	e02d      	b.n	8003d36 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d01d      	beq.n	8003d24 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fb4c 	bl	800338e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <USBD_SetConfig+0x10c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fb22 	bl	8003350 <USBD_SetClassConfig>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d104      	bne.n	8003d1c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8ee 	bl	8003ef6 <USBD_CtlError>
          return;
 8003d1a:	e00c      	b.n	8003d36 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9b3 	bl	8004088 <USBD_CtlSendStatus>
      break;
 8003d22:	e008      	b.n	8003d36 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f9af 	bl	8004088 <USBD_CtlSendStatus>
      break;
 8003d2a:	e004      	b.n	8003d36 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8e1 	bl	8003ef6 <USBD_CtlError>
      break;
 8003d34:	bf00      	nop
    }
  }
}
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000199 	.word	0x20000199

08003d40 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	88db      	ldrh	r3, [r3, #6]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d004      	beq.n	8003d5c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8ce 	bl	8003ef6 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8003d5a:	e01f      	b.n	8003d9c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d002      	beq.n	8003d6c <USBD_GetConfig+0x2c>
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d00b      	beq.n	8003d82 <USBD_GetConfig+0x42>
 8003d6a:	e012      	b.n	8003d92 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8003d76:	2201      	movs	r2, #1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f926 	bl	8003fcc <USBD_CtlSendData>
      break;
 8003d80:	e00c      	b.n	8003d9c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8003d86:	2201      	movs	r2, #1
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f91e 	bl	8003fcc <USBD_CtlSendData>
      break;
 8003d90:	e004      	b.n	8003d9c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8ae 	bl	8003ef6 <USBD_CtlError>
      break;
 8003d9a:	bf00      	nop
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003db4:	3b02      	subs	r3, #2
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d815      	bhi.n	8003de6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8f4 	bl	8003fcc <USBD_CtlSendData>
                      2);
    break;
 8003de4:	e004      	b.n	8003df0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f884 	bl	8003ef6 <USBD_CtlError>
    break;
 8003dee:	bf00      	nop
  }
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	885b      	ldrh	r3, [r3, #2]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10d      	bne.n	8003e26 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f931 	bl	8004088 <USBD_CtlSendStatus>
  }

}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003e3e:	3b02      	subs	r3, #2
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d812      	bhi.n	8003e6a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	885b      	ldrh	r3, [r3, #2]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d113      	bne.n	8003e74 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f910 	bl	8004088 <USBD_CtlSendStatus>
    }
    break;
 8003e68:	e004      	b.n	8003e74 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f842 	bl	8003ef6 <USBD_CtlError>
    break;
 8003e72:	e000      	b.n	8003e76 <USBD_ClrFeature+0x48>
    break;
 8003e74:	bf00      	nop
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	785a      	ldrb	r2, [r3, #1]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3303      	adds	r3, #3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	3305      	adds	r3, #5
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	3306      	adds	r3, #6
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3307      	adds	r3, #7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	80da      	strh	r2, [r3, #6]

}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fc7c 	bl	8004800 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fc78 	bl	8004800 <USBD_LL_StallEP>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d033      	beq.n	8003f96 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f835 	bl	8003f9e <USBD_GetLen>
 8003f34:	4603      	mov	r3, r0
 8003f36:	3301      	adds	r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	75f9      	strb	r1, [r7, #23]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	440b      	add	r3, r1
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	75fa      	strb	r2, [r7, #23]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	2203      	movs	r2, #3
 8003f64:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8003f66:	e012      	b.n	8003f8e <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	60fa      	str	r2, [r7, #12]
 8003f6e:	7dfa      	ldrb	r2, [r7, #23]
 8003f70:	1c51      	adds	r1, r2, #1
 8003f72:	75f9      	strb	r1, [r7, #23]
 8003f74:	4611      	mov	r1, r2
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	440a      	add	r2, r1
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	75fa      	strb	r2, [r7, #23]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e8      	bne.n	8003f68 <USBD_GetString+0x50>
    }
  } 
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8003faa:	e005      	b.n	8003fb8 <USBD_GetLen+0x1a>
    {
        len++;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
        buf++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f5      	bne.n	8003fac <USBD_GetLen+0xe>
    }

    return len;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fc85 	bl	8004904 <USBD_LL_Transmit>
  
  return USBD_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	2100      	movs	r1, #0
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fc73 	bl	8004904 <USBD_LL_Transmit>
  
  return USBD_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2203      	movs	r2, #3
 800403a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	2100      	movs	r1, #0
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fc78 	bl	800494a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	2100      	movs	r1, #0
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fc66 	bl	800494a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2204      	movs	r2, #4
 8004094:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004098:	2300      	movs	r3, #0
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fc30 	bl	8004904 <USBD_LL_Transmit>
  
  return USBD_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80040be:	2300      	movs	r3, #0
 80040c0:	2200      	movs	r2, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fc40 	bl	800494a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040da:	f7fc f837 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040de:	f000 f817 	bl	8004110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040e2:	f000 f871 	bl	80041c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80040e6:	f000 f931 	bl	800434c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t txBuffer[] = { 72, 0x6f, 'l', 'a', '\n' };
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <main+0x38>)
 80040ec:	463b      	mov	r3, r7
 80040ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f2:	6018      	str	r0, [r3, #0]
 80040f4:	3304      	adds	r3, #4
 80040f6:	7019      	strb	r1, [r3, #0]
  while (1)
  {
		CDC_Transmit_FS(txBuffer, 5);
 80040f8:	463b      	mov	r3, r7
 80040fa:	2105      	movs	r1, #5
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9e3 	bl	80044c8 <CDC_Transmit_FS>
		HAL_Delay(500);
 8004102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004106:	f7fc f883 	bl	8000210 <HAL_Delay>
		CDC_Transmit_FS(txBuffer, 5);
 800410a:	e7f5      	b.n	80040f8 <main+0x24>
 800410c:	08004d3c 	.word	0x08004d3c

08004110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b094      	sub	sp, #80	; 0x50
 8004114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800411a:	2228      	movs	r2, #40	; 0x28
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fdee 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004140:	2301      	movs	r3, #1
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800414a:	2300      	movs	r3, #0
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800414e:	2301      	movs	r3, #1
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004152:	2302      	movs	r3, #2
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800415c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004160:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd f8d0 	bl	800130c <HAL_RCC_OscConfig>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004172:	f000 f84b 	bl	800420c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004176:	230f      	movs	r3, #15
 8004178:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800417a:	2302      	movs	r3, #2
 800417c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004186:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fb1e 	bl	80017d4 <HAL_RCC_ClockConfig>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800419e:	f000 f835 	bl	800420c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80041a2:	2310      	movs	r3, #16
 80041a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80041a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fc9c 	bl	8001aec <HAL_RCCEx_PeriphCLKConfig>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80041ba:	f000 f827 	bl	800420c <Error_Handler>
  }
}
 80041be:	bf00      	nop
 80041c0:	3750      	adds	r7, #80	; 0x50
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <MX_GPIO_Init+0x40>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <MX_GPIO_Init+0x40>)
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	6193      	str	r3, [r2, #24]
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <MX_GPIO_Init+0x40>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <MX_GPIO_Init+0x40>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	4a07      	ldr	r2, [pc, #28]	; (8004208 <MX_GPIO_Init+0x40>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6193      	str	r3, [r2, #24]
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <MX_GPIO_Init+0x40>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]

}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000

0800420c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_MspInit+0x5c>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4a14      	ldr	r2, [pc, #80]	; (8004274 <HAL_MspInit+0x5c>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	6193      	str	r3, [r2, #24]
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_MspInit+0x5c>)
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_MspInit+0x5c>)
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <HAL_MspInit+0x5c>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	61d3      	str	r3, [r2, #28]
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_MspInit+0x5c>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_MspInit+0x60>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_MspInit+0x60>)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40021000 	.word	0x40021000
 8004278:	40010000 	.word	0x40010000

0800427c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428c:	e7fe      	b.n	800428c <HardFault_Handler+0x4>

0800428e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <MemManage_Handler+0x4>

08004294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004298:	e7fe      	b.n	8004298 <BusFault_Handler+0x4>

0800429a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800429e:	e7fe      	b.n	800429e <UsageFault_Handler+0x4>

080042a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c8:	f7fb ff86 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80042d6:	f7fc f9c6 	bl	8000666 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000db4 	.word	0x20000db4

080042e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <SystemInit+0x5c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <SystemInit+0x5c>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <SystemInit+0x5c>)
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4911      	ldr	r1, [pc, #68]	; (8004340 <SystemInit+0x5c>)
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <SystemInit+0x60>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <SystemInit+0x5c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <SystemInit+0x5c>)
 8004306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800430a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <SystemInit+0x5c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <SystemInit+0x5c>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <SystemInit+0x5c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a07      	ldr	r2, [pc, #28]	; (8004340 <SystemInit+0x5c>)
 8004322:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004326:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <SystemInit+0x5c>)
 800432a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800432e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SystemInit+0x64>)
 8004332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004336:	609a      	str	r2, [r3, #8]
#endif 
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40021000 	.word	0x40021000
 8004344:	f8ff0000 	.word	0xf8ff0000
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004350:	2200      	movs	r2, #0
 8004352:	4912      	ldr	r1, [pc, #72]	; (800439c <MX_USB_DEVICE_Init+0x50>)
 8004354:	4812      	ldr	r0, [pc, #72]	; (80043a0 <MX_USB_DEVICE_Init+0x54>)
 8004356:	f7fe ffa1 	bl	800329c <USBD_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004360:	f7ff ff54 	bl	800420c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004364:	490f      	ldr	r1, [pc, #60]	; (80043a4 <MX_USB_DEVICE_Init+0x58>)
 8004366:	480e      	ldr	r0, [pc, #56]	; (80043a0 <MX_USB_DEVICE_Init+0x54>)
 8004368:	f7fe ffc3 	bl	80032f2 <USBD_RegisterClass>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004372:	f7ff ff4b 	bl	800420c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004376:	490c      	ldr	r1, [pc, #48]	; (80043a8 <MX_USB_DEVICE_Init+0x5c>)
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <MX_USB_DEVICE_Init+0x54>)
 800437a:	f7fe fef9 	bl	8003170 <USBD_CDC_RegisterInterface>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004384:	f7ff ff42 	bl	800420c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004388:	4805      	ldr	r0, [pc, #20]	; (80043a0 <MX_USB_DEVICE_Init+0x54>)
 800438a:	f7fe ffcb 	bl	8003324 <USBD_Start>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004394:	f7ff ff3a 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000012c 	.word	0x2000012c
 80043a0:	200003c0 	.word	0x200003c0
 80043a4:	20000014 	.word	0x20000014
 80043a8:	2000011c 	.word	0x2000011c

080043ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80043b0:	2200      	movs	r2, #0
 80043b2:	4905      	ldr	r1, [pc, #20]	; (80043c8 <CDC_Init_FS+0x1c>)
 80043b4:	4805      	ldr	r0, [pc, #20]	; (80043cc <CDC_Init_FS+0x20>)
 80043b6:	f7fe fef1 	bl	800319c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80043ba:	4905      	ldr	r1, [pc, #20]	; (80043d0 <CDC_Init_FS+0x24>)
 80043bc:	4803      	ldr	r0, [pc, #12]	; (80043cc <CDC_Init_FS+0x20>)
 80043be:	f7fe ff06 	bl	80031ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80043c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200009cc 	.word	0x200009cc
 80043cc:	200003c0 	.word	0x200003c0
 80043d0:	200005e4 	.word	0x200005e4

080043d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80043d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
	...

080043e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b23      	cmp	r3, #35	; 0x23
 80043f8:	d84a      	bhi.n	8004490 <CDC_Control_FS+0xac>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <CDC_Control_FS+0x1c>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004491 	.word	0x08004491
 8004404:	08004491 	.word	0x08004491
 8004408:	08004491 	.word	0x08004491
 800440c:	08004491 	.word	0x08004491
 8004410:	08004491 	.word	0x08004491
 8004414:	08004491 	.word	0x08004491
 8004418:	08004491 	.word	0x08004491
 800441c:	08004491 	.word	0x08004491
 8004420:	08004491 	.word	0x08004491
 8004424:	08004491 	.word	0x08004491
 8004428:	08004491 	.word	0x08004491
 800442c:	08004491 	.word	0x08004491
 8004430:	08004491 	.word	0x08004491
 8004434:	08004491 	.word	0x08004491
 8004438:	08004491 	.word	0x08004491
 800443c:	08004491 	.word	0x08004491
 8004440:	08004491 	.word	0x08004491
 8004444:	08004491 	.word	0x08004491
 8004448:	08004491 	.word	0x08004491
 800444c:	08004491 	.word	0x08004491
 8004450:	08004491 	.word	0x08004491
 8004454:	08004491 	.word	0x08004491
 8004458:	08004491 	.word	0x08004491
 800445c:	08004491 	.word	0x08004491
 8004460:	08004491 	.word	0x08004491
 8004464:	08004491 	.word	0x08004491
 8004468:	08004491 	.word	0x08004491
 800446c:	08004491 	.word	0x08004491
 8004470:	08004491 	.word	0x08004491
 8004474:	08004491 	.word	0x08004491
 8004478:	08004491 	.word	0x08004491
 800447c:	08004491 	.word	0x08004491
 8004480:	08004491 	.word	0x08004491
 8004484:	08004491 	.word	0x08004491
 8004488:	08004491 	.word	0x08004491
 800448c:	08004491 	.word	0x08004491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004490:	bf00      	nop
  }

  return (USBD_OK);
 8004492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4805      	ldr	r0, [pc, #20]	; (80044c4 <CDC_Receive_FS+0x24>)
 80044ae:	f7fe fe8e 	bl	80031ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80044b2:	4804      	ldr	r0, [pc, #16]	; (80044c4 <CDC_Receive_FS+0x24>)
 80044b4:	f7fe fec8 	bl	8003248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80044b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200003c0 	.word	0x200003c0

080044c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <CDC_Transmit_FS+0x48>)
 80044da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00b      	b.n	8004506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80044ee:	887b      	ldrh	r3, [r7, #2]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <CDC_Transmit_FS+0x48>)
 80044f6:	f7fe fe51 	bl	800319c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80044fa:	4805      	ldr	r0, [pc, #20]	; (8004510 <CDC_Transmit_FS+0x48>)
 80044fc:	f7fe fe7a 	bl	80031f4 <USBD_CDC_TransmitPacket>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200003c0 	.word	0x200003c0

08004514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <HAL_PCD_MspInit+0x44>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d113      	bne.n	800454e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_PCD_MspInit+0x48>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_PCD_MspInit+0x48>)
 800452c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004530:	61d3      	str	r3, [r2, #28]
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_PCD_MspInit+0x48>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	2100      	movs	r1, #0
 8004542:	2014      	movs	r0, #20
 8004544:	f7fb ff59 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004548:	2014      	movs	r0, #20
 800454a:	f7fb ff72 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40005c00 	.word	0x40005c00
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7fe ff1c 	bl	80033b4 <USBD_LL_SetupStage>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	015b      	lsls	r3, r3, #5
 800459c:	4413      	add	r3, r2
 800459e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fe ff4e 	bl	8003448 <USBD_LL_DataOutStage>
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	015b      	lsls	r3, r3, #5
 80045cc:	4413      	add	r3, r2
 80045ce:	333c      	adds	r3, #60	; 0x3c
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f7fe ff92 	bl	80034fe <USBD_LL_DataInStage>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f875 	bl	80036e0 <USBD_LL_SOF>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d001      	beq.n	8004616 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004612:	f7ff fdfb 	bl	800420c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f82a 	bl	800367a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fff5 	bl	800361c <USBD_LL_Reset>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff f824 	bl	8003698 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_PCD_SuspendCallback+0x30>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	4a03      	ldr	r2, [pc, #12]	; (800466c <HAL_PCD_SuspendCallback+0x30>)
 800465e:	f043 0306 	orr.w	r3, r3, #6
 8004662:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f81e 	bl	80036c0 <USBD_LL_Resume>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004694:	4a28      	ldr	r2, [pc, #160]	; (8004738 <USBD_LL_Init+0xac>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a26      	ldr	r2, [pc, #152]	; (8004738 <USBD_LL_Init+0xac>)
 80046a0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <USBD_LL_Init+0xac>)
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <USBD_LL_Init+0xb0>)
 80046a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80046aa:	4b23      	ldr	r3, [pc, #140]	; (8004738 <USBD_LL_Init+0xac>)
 80046ac:	2208      	movs	r2, #8
 80046ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <USBD_LL_Init+0xac>)
 80046b2:	2202      	movs	r2, #2
 80046b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <USBD_LL_Init+0xac>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <USBD_LL_Init+0xac>)
 80046be:	2200      	movs	r2, #0
 80046c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <USBD_LL_Init+0xac>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80046c8:	481b      	ldr	r0, [pc, #108]	; (8004738 <USBD_LL_Init+0xac>)
 80046ca:	f7fb fecc 	bl	8000466 <HAL_PCD_Init>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80046d4:	f7ff fd9a 	bl	800420c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80046de:	2318      	movs	r3, #24
 80046e0:	2200      	movs	r2, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	f7fc fdd4 	bl	8001290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80046ee:	2358      	movs	r3, #88	; 0x58
 80046f0:	2200      	movs	r2, #0
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	f7fc fdcc 	bl	8001290 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80046fe:	23c0      	movs	r3, #192	; 0xc0
 8004700:	2200      	movs	r2, #0
 8004702:	2181      	movs	r1, #129	; 0x81
 8004704:	f7fc fdc4 	bl	8001290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800470e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004712:	2200      	movs	r2, #0
 8004714:	2101      	movs	r1, #1
 8004716:	f7fc fdbb 	bl	8001290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004724:	2200      	movs	r2, #0
 8004726:	2182      	movs	r1, #130	; 0x82
 8004728:	f7fc fdb2 	bl	8001290 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000db4 	.word	0x20000db4
 800473c:	40005c00 	.word	0x40005c00

08004740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004756:	4618      	mov	r0, r3
 8004758:	f7fb ff5f 	bl	800061a <HAL_PCD_Start>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f948 	bl	80049f8 <USBD_Get_USB_Status>
 8004768:	4603      	mov	r3, r0
 800476a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800476c:	7bbb      	ldrb	r3, [r7, #14]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	4608      	mov	r0, r1
 8004780:	4611      	mov	r1, r2
 8004782:	461a      	mov	r2, r3
 8004784:	4603      	mov	r3, r0
 8004786:	70fb      	strb	r3, [r7, #3]
 8004788:	460b      	mov	r3, r1
 800478a:	70bb      	strb	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800479e:	78bb      	ldrb	r3, [r7, #2]
 80047a0:	883a      	ldrh	r2, [r7, #0]
 80047a2:	78f9      	ldrb	r1, [r7, #3]
 80047a4:	f7fc f886 	bl	80008b4 <HAL_PCD_EP_Open>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f922 	bl	80049f8 <USBD_Get_USB_Status>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fc f8bc 	bl	800095e <HAL_PCD_EP_Close>
 80047e6:	4603      	mov	r3, r0
 80047e8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f903 	bl	80049f8 <USBD_Get_USB_Status>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc f96f 	bl	8000b02 <HAL_PCD_EP_SetStall>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f8e4 	bl	80049f8 <USBD_Get_USB_Status>
 8004830:	4603      	mov	r3, r0
 8004832:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004834:	7bbb      	ldrb	r3, [r7, #14]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc f9a5 	bl	8000bac <HAL_PCD_EP_ClrStall>
 8004862:	4603      	mov	r3, r0
 8004864:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f8c5 	bl	80049f8 <USBD_Get_USB_Status>
 800486e:	4603      	mov	r3, r0
 8004870:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8004872:	7bbb      	ldrb	r3, [r7, #14]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800488e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8004890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	da08      	bge.n	80048aa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	015b      	lsls	r3, r3, #5
 80048a2:	4413      	add	r3, r2
 80048a4:	332a      	adds	r3, #42	; 0x2a
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	e008      	b.n	80048bc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	015b      	lsls	r3, r3, #5
 80048b4:	4413      	add	r3, r2
 80048b6:	f203 232a 	addw	r3, r3, #554	; 0x22a
 80048ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fb ffc0 	bl	800086a <HAL_PCD_SetAddress>
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f881 	bl	80049f8 <USBD_Get_USB_Status>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	460b      	mov	r3, r1
 8004912:	72fb      	strb	r3, [r7, #11]
 8004914:	4613      	mov	r3, r2
 8004916:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	7af9      	ldrb	r1, [r7, #11]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	f7fc f8ae 	bl	8000a8c <HAL_PCD_EP_Transmit>
 8004930:	4603      	mov	r3, r0
 8004932:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f85e 	bl	80049f8 <USBD_Get_USB_Status>
 800493c:	4603      	mov	r3, r0
 800493e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8004940:	7dbb      	ldrb	r3, [r7, #22]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	461a      	mov	r2, r3
 8004956:	460b      	mov	r3, r1
 8004958:	72fb      	strb	r3, [r7, #11]
 800495a:	4613      	mov	r3, r2
 800495c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800496c:	893b      	ldrh	r3, [r7, #8]
 800496e:	7af9      	ldrb	r1, [r7, #11]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	f7fc f83a 	bl	80009ea <HAL_PCD_EP_Receive>
 8004976:	4603      	mov	r3, r0
 8004978:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f83b 	bl	80049f8 <USBD_Get_USB_Status>
 8004982:	4603      	mov	r3, r0
 8004984:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8004986:	7dbb      	ldrb	r3, [r7, #22]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc f85b 	bl	8000a62 <HAL_PCD_EP_GetRxCount>
 80049ac:	4603      	mov	r3, r0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <USBD_static_malloc+0x14>)
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	2000019c 	.word	0x2000019c

080049d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d817      	bhi.n	8004a3c <USBD_Get_USB_Status+0x44>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <USBD_Get_USB_Status+0x1c>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a2b 	.word	0x08004a2b
 8004a1c:	08004a31 	.word	0x08004a31
 8004a20:	08004a37 	.word	0x08004a37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
    break;
 8004a28:	e00b      	b.n	8004a42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8004a2e:	e008      	b.n	8004a42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
    break;
 8004a34:	e005      	b.n	8004a42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004a36:	2302      	movs	r3, #2
 8004a38:	73fb      	strb	r3, [r7, #15]
    break;
 8004a3a:	e002      	b.n	8004a42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a40:	bf00      	nop
  }
  return usb_status;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop

08004a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2212      	movs	r2, #18
 8004a60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004a62:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000148 	.word	0x20000148

08004a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	6039      	str	r1, [r7, #0]
 8004a7e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2204      	movs	r2, #4
 8004a84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004a86:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	2000015c 	.word	0x2000015c

08004a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <USBD_FS_ProductStrDescriptor+0x34>)
 8004aae:	4808      	ldr	r0, [pc, #32]	; (8004ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8004ab0:	f7ff fa32 	bl	8003f18 <USBD_GetString>
 8004ab4:	e004      	b.n	8004ac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <USBD_FS_ProductStrDescriptor+0x34>)
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8004abc:	f7ff fa2c 	bl	8003f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20001214 	.word	0x20001214
 8004ad0:	08004d44 	.word	0x08004d44

08004ad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4904      	ldr	r1, [pc, #16]	; (8004af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004ae4:	4804      	ldr	r0, [pc, #16]	; (8004af8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004ae6:	f7ff fa17 	bl	8003f18 <USBD_GetString>
  return USBD_StrDesc;
 8004aea:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20001214 	.word	0x20001214
 8004af8:	08004d5c 	.word	0x08004d5c

08004afc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	6039      	str	r1, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	221a      	movs	r2, #26
 8004b0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004b0e:	f000 f843 	bl	8004b98 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8004b12:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000160 	.word	0x20000160

08004b20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4907      	ldr	r1, [pc, #28]	; (8004b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004b36:	4808      	ldr	r0, [pc, #32]	; (8004b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004b38:	f7ff f9ee 	bl	8003f18 <USBD_GetString>
 8004b3c:	e004      	b.n	8004b48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	4904      	ldr	r1, [pc, #16]	; (8004b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004b42:	4805      	ldr	r0, [pc, #20]	; (8004b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004b44:	f7ff f9e8 	bl	8003f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20001214 	.word	0x20001214
 8004b58:	08004d70 	.word	0x08004d70

08004b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4907      	ldr	r1, [pc, #28]	; (8004b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b72:	4808      	ldr	r0, [pc, #32]	; (8004b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b74:	f7ff f9d0 	bl	8003f18 <USBD_GetString>
 8004b78:	e004      	b.n	8004b84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	4904      	ldr	r1, [pc, #16]	; (8004b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b7e:	4805      	ldr	r0, [pc, #20]	; (8004b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b80:	f7ff f9ca 	bl	8003f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20001214 	.word	0x20001214
 8004b94:	08004d7c 	.word	0x08004d7c

08004b98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <Get_SerialNum+0x44>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <Get_SerialNum+0x48>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <Get_SerialNum+0x4c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	4909      	ldr	r1, [pc, #36]	; (8004be8 <Get_SerialNum+0x50>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f814 	bl	8004bf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004bc8:	2204      	movs	r2, #4
 8004bca:	4908      	ldr	r1, [pc, #32]	; (8004bec <Get_SerialNum+0x54>)
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f000 f80f 	bl	8004bf0 <IntToUnicode>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	1ffff7e8 	.word	0x1ffff7e8
 8004be0:	1ffff7ec 	.word	0x1ffff7ec
 8004be4:	1ffff7f0 	.word	0x1ffff7f0
 8004be8:	20000162 	.word	0x20000162
 8004bec:	20000172 	.word	0x20000172

08004bf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
 8004c06:	e027      	b.n	8004c58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0f1b      	lsrs	r3, r3, #28
 8004c0c:	2b09      	cmp	r3, #9
 8004c0e:	d80b      	bhi.n	8004c28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	440b      	add	r3, r1
 8004c20:	3230      	adds	r2, #48	; 0x30
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e00a      	b.n	8004c3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0f1b      	lsrs	r3, r3, #28
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4619      	mov	r1, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	440b      	add	r3, r1
 8004c38:	3237      	adds	r2, #55	; 0x37
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	3301      	adds	r3, #1
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	3301      	adds	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
 8004c58:	7dfa      	ldrb	r2, [r7, #23]
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3d3      	bcc.n	8004c08 <IntToUnicode+0x18>
  }
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
	...

08004c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004c6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c6e:	e003      	b.n	8004c78 <LoopCopyDataInit>

08004c70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c76:	3104      	adds	r1, #4

08004c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004c78:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004c7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004c7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004c80:	d3f6      	bcc.n	8004c70 <CopyDataInit>
  ldr r2, =_sbss
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004c84:	e002      	b.n	8004c8c <LoopFillZerobss>

08004c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004c86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004c88:	f842 3b04 	str.w	r3, [r2], #4

08004c8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004c8c:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004c8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c90:	d3f9      	bcc.n	8004c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c92:	f7ff fb27 	bl	80042e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c96:	f000 f80f 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c9a:	f7ff fa1b 	bl	80040d4 <main>
  bx lr
 8004c9e:	4770      	bx	lr
  ldr r3, =_sidata
 8004ca0:	08004da4 	.word	0x08004da4
  ldr r0, =_sdata
 8004ca4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ca8:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8004cac:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8004cb0:	20001414 	.word	0x20001414

08004cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cb4:	e7fe      	b.n	8004cb4 <ADC1_2_IRQHandler>
	...

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	2500      	movs	r5, #0
 8004cbc:	4e0c      	ldr	r6, [pc, #48]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbe:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cc0:	1ba4      	subs	r4, r4, r6
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	42a5      	cmp	r5, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	f000 f822 	bl	8004d10 <_init>
 8004ccc:	2500      	movs	r5, #0
 8004cce:	4e0a      	ldr	r6, [pc, #40]	; (8004cf8 <__libc_init_array+0x40>)
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <__libc_init_array+0x44>)
 8004cd2:	1ba4      	subs	r4, r4, r6
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	42a5      	cmp	r5, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ce0:	4798      	blx	r3
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cea:	4798      	blx	r3
 8004cec:	3501      	adds	r5, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08004d9c 	.word	0x08004d9c
 8004cf4:	08004d9c 	.word	0x08004d9c
 8004cf8:	08004d9c 	.word	0x08004d9c
 8004cfc:	08004da0 	.word	0x08004da0

08004d00 <memset>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	4402      	add	r2, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
