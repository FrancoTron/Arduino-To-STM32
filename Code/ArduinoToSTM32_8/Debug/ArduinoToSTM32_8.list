
ArduinoToSTM32_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08003c50  08003c50  00013c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001dc  08004094  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004094  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aed  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017a7  00000000  00000000  00029cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005c8  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014654  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c93  00000000  00000000  000405dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b1e6  00000000  00000000  0004626f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000b14d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c38 	.word	0x08003c38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08003c38 	.word	0x08003c38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f907 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f001 fa50 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f911 	bl	8000cfa <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 f8e7 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000204 	.word	0x20000204

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000204 	.word	0x20000204

08000b4c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da0b      	bge.n	8000bdc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <NVIC_SetPriority+0x4c>)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	3b04      	subs	r3, #4
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bda:	e009      	b.n	8000bf0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <NVIC_SetPriority+0x50>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f7ff ff90 	bl	8000bb0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff49 	bl	8000b4c <NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5e 	bl	8000b94 <NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff90 	bl	8000c04 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5f 	bl	8000bb0 <NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb0 	bl	8000c68 <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
 8000d36:	e127      	b.n	8000f88 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8116 	bne.w	8000f82 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d034      	beq.n	8000dc8 <HAL_GPIO_Init+0xb4>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d80d      	bhi.n	8000d7e <HAL_GPIO_Init+0x6a>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d02b      	beq.n	8000dbe <HAL_GPIO_Init+0xaa>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d804      	bhi.n	8000d74 <HAL_GPIO_Init+0x60>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d01c      	beq.n	8000dac <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d72:	e048      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d043      	beq.n	8000e00 <HAL_GPIO_Init+0xec>
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d01b      	beq.n	8000db4 <HAL_GPIO_Init+0xa0>
          break;
 8000d7c:	e043      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d7e:	4a87      	ldr	r2, [pc, #540]	; (8000f9c <HAL_GPIO_Init+0x288>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d026      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
 8000d84:	4a85      	ldr	r2, [pc, #532]	; (8000f9c <HAL_GPIO_Init+0x288>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d806      	bhi.n	8000d98 <HAL_GPIO_Init+0x84>
 8000d8a:	4a85      	ldr	r2, [pc, #532]	; (8000fa0 <HAL_GPIO_Init+0x28c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d020      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
 8000d90:	4a84      	ldr	r2, [pc, #528]	; (8000fa4 <HAL_GPIO_Init+0x290>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01d      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
          break;
 8000d96:	e036      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d98:	4a83      	ldr	r2, [pc, #524]	; (8000fa8 <HAL_GPIO_Init+0x294>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
 8000d9e:	4a83      	ldr	r2, [pc, #524]	; (8000fac <HAL_GPIO_Init+0x298>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d016      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
 8000da4:	4a82      	ldr	r2, [pc, #520]	; (8000fb0 <HAL_GPIO_Init+0x29c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0xbe>
          break;
 8000daa:	e02c      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e028      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	3304      	adds	r3, #4
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e023      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e01e      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e019      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e012      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	611a      	str	r2, [r3, #16]
          break;
 8000df2:	e008      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	615a      	str	r2, [r3, #20]
          break;
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d801      	bhi.n	8000e10 <HAL_GPIO_Init+0xfc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	e001      	b.n	8000e14 <HAL_GPIO_Init+0x100>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d802      	bhi.n	8000e22 <HAL_GPIO_Init+0x10e>
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x114>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3b08      	subs	r3, #8
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	210f      	movs	r1, #15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	6a39      	ldr	r1, [r7, #32]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	431a      	orrs	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 8096 	beq.w	8000f82 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000e6e:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x1ae>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x1aa>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x1a6>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_GPIO_Init+0x2b4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x1a2>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x1b0>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x1b0>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x1b0>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x1b0>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000ed4:	4938      	ldr	r1, [pc, #224]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4936      	ldr	r1, [pc, #216]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4931      	ldr	r1, [pc, #196]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	492c      	ldr	r1, [pc, #176]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4927      	ldr	r1, [pc, #156]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4922      	ldr	r1, [pc, #136]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	491d      	ldr	r1, [pc, #116]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	4918      	ldr	r1, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4913      	ldr	r1, [pc, #76]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f aed4 	bls.w	8000d38 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	372c      	adds	r7, #44	; 0x2c
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	10210000 	.word	0x10210000
 8000fa0:	10110000 	.word	0x10110000
 8000fa4:	10120000 	.word	0x10120000
 8000fa8:	10310000 	.word	0x10310000
 8000fac:	10320000 	.word	0x10320000
 8000fb0:	10220000 	.word	0x10220000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40011400 	.word	0x40011400
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 8087 	beq.w	80010f8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fea:	4b92      	ldr	r3, [pc, #584]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d00c      	beq.n	8001010 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff6:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d112      	bne.n	8001028 <HAL_RCC_OscConfig+0x58>
 8001002:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d10b      	bne.n	8001028 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	4b88      	ldr	r3, [pc, #544]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d06c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x126>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d168      	bne.n	80010f6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e22d      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001030:	d106      	bne.n	8001040 <HAL_RCC_OscConfig+0x70>
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7f      	ldr	r2, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e02e      	b.n	800109e <HAL_RCC_OscConfig+0xce>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10c      	bne.n	8001062 <HAL_RCC_OscConfig+0x92>
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a79      	ldr	r2, [pc, #484]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b77      	ldr	r3, [pc, #476]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a76      	ldr	r2, [pc, #472]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e01d      	b.n	800109e <HAL_RCC_OscConfig+0xce>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0xb6>
 800106c:	4b71      	ldr	r3, [pc, #452]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a70      	ldr	r2, [pc, #448]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a6d      	ldr	r2, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e00b      	b.n	800109e <HAL_RCC_OscConfig+0xce>
 8001086:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a67      	ldr	r2, [pc, #412]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d013      	beq.n	80010ce <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fd47 	bl	8000b38 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ae:	f7ff fd43 	bl	8000b38 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b64      	cmp	r3, #100	; 0x64
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1e1      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0xde>
 80010cc:	e014      	b.n	80010f8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fd33 	bl	8000b38 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fd2f 	bl	8000b38 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1cd      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e8:	4b52      	ldr	r3, [pc, #328]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x106>
 80010f4:	e000      	b.n	80010f8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d063      	beq.n	80011cc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001104:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d11c      	bne.n	8001156 <HAL_RCC_OscConfig+0x186>
 800111c:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d116      	bne.n	8001156 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x170>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d001      	beq.n	8001140 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e1a1      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4939      	ldr	r1, [pc, #228]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001154:	e03a      	b.n	80011cc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d020      	beq.n	80011a0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fce8 	bl	8000b38 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fce4 	bl	8000b38 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e182      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4926      	ldr	r1, [pc, #152]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
 800119e:	e015      	b.n	80011cc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fcc7 	bl	8000b38 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fcc3 	bl	8000b38 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e161      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d039      	beq.n	800124c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d019      	beq.n	8001214 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_RCC_OscConfig+0x26c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fca7 	bl	8000b38 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ee:	f7ff fca3 	bl	8000b38 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e141      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fae3 	bl	80017d8 <RCC_Delay>
 8001212:	e01b      	b.n	800124c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_RCC_OscConfig+0x26c>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fc8d 	bl	8000b38 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	e00e      	b.n	8001240 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fc89 	bl	8000b38 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d907      	bls.n	8001240 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e127      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
 8001234:	40021000 	.word	0x40021000
 8001238:	42420000 	.word	0x42420000
 800123c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b92      	ldr	r3, [pc, #584]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ea      	bne.n	8001222 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a6 	beq.w	80013a6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b8b      	ldr	r3, [pc, #556]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a87      	ldr	r2, [pc, #540]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x4c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b7f      	ldr	r3, [pc, #508]	; (8001490 <HAL_RCC_OscConfig+0x4c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7e      	ldr	r2, [pc, #504]	; (8001490 <HAL_RCC_OscConfig+0x4c0>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc4b 	bl	8000b38 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fc47 	bl	8000b38 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0e5      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b75      	ldr	r3, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x4c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x30a>
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6e      	ldr	r2, [pc, #440]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_OscConfig+0x366>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x32c>
 80012e2:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a66      	ldr	r2, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x366>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x34e>
 8001304:	4b61      	ldr	r3, [pc, #388]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a60      	ldr	r2, [pc, #384]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	4b5e      	ldr	r3, [pc, #376]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a5d      	ldr	r2, [pc, #372]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x366>
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a5a      	ldr	r2, [pc, #360]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b58      	ldr	r3, [pc, #352]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a57      	ldr	r2, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fbfb 	bl	8000b38 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fbf7 	bl	8000b38 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e093      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	4b4b      	ldr	r3, [pc, #300]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ee      	beq.n	8001346 <HAL_RCC_OscConfig+0x376>
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fbe5 	bl	8000b38 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fbe1 	bl	8000b38 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e07d      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	4b40      	ldr	r3, [pc, #256]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a3b      	ldr	r2, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80013a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d069      	beq.n	8001482 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d061      	beq.n	800147e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d146      	bne.n	8001450 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fbb6 	bl	8000b38 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff fbb2 	bl	8000b38 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e050      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d108      	bne.n	800140a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4921      	ldr	r1, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a19      	ldr	r1, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	430b      	orrs	r3, r1
 800141c:	491b      	ldr	r1, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb86 	bl	8000b38 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb82 	bl	8000b38 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e020      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x460>
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb6f 	bl	8000b38 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fb6b 	bl	8000b38 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e009      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_RCC_OscConfig+0x4bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x48e>
 800147c:	e001      	b.n	8001482 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	42420060 	.word	0x42420060

08001498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a6:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d910      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b4:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 0207 	bic.w	r2, r3, #7
 80014bc:	4978      	ldr	r1, [pc, #480]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0e0      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d020      	beq.n	8001524 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ee:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 80014f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a66      	ldr	r2, [pc, #408]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 800150c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001510:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001512:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4961      	ldr	r1, [pc, #388]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d06a      	beq.n	8001606 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d115      	bne.n	8001570 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0a7      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d107      	bne.n	8001560 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e09b      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e093      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 0203 	bic.w	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4949      	ldr	r1, [pc, #292]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001582:	f7ff fad9 	bl	8000b38 <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001592:	f7ff fad1 	bl	8000b38 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e077      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_ClockConfig+0xfa>
 80015b4:	e027      	b.n	8001606 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d11d      	bne.n	80015fa <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff faba 	bl	8000b38 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e060      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x128>
 80015e2:	e010      	b.n	8001606 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7ff faa8 	bl	8000b38 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e04e      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ee      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d210      	bcs.n	8001636 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 0207 	bic.w	r2, r3, #7
 800161c:	4920      	ldr	r1, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_RCC_ClockConfig+0x208>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e030      	b.n	8001698 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4915      	ldr	r1, [pc, #84]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001674:	f000 f81c 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8001678:	4601      	mov	r1, r0
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x20c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_RCC_ClockConfig+0x210>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	fa21 f303 	lsr.w	r3, r1, r3
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_RCC_ClockConfig+0x214>)
 800168e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fa0f 	bl	8000ab4 <HAL_InitTick>
  
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08003c6c 	.word	0x08003c6c
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b490      	push	{r4, r7}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016b8:	1d3c      	adds	r4, r7, #4
 80016ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x40>
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0x46>
 80016ee:	e02d      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f2:	623b      	str	r3, [r7, #32]
      break;
 80016f4:	e02d      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001702:	4413      	add	r3, r2
 8001704:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001708:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0c5b      	lsrs	r3, r3, #17
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001722:	4413      	add	r3, r2
 8001724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001728:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <HAL_RCC_GetSysClockFreq+0xbc>)
 800172e:	fb02 f203 	mul.w	r2, r2, r3
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e004      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	623b      	str	r3, [r7, #32]
      break;
 800174a:	e002      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_RCC_GetSysClockFreq+0xbc>)
 800174e:	623b      	str	r3, [r7, #32]
      break;
 8001750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001752:	6a3b      	ldr	r3, [r7, #32]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bc90      	pop	{r4, r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	08003c50 	.word	0x08003c50
 8001764:	08003c60 	.word	0x08003c60
 8001768:	40021000 	.word	0x40021000
 800176c:	007a1200 	.word	0x007a1200
 8001770:	003d0900 	.word	0x003d0900

08001774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_RCC_GetHCLKFreq+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800178c:	f7ff fff2 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 8001790:	4601      	mov	r1, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08003c7c 	.word	0x08003c7c

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017b4:	f7ff ffde 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	0adb      	lsrs	r3, r3, #11
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08003c7c 	.word	0x08003c7c

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017f4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e03f      	b.n	80018a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fbb6 	bl	8001fac <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001856:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f9b1 	bl	8001bc0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800186c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800187c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b088      	sub	sp, #32
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	f040 8083 	bne.w	80019d6 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_UART_Transmit+0x2e>
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e07b      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Transmit+0x40>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e074      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2221      	movs	r2, #33	; 0x21
 8001900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001904:	f7ff f918 	bl	8000b38 <HAL_GetTick>
 8001908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001916:	e042      	b.n	800199e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192e:	d122      	bne.n	8001976 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2200      	movs	r2, #0
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 f8f6 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e046      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800195c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3302      	adds	r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	e017      	b.n	800199e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	e013      	b.n	800199e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f8d3 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e023      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1b7      	bne.n	8001918 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8ba 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e00a      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4613      	mov	r3, r2
 80019ee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	f040 8090 	bne.w	8001b22 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_UART_Receive+0x2e>
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e088      	b.n	8001b24 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_UART_Receive+0x40>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e081      	b.n	8001b24 <HAL_UART_Receive+0x144>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2222      	movs	r2, #34	; 0x22
 8001a32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a36:	f7ff f87f 	bl	8000b38 <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8001a48:	e05c      	b.n	8001b04 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a60:	d12b      	bne.n	8001aba <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f85d 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e053      	b.n	8001b24 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10c      	bne.n	8001aa2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	e030      	b.n	8001b04 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	e024      	b.n	8001b04 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f831 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e027      	b.n	8001b24 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	60ba      	str	r2, [r7, #8]
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e00a      	b.n	8001b04 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c59      	adds	r1, r3, #1
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d19d      	bne.n	8001a4a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001b3c:	e02c      	b.n	8001b98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b44:	d028      	beq.n	8001b98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b4c:	f7fe fff4 	bl	8000b38 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d21d      	bcs.n	8001b98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e00f      	b.n	8001bb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d0c3      	beq.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c02:	f023 030c 	bic.w	r3, r3, #12
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6f      	ldr	r2, [pc, #444]	; (8001de8 <UART_SetConfig+0x228>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d16b      	bne.n	8001d08 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c30:	f7ff fdbe 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4a68      	ldr	r2, [pc, #416]	; (8001dec <UART_SetConfig+0x22c>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	011c      	lsls	r4, r3, #4
 8001c54:	f7ff fdac 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	009a      	lsls	r2, r3, #2
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c6e:	f7ff fd9f 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009a      	lsls	r2, r3, #2
 8001c7c:	441a      	add	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <UART_SetConfig+0x22c>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2264      	movs	r2, #100	; 0x64
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	1aeb      	subs	r3, r5, r3
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	3332      	adds	r3, #50	; 0x32
 8001c9c:	4a53      	ldr	r2, [pc, #332]	; (8001dec <UART_SetConfig+0x22c>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca8:	441c      	add	r4, r3
 8001caa:	f7ff fd81 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cc4:	f7ff fd74 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009a      	lsls	r2, r3, #2
 8001cd2:	441a      	add	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4a43      	ldr	r2, [pc, #268]	; (8001dec <UART_SetConfig+0x22c>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	1aeb      	subs	r3, r5, r3
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	3332      	adds	r3, #50	; 0x32
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <UART_SetConfig+0x22c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4422      	add	r2, r4
 8001d04:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d06:	e06a      	b.n	8001dde <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d08:	f7ff fd3e 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	441a      	add	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <UART_SetConfig+0x22c>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	011c      	lsls	r4, r3, #4
 8001d2c:	f7ff fd2c 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	441a      	add	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d46:	f7ff fd1f 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <UART_SetConfig+0x22c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	1aeb      	subs	r3, r5, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <UART_SetConfig+0x22c>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	441c      	add	r4, r3
 8001d82:	f7ff fd01 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009a      	lsls	r2, r3, #2
 8001d90:	441a      	add	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d9c:	f7ff fcf4 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	009a      	lsls	r2, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <UART_SetConfig+0x22c>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	2264      	movs	r2, #100	; 0x64
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	1aeb      	subs	r3, r5, r3
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	3332      	adds	r3, #50	; 0x32
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <UART_SetConfig+0x22c>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4422      	add	r2, r4
 8001ddc:	609a      	str	r2, [r3, #8]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40013800 	.word	0x40013800
 8001dec:	51eb851f 	.word	0x51eb851f

08001df0 <main>:
  * @retval int
  */


int main(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df6:	f7fe fe47 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfa:	f000 f823 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfe:	f000 f887 	bl	8001f10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e02:	f000 f85b 	bl	8001ebc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t txBuffer[] = { 'T', 'x', ' ', ' ', '\r', '\n' };
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <main+0x4c>)
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	6018      	str	r0, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	8019      	strh	r1, [r3, #0]
	uint8_t rxBuffer[4];

  while (1)
  {

		if (HAL_UART_Receive(&huart1, rxBuffer, 1, 10000) == HAL_OK) {
 8001e16:	1d39      	adds	r1, r7, #4
 8001e18:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <main+0x50>)
 8001e20:	f7ff fdde 	bl	80019e0 <HAL_UART_Receive>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f5      	bne.n	8001e16 <main+0x26>
			HAL_UART_Transmit(&huart1, txBuffer, 6, 100);
 8001e2a:	f107 0108 	add.w	r1, r7, #8
 8001e2e:	2364      	movs	r3, #100	; 0x64
 8001e30:	2206      	movs	r2, #6
 8001e32:	4803      	ldr	r0, [pc, #12]	; (8001e40 <main+0x50>)
 8001e34:	f7ff fd3b 	bl	80018ae <HAL_UART_Transmit>
		if (HAL_UART_Receive(&huart1, rxBuffer, 1, 10000) == HAL_OK) {
 8001e38:	e7ed      	b.n	8001e16 <main+0x26>
 8001e3a:	bf00      	nop
 8001e3c:	08003c64 	.word	0x08003c64
 8001e40:	20000208 	.word	0x20000208

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b090      	sub	sp, #64	; 0x40
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 0318 	add.w	r3, r7, #24
 8001e4e:	2228      	movs	r2, #40	; 0x28
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f9d0 	bl	80021f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e76:	f107 0318 	add.w	r3, r7, #24
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f8a8 	bl	8000fd0 <HAL_RCC_OscConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001e86:	f000 f859 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff faf8 	bl	8001498 <HAL_RCC_ClockConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001eae:	f000 f845 	bl	8001f3c <Error_Handler>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3740      	adds	r7, #64	; 0x40
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_USART1_UART_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	f7ff fc8e 	bl	8001814 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001efe:	f000 f81d 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000208 	.word	0x20000208
 8001f0c:	40013800 	.word	0x40013800

08001f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_GPIO_Init+0x28>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <MX_GPIO_Init+0x28>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <MX_GPIO_Init+0x28>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6193      	str	r3, [r2, #24]
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_MspInit+0x60>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_MspInit+0x60>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000

08001fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_UART_MspInit+0x8c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d131      	bne.n	8002030 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_UART_MspInit+0x90>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_UART_MspInit+0x90>)
 8001fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x90>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x90>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_UART_MspInit+0x90>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_UART_MspInit+0x90>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_UART_MspInit+0x94>)
 8002012:	f7fe fe7f 	bl	8000d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x94>)
 800202c:	f7fe fe72 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <HardFault_Handler+0x4>

08002056 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <BusFault_Handler+0x4>

08002062 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <UsageFault_Handler+0x4>

08002068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f7fe fd40 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <_sbrk+0x50>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x16>
		heap_end = &end;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <_sbrk+0x50>)
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <_sbrk+0x54>)
 80020ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <_sbrk+0x50>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <_sbrk+0x50>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	466a      	mov	r2, sp
 80020be:	4293      	cmp	r3, r2
 80020c0:	d907      	bls.n	80020d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020c2:	f000 f86f 	bl	80021a4 <__errno>
 80020c6:	4602      	mov	r2, r0
 80020c8:	230c      	movs	r3, #12
 80020ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d0:	e006      	b.n	80020e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <_sbrk+0x50>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <_sbrk+0x50>)
 80020dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200001f8 	.word	0x200001f8
 80020ec:	20000250 	.word	0x20000250

080020f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <SystemInit+0x5c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <SystemInit+0x5c>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <SystemInit+0x5c>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4911      	ldr	r1, [pc, #68]	; (800214c <SystemInit+0x5c>)
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <SystemInit+0x60>)
 8002108:	4013      	ands	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <SystemInit+0x5c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <SystemInit+0x5c>)
 8002112:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <SystemInit+0x5c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <SystemInit+0x5c>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <SystemInit+0x5c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <SystemInit+0x5c>)
 800212e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002132:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <SystemInit+0x5c>)
 8002136:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800213a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SystemInit+0x64>)
 800213e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002142:	609a      	str	r2, [r3, #8]
#endif 
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000
 8002150:	f8ff0000 	.word	0xf8ff0000
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800215a:	e003      	b.n	8002164 <LoopCopyDataInit>

0800215c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800215e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002162:	3104      	adds	r1, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002164:	480a      	ldr	r0, [pc, #40]	; (8002190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800216a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800216c:	d3f6      	bcc.n	800215c <CopyDataInit>
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002170:	e002      	b.n	8002178 <LoopFillZerobss>

08002172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002174:	f842 3b04 	str.w	r3, [r2], #4

08002178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800217c:	d3f9      	bcc.n	8002172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800217e:	f7ff ffb7 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f000 f815 	bl	80021b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002186:	f7ff fe33 	bl	8001df0 <main>
  bx lr
 800218a:	4770      	bx	lr
  ldr r3, =_sidata
 800218c:	08003eb8 	.word	0x08003eb8
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002194:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002198:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800219c:	2000024c 	.word	0x2000024c

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>
	...

080021a4 <__errno>:
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <__errno+0x8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000000c 	.word	0x2000000c

080021b0 <__libc_init_array>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	2500      	movs	r5, #0
 80021b4:	4e0c      	ldr	r6, [pc, #48]	; (80021e8 <__libc_init_array+0x38>)
 80021b6:	4c0d      	ldr	r4, [pc, #52]	; (80021ec <__libc_init_array+0x3c>)
 80021b8:	1ba4      	subs	r4, r4, r6
 80021ba:	10a4      	asrs	r4, r4, #2
 80021bc:	42a5      	cmp	r5, r4
 80021be:	d109      	bne.n	80021d4 <__libc_init_array+0x24>
 80021c0:	f001 fd3a 	bl	8003c38 <_init>
 80021c4:	2500      	movs	r5, #0
 80021c6:	4e0a      	ldr	r6, [pc, #40]	; (80021f0 <__libc_init_array+0x40>)
 80021c8:	4c0a      	ldr	r4, [pc, #40]	; (80021f4 <__libc_init_array+0x44>)
 80021ca:	1ba4      	subs	r4, r4, r6
 80021cc:	10a4      	asrs	r4, r4, #2
 80021ce:	42a5      	cmp	r5, r4
 80021d0:	d105      	bne.n	80021de <__libc_init_array+0x2e>
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021d8:	4798      	blx	r3
 80021da:	3501      	adds	r5, #1
 80021dc:	e7ee      	b.n	80021bc <__libc_init_array+0xc>
 80021de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021e2:	4798      	blx	r3
 80021e4:	3501      	adds	r5, #1
 80021e6:	e7f2      	b.n	80021ce <__libc_init_array+0x1e>
 80021e8:	08003eb0 	.word	0x08003eb0
 80021ec:	08003eb0 	.word	0x08003eb0
 80021f0:	08003eb0 	.word	0x08003eb0
 80021f4:	08003eb4 	.word	0x08003eb4

080021f8 <memset>:
 80021f8:	4603      	mov	r3, r0
 80021fa:	4402      	add	r2, r0
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d100      	bne.n	8002202 <memset+0xa>
 8002200:	4770      	bx	lr
 8002202:	f803 1b01 	strb.w	r1, [r3], #1
 8002206:	e7f9      	b.n	80021fc <memset+0x4>

08002208 <__cvt>:
 8002208:	2b00      	cmp	r3, #0
 800220a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800220e:	461e      	mov	r6, r3
 8002210:	bfbb      	ittet	lt
 8002212:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002216:	461e      	movlt	r6, r3
 8002218:	2300      	movge	r3, #0
 800221a:	232d      	movlt	r3, #45	; 0x2d
 800221c:	b088      	sub	sp, #32
 800221e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002220:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002224:	f027 0720 	bic.w	r7, r7, #32
 8002228:	2f46      	cmp	r7, #70	; 0x46
 800222a:	4614      	mov	r4, r2
 800222c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800222e:	700b      	strb	r3, [r1, #0]
 8002230:	d004      	beq.n	800223c <__cvt+0x34>
 8002232:	2f45      	cmp	r7, #69	; 0x45
 8002234:	d100      	bne.n	8002238 <__cvt+0x30>
 8002236:	3501      	adds	r5, #1
 8002238:	2302      	movs	r3, #2
 800223a:	e000      	b.n	800223e <__cvt+0x36>
 800223c:	2303      	movs	r3, #3
 800223e:	aa07      	add	r2, sp, #28
 8002240:	9204      	str	r2, [sp, #16]
 8002242:	aa06      	add	r2, sp, #24
 8002244:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002248:	e9cd 3500 	strd	r3, r5, [sp]
 800224c:	4622      	mov	r2, r4
 800224e:	4633      	mov	r3, r6
 8002250:	f000 fba6 	bl	80029a0 <_dtoa_r>
 8002254:	2f47      	cmp	r7, #71	; 0x47
 8002256:	4680      	mov	r8, r0
 8002258:	d102      	bne.n	8002260 <__cvt+0x58>
 800225a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800225c:	07db      	lsls	r3, r3, #31
 800225e:	d526      	bpl.n	80022ae <__cvt+0xa6>
 8002260:	2f46      	cmp	r7, #70	; 0x46
 8002262:	eb08 0905 	add.w	r9, r8, r5
 8002266:	d111      	bne.n	800228c <__cvt+0x84>
 8002268:	f898 3000 	ldrb.w	r3, [r8]
 800226c:	2b30      	cmp	r3, #48	; 0x30
 800226e:	d10a      	bne.n	8002286 <__cvt+0x7e>
 8002270:	2200      	movs	r2, #0
 8002272:	2300      	movs	r3, #0
 8002274:	4620      	mov	r0, r4
 8002276:	4631      	mov	r1, r6
 8002278:	f7fe fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800227c:	b918      	cbnz	r0, 8002286 <__cvt+0x7e>
 800227e:	f1c5 0501 	rsb	r5, r5, #1
 8002282:	f8ca 5000 	str.w	r5, [sl]
 8002286:	f8da 3000 	ldr.w	r3, [sl]
 800228a:	4499      	add	r9, r3
 800228c:	2200      	movs	r2, #0
 800228e:	2300      	movs	r3, #0
 8002290:	4620      	mov	r0, r4
 8002292:	4631      	mov	r1, r6
 8002294:	f7fe fb88 	bl	80009a8 <__aeabi_dcmpeq>
 8002298:	b938      	cbnz	r0, 80022aa <__cvt+0xa2>
 800229a:	2230      	movs	r2, #48	; 0x30
 800229c:	9b07      	ldr	r3, [sp, #28]
 800229e:	454b      	cmp	r3, r9
 80022a0:	d205      	bcs.n	80022ae <__cvt+0xa6>
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	9107      	str	r1, [sp, #28]
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e7f8      	b.n	800229c <__cvt+0x94>
 80022aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80022ae:	4640      	mov	r0, r8
 80022b0:	9b07      	ldr	r3, [sp, #28]
 80022b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80022b4:	eba3 0308 	sub.w	r3, r3, r8
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	b008      	add	sp, #32
 80022bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080022c0 <__exponent>:
 80022c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022c2:	2900      	cmp	r1, #0
 80022c4:	bfb4      	ite	lt
 80022c6:	232d      	movlt	r3, #45	; 0x2d
 80022c8:	232b      	movge	r3, #43	; 0x2b
 80022ca:	4604      	mov	r4, r0
 80022cc:	bfb8      	it	lt
 80022ce:	4249      	neglt	r1, r1
 80022d0:	2909      	cmp	r1, #9
 80022d2:	f804 2b02 	strb.w	r2, [r4], #2
 80022d6:	7043      	strb	r3, [r0, #1]
 80022d8:	dd21      	ble.n	800231e <__exponent+0x5e>
 80022da:	f10d 0307 	add.w	r3, sp, #7
 80022de:	461f      	mov	r7, r3
 80022e0:	260a      	movs	r6, #10
 80022e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80022e6:	fb06 1115 	mls	r1, r6, r5, r1
 80022ea:	2d09      	cmp	r5, #9
 80022ec:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80022f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80022f4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80022f8:	4629      	mov	r1, r5
 80022fa:	dc09      	bgt.n	8002310 <__exponent+0x50>
 80022fc:	3130      	adds	r1, #48	; 0x30
 80022fe:	3b02      	subs	r3, #2
 8002300:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002304:	42bb      	cmp	r3, r7
 8002306:	4622      	mov	r2, r4
 8002308:	d304      	bcc.n	8002314 <__exponent+0x54>
 800230a:	1a10      	subs	r0, r2, r0
 800230c:	b003      	add	sp, #12
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002310:	4613      	mov	r3, r2
 8002312:	e7e6      	b.n	80022e2 <__exponent+0x22>
 8002314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002318:	f804 2b01 	strb.w	r2, [r4], #1
 800231c:	e7f2      	b.n	8002304 <__exponent+0x44>
 800231e:	2330      	movs	r3, #48	; 0x30
 8002320:	4419      	add	r1, r3
 8002322:	7083      	strb	r3, [r0, #2]
 8002324:	1d02      	adds	r2, r0, #4
 8002326:	70c1      	strb	r1, [r0, #3]
 8002328:	e7ef      	b.n	800230a <__exponent+0x4a>
	...

0800232c <_printf_float>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	b091      	sub	sp, #68	; 0x44
 8002332:	460c      	mov	r4, r1
 8002334:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002336:	4693      	mov	fp, r2
 8002338:	461e      	mov	r6, r3
 800233a:	4605      	mov	r5, r0
 800233c:	f001 f8e4 	bl	8003508 <_localeconv_r>
 8002340:	6803      	ldr	r3, [r0, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	9309      	str	r3, [sp, #36]	; 0x24
 8002346:	f7fd ff03 	bl	8000150 <strlen>
 800234a:	2300      	movs	r3, #0
 800234c:	930e      	str	r3, [sp, #56]	; 0x38
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	900a      	str	r0, [sp, #40]	; 0x28
 8002352:	3307      	adds	r3, #7
 8002354:	f023 0307 	bic.w	r3, r3, #7
 8002358:	f103 0208 	add.w	r2, r3, #8
 800235c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002360:	f8d4 a000 	ldr.w	sl, [r4]
 8002364:	603a      	str	r2, [r7, #0]
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800236e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002376:	930b      	str	r3, [sp, #44]	; 0x2c
 8002378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800237c:	4ba6      	ldr	r3, [pc, #664]	; (8002618 <_printf_float+0x2ec>)
 800237e:	4638      	mov	r0, r7
 8002380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002382:	f7fe fb43 	bl	8000a0c <__aeabi_dcmpun>
 8002386:	bb68      	cbnz	r0, 80023e4 <_printf_float+0xb8>
 8002388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800238c:	4ba2      	ldr	r3, [pc, #648]	; (8002618 <_printf_float+0x2ec>)
 800238e:	4638      	mov	r0, r7
 8002390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002392:	f7fe fb1d 	bl	80009d0 <__aeabi_dcmple>
 8002396:	bb28      	cbnz	r0, 80023e4 <_printf_float+0xb8>
 8002398:	2200      	movs	r2, #0
 800239a:	2300      	movs	r3, #0
 800239c:	4638      	mov	r0, r7
 800239e:	4649      	mov	r1, r9
 80023a0:	f7fe fb0c 	bl	80009bc <__aeabi_dcmplt>
 80023a4:	b110      	cbz	r0, 80023ac <_printf_float+0x80>
 80023a6:	232d      	movs	r3, #45	; 0x2d
 80023a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ac:	4f9b      	ldr	r7, [pc, #620]	; (800261c <_printf_float+0x2f0>)
 80023ae:	4b9c      	ldr	r3, [pc, #624]	; (8002620 <_printf_float+0x2f4>)
 80023b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023b4:	bf98      	it	ls
 80023b6:	461f      	movls	r7, r3
 80023b8:	2303      	movs	r3, #3
 80023ba:	f04f 0900 	mov.w	r9, #0
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	f02a 0304 	bic.w	r3, sl, #4
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	9600      	str	r6, [sp, #0]
 80023c8:	465b      	mov	r3, fp
 80023ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80023cc:	4621      	mov	r1, r4
 80023ce:	4628      	mov	r0, r5
 80023d0:	f000 f9e2 	bl	8002798 <_printf_common>
 80023d4:	3001      	adds	r0, #1
 80023d6:	f040 8090 	bne.w	80024fa <_printf_float+0x1ce>
 80023da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023de:	b011      	add	sp, #68	; 0x44
 80023e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e4:	463a      	mov	r2, r7
 80023e6:	464b      	mov	r3, r9
 80023e8:	4638      	mov	r0, r7
 80023ea:	4649      	mov	r1, r9
 80023ec:	f7fe fb0e 	bl	8000a0c <__aeabi_dcmpun>
 80023f0:	b110      	cbz	r0, 80023f8 <_printf_float+0xcc>
 80023f2:	4f8c      	ldr	r7, [pc, #560]	; (8002624 <_printf_float+0x2f8>)
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <_printf_float+0x2fc>)
 80023f6:	e7db      	b.n	80023b0 <_printf_float+0x84>
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	a80d      	add	r0, sp, #52	; 0x34
 8002402:	a90e      	add	r1, sp, #56	; 0x38
 8002404:	d140      	bne.n	8002488 <_printf_float+0x15c>
 8002406:	2306      	movs	r3, #6
 8002408:	6063      	str	r3, [r4, #4]
 800240a:	f04f 0c00 	mov.w	ip, #0
 800240e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002412:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002416:	6863      	ldr	r3, [r4, #4]
 8002418:	6022      	str	r2, [r4, #0]
 800241a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	463a      	mov	r2, r7
 8002422:	464b      	mov	r3, r9
 8002424:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002428:	4628      	mov	r0, r5
 800242a:	f7ff feed 	bl	8002208 <__cvt>
 800242e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002432:	2b47      	cmp	r3, #71	; 0x47
 8002434:	4607      	mov	r7, r0
 8002436:	d109      	bne.n	800244c <_printf_float+0x120>
 8002438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800243a:	1cd8      	adds	r0, r3, #3
 800243c:	db02      	blt.n	8002444 <_printf_float+0x118>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	4293      	cmp	r3, r2
 8002442:	dd47      	ble.n	80024d4 <_printf_float+0x1a8>
 8002444:	f1a8 0802 	sub.w	r8, r8, #2
 8002448:	fa5f f888 	uxtb.w	r8, r8
 800244c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002450:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002452:	d824      	bhi.n	800249e <_printf_float+0x172>
 8002454:	3901      	subs	r1, #1
 8002456:	4642      	mov	r2, r8
 8002458:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800245c:	910d      	str	r1, [sp, #52]	; 0x34
 800245e:	f7ff ff2f 	bl	80022c0 <__exponent>
 8002462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002464:	4681      	mov	r9, r0
 8002466:	1813      	adds	r3, r2, r0
 8002468:	2a01      	cmp	r2, #1
 800246a:	6123      	str	r3, [r4, #16]
 800246c:	dc02      	bgt.n	8002474 <_printf_float+0x148>
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	07d1      	lsls	r1, r2, #31
 8002472:	d501      	bpl.n	8002478 <_printf_float+0x14c>
 8002474:	3301      	adds	r3, #1
 8002476:	6123      	str	r3, [r4, #16]
 8002478:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0a2      	beq.n	80023c6 <_printf_float+0x9a>
 8002480:	232d      	movs	r3, #45	; 0x2d
 8002482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002486:	e79e      	b.n	80023c6 <_printf_float+0x9a>
 8002488:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800248c:	f000 816e 	beq.w	800276c <_printf_float+0x440>
 8002490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002494:	d1b9      	bne.n	800240a <_printf_float+0xde>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1b7      	bne.n	800240a <_printf_float+0xde>
 800249a:	2301      	movs	r3, #1
 800249c:	e7b4      	b.n	8002408 <_printf_float+0xdc>
 800249e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80024a2:	d119      	bne.n	80024d8 <_printf_float+0x1ac>
 80024a4:	2900      	cmp	r1, #0
 80024a6:	6863      	ldr	r3, [r4, #4]
 80024a8:	dd0c      	ble.n	80024c4 <_printf_float+0x198>
 80024aa:	6121      	str	r1, [r4, #16]
 80024ac:	b913      	cbnz	r3, 80024b4 <_printf_float+0x188>
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	07d2      	lsls	r2, r2, #31
 80024b2:	d502      	bpl.n	80024ba <_printf_float+0x18e>
 80024b4:	3301      	adds	r3, #1
 80024b6:	440b      	add	r3, r1
 80024b8:	6123      	str	r3, [r4, #16]
 80024ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024bc:	f04f 0900 	mov.w	r9, #0
 80024c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80024c2:	e7d9      	b.n	8002478 <_printf_float+0x14c>
 80024c4:	b913      	cbnz	r3, 80024cc <_printf_float+0x1a0>
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	07d0      	lsls	r0, r2, #31
 80024ca:	d501      	bpl.n	80024d0 <_printf_float+0x1a4>
 80024cc:	3302      	adds	r3, #2
 80024ce:	e7f3      	b.n	80024b8 <_printf_float+0x18c>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e7f1      	b.n	80024b8 <_printf_float+0x18c>
 80024d4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80024d8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80024dc:	4293      	cmp	r3, r2
 80024de:	db05      	blt.n	80024ec <_printf_float+0x1c0>
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	6123      	str	r3, [r4, #16]
 80024e4:	07d1      	lsls	r1, r2, #31
 80024e6:	d5e8      	bpl.n	80024ba <_printf_float+0x18e>
 80024e8:	3301      	adds	r3, #1
 80024ea:	e7e5      	b.n	80024b8 <_printf_float+0x18c>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bfcc      	ite	gt
 80024f0:	2301      	movgt	r3, #1
 80024f2:	f1c3 0302 	rsble	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	e7de      	b.n	80024b8 <_printf_float+0x18c>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	055a      	lsls	r2, r3, #21
 80024fe:	d407      	bmi.n	8002510 <_printf_float+0x1e4>
 8002500:	6923      	ldr	r3, [r4, #16]
 8002502:	463a      	mov	r2, r7
 8002504:	4659      	mov	r1, fp
 8002506:	4628      	mov	r0, r5
 8002508:	47b0      	blx	r6
 800250a:	3001      	adds	r0, #1
 800250c:	d129      	bne.n	8002562 <_printf_float+0x236>
 800250e:	e764      	b.n	80023da <_printf_float+0xae>
 8002510:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002514:	f240 80d7 	bls.w	80026c6 <_printf_float+0x39a>
 8002518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800251c:	2200      	movs	r2, #0
 800251e:	2300      	movs	r3, #0
 8002520:	f7fe fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8002524:	b388      	cbz	r0, 800258a <_printf_float+0x25e>
 8002526:	2301      	movs	r3, #1
 8002528:	4a40      	ldr	r2, [pc, #256]	; (800262c <_printf_float+0x300>)
 800252a:	4659      	mov	r1, fp
 800252c:	4628      	mov	r0, r5
 800252e:	47b0      	blx	r6
 8002530:	3001      	adds	r0, #1
 8002532:	f43f af52 	beq.w	80023da <_printf_float+0xae>
 8002536:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800253a:	429a      	cmp	r2, r3
 800253c:	db02      	blt.n	8002544 <_printf_float+0x218>
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	07d8      	lsls	r0, r3, #31
 8002542:	d50e      	bpl.n	8002562 <_printf_float+0x236>
 8002544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002548:	4659      	mov	r1, fp
 800254a:	4628      	mov	r0, r5
 800254c:	47b0      	blx	r6
 800254e:	3001      	adds	r0, #1
 8002550:	f43f af43 	beq.w	80023da <_printf_float+0xae>
 8002554:	2700      	movs	r7, #0
 8002556:	f104 081a 	add.w	r8, r4, #26
 800255a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800255c:	3b01      	subs	r3, #1
 800255e:	42bb      	cmp	r3, r7
 8002560:	dc09      	bgt.n	8002576 <_printf_float+0x24a>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	079f      	lsls	r7, r3, #30
 8002566:	f100 80fd 	bmi.w	8002764 <_printf_float+0x438>
 800256a:	68e0      	ldr	r0, [r4, #12]
 800256c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800256e:	4298      	cmp	r0, r3
 8002570:	bfb8      	it	lt
 8002572:	4618      	movlt	r0, r3
 8002574:	e733      	b.n	80023de <_printf_float+0xb2>
 8002576:	2301      	movs	r3, #1
 8002578:	4642      	mov	r2, r8
 800257a:	4659      	mov	r1, fp
 800257c:	4628      	mov	r0, r5
 800257e:	47b0      	blx	r6
 8002580:	3001      	adds	r0, #1
 8002582:	f43f af2a 	beq.w	80023da <_printf_float+0xae>
 8002586:	3701      	adds	r7, #1
 8002588:	e7e7      	b.n	800255a <_printf_float+0x22e>
 800258a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	dc2b      	bgt.n	80025e8 <_printf_float+0x2bc>
 8002590:	2301      	movs	r3, #1
 8002592:	4a26      	ldr	r2, [pc, #152]	; (800262c <_printf_float+0x300>)
 8002594:	4659      	mov	r1, fp
 8002596:	4628      	mov	r0, r5
 8002598:	47b0      	blx	r6
 800259a:	3001      	adds	r0, #1
 800259c:	f43f af1d 	beq.w	80023da <_printf_float+0xae>
 80025a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025a2:	b923      	cbnz	r3, 80025ae <_printf_float+0x282>
 80025a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025a6:	b913      	cbnz	r3, 80025ae <_printf_float+0x282>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	07d9      	lsls	r1, r3, #31
 80025ac:	d5d9      	bpl.n	8002562 <_printf_float+0x236>
 80025ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025b2:	4659      	mov	r1, fp
 80025b4:	4628      	mov	r0, r5
 80025b6:	47b0      	blx	r6
 80025b8:	3001      	adds	r0, #1
 80025ba:	f43f af0e 	beq.w	80023da <_printf_float+0xae>
 80025be:	f04f 0800 	mov.w	r8, #0
 80025c2:	f104 091a 	add.w	r9, r4, #26
 80025c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025c8:	425b      	negs	r3, r3
 80025ca:	4543      	cmp	r3, r8
 80025cc:	dc01      	bgt.n	80025d2 <_printf_float+0x2a6>
 80025ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025d0:	e797      	b.n	8002502 <_printf_float+0x1d6>
 80025d2:	2301      	movs	r3, #1
 80025d4:	464a      	mov	r2, r9
 80025d6:	4659      	mov	r1, fp
 80025d8:	4628      	mov	r0, r5
 80025da:	47b0      	blx	r6
 80025dc:	3001      	adds	r0, #1
 80025de:	f43f aefc 	beq.w	80023da <_printf_float+0xae>
 80025e2:	f108 0801 	add.w	r8, r8, #1
 80025e6:	e7ee      	b.n	80025c6 <_printf_float+0x29a>
 80025e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025ec:	429a      	cmp	r2, r3
 80025ee:	bfa8      	it	ge
 80025f0:	461a      	movge	r2, r3
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	4690      	mov	r8, r2
 80025f6:	dd07      	ble.n	8002608 <_printf_float+0x2dc>
 80025f8:	4613      	mov	r3, r2
 80025fa:	4659      	mov	r1, fp
 80025fc:	463a      	mov	r2, r7
 80025fe:	4628      	mov	r0, r5
 8002600:	47b0      	blx	r6
 8002602:	3001      	adds	r0, #1
 8002604:	f43f aee9 	beq.w	80023da <_printf_float+0xae>
 8002608:	f104 031a 	add.w	r3, r4, #26
 800260c:	f04f 0a00 	mov.w	sl, #0
 8002610:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002614:	930b      	str	r3, [sp, #44]	; 0x2c
 8002616:	e015      	b.n	8002644 <_printf_float+0x318>
 8002618:	7fefffff 	.word	0x7fefffff
 800261c:	08003c88 	.word	0x08003c88
 8002620:	08003c84 	.word	0x08003c84
 8002624:	08003c90 	.word	0x08003c90
 8002628:	08003c8c 	.word	0x08003c8c
 800262c:	08003c94 	.word	0x08003c94
 8002630:	2301      	movs	r3, #1
 8002632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002634:	4659      	mov	r1, fp
 8002636:	4628      	mov	r0, r5
 8002638:	47b0      	blx	r6
 800263a:	3001      	adds	r0, #1
 800263c:	f43f aecd 	beq.w	80023da <_printf_float+0xae>
 8002640:	f10a 0a01 	add.w	sl, sl, #1
 8002644:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002648:	eba9 0308 	sub.w	r3, r9, r8
 800264c:	4553      	cmp	r3, sl
 800264e:	dcef      	bgt.n	8002630 <_printf_float+0x304>
 8002650:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002654:	429a      	cmp	r2, r3
 8002656:	444f      	add	r7, r9
 8002658:	db14      	blt.n	8002684 <_printf_float+0x358>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	07da      	lsls	r2, r3, #31
 800265e:	d411      	bmi.n	8002684 <_printf_float+0x358>
 8002660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002662:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002664:	eba3 0209 	sub.w	r2, r3, r9
 8002668:	eba3 0901 	sub.w	r9, r3, r1
 800266c:	4591      	cmp	r9, r2
 800266e:	bfa8      	it	ge
 8002670:	4691      	movge	r9, r2
 8002672:	f1b9 0f00 	cmp.w	r9, #0
 8002676:	dc0d      	bgt.n	8002694 <_printf_float+0x368>
 8002678:	2700      	movs	r7, #0
 800267a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800267e:	f104 081a 	add.w	r8, r4, #26
 8002682:	e018      	b.n	80026b6 <_printf_float+0x38a>
 8002684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002688:	4659      	mov	r1, fp
 800268a:	4628      	mov	r0, r5
 800268c:	47b0      	blx	r6
 800268e:	3001      	adds	r0, #1
 8002690:	d1e6      	bne.n	8002660 <_printf_float+0x334>
 8002692:	e6a2      	b.n	80023da <_printf_float+0xae>
 8002694:	464b      	mov	r3, r9
 8002696:	463a      	mov	r2, r7
 8002698:	4659      	mov	r1, fp
 800269a:	4628      	mov	r0, r5
 800269c:	47b0      	blx	r6
 800269e:	3001      	adds	r0, #1
 80026a0:	d1ea      	bne.n	8002678 <_printf_float+0x34c>
 80026a2:	e69a      	b.n	80023da <_printf_float+0xae>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4642      	mov	r2, r8
 80026a8:	4659      	mov	r1, fp
 80026aa:	4628      	mov	r0, r5
 80026ac:	47b0      	blx	r6
 80026ae:	3001      	adds	r0, #1
 80026b0:	f43f ae93 	beq.w	80023da <_printf_float+0xae>
 80026b4:	3701      	adds	r7, #1
 80026b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	eba3 0309 	sub.w	r3, r3, r9
 80026c0:	42bb      	cmp	r3, r7
 80026c2:	dcef      	bgt.n	80026a4 <_printf_float+0x378>
 80026c4:	e74d      	b.n	8002562 <_printf_float+0x236>
 80026c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026c8:	2a01      	cmp	r2, #1
 80026ca:	dc01      	bgt.n	80026d0 <_printf_float+0x3a4>
 80026cc:	07db      	lsls	r3, r3, #31
 80026ce:	d538      	bpl.n	8002742 <_printf_float+0x416>
 80026d0:	2301      	movs	r3, #1
 80026d2:	463a      	mov	r2, r7
 80026d4:	4659      	mov	r1, fp
 80026d6:	4628      	mov	r0, r5
 80026d8:	47b0      	blx	r6
 80026da:	3001      	adds	r0, #1
 80026dc:	f43f ae7d 	beq.w	80023da <_printf_float+0xae>
 80026e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026e4:	4659      	mov	r1, fp
 80026e6:	4628      	mov	r0, r5
 80026e8:	47b0      	blx	r6
 80026ea:	3001      	adds	r0, #1
 80026ec:	f107 0701 	add.w	r7, r7, #1
 80026f0:	f43f ae73 	beq.w	80023da <_printf_float+0xae>
 80026f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026fa:	2200      	movs	r2, #0
 80026fc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002700:	2300      	movs	r3, #0
 8002702:	f7fe f951 	bl	80009a8 <__aeabi_dcmpeq>
 8002706:	b9c0      	cbnz	r0, 800273a <_printf_float+0x40e>
 8002708:	4643      	mov	r3, r8
 800270a:	463a      	mov	r2, r7
 800270c:	4659      	mov	r1, fp
 800270e:	4628      	mov	r0, r5
 8002710:	47b0      	blx	r6
 8002712:	3001      	adds	r0, #1
 8002714:	d10d      	bne.n	8002732 <_printf_float+0x406>
 8002716:	e660      	b.n	80023da <_printf_float+0xae>
 8002718:	2301      	movs	r3, #1
 800271a:	4642      	mov	r2, r8
 800271c:	4659      	mov	r1, fp
 800271e:	4628      	mov	r0, r5
 8002720:	47b0      	blx	r6
 8002722:	3001      	adds	r0, #1
 8002724:	f43f ae59 	beq.w	80023da <_printf_float+0xae>
 8002728:	3701      	adds	r7, #1
 800272a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800272c:	3b01      	subs	r3, #1
 800272e:	42bb      	cmp	r3, r7
 8002730:	dcf2      	bgt.n	8002718 <_printf_float+0x3ec>
 8002732:	464b      	mov	r3, r9
 8002734:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002738:	e6e4      	b.n	8002504 <_printf_float+0x1d8>
 800273a:	2700      	movs	r7, #0
 800273c:	f104 081a 	add.w	r8, r4, #26
 8002740:	e7f3      	b.n	800272a <_printf_float+0x3fe>
 8002742:	2301      	movs	r3, #1
 8002744:	e7e1      	b.n	800270a <_printf_float+0x3de>
 8002746:	2301      	movs	r3, #1
 8002748:	4642      	mov	r2, r8
 800274a:	4659      	mov	r1, fp
 800274c:	4628      	mov	r0, r5
 800274e:	47b0      	blx	r6
 8002750:	3001      	adds	r0, #1
 8002752:	f43f ae42 	beq.w	80023da <_printf_float+0xae>
 8002756:	3701      	adds	r7, #1
 8002758:	68e3      	ldr	r3, [r4, #12]
 800275a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	42bb      	cmp	r3, r7
 8002760:	dcf1      	bgt.n	8002746 <_printf_float+0x41a>
 8002762:	e702      	b.n	800256a <_printf_float+0x23e>
 8002764:	2700      	movs	r7, #0
 8002766:	f104 0819 	add.w	r8, r4, #25
 800276a:	e7f5      	b.n	8002758 <_printf_float+0x42c>
 800276c:	2b00      	cmp	r3, #0
 800276e:	f43f ae94 	beq.w	800249a <_printf_float+0x16e>
 8002772:	f04f 0c00 	mov.w	ip, #0
 8002776:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800277a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800277e:	6022      	str	r2, [r4, #0]
 8002780:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002784:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	463a      	mov	r2, r7
 800278c:	464b      	mov	r3, r9
 800278e:	4628      	mov	r0, r5
 8002790:	f7ff fd3a 	bl	8002208 <__cvt>
 8002794:	4607      	mov	r7, r0
 8002796:	e64f      	b.n	8002438 <_printf_float+0x10c>

08002798 <_printf_common>:
 8002798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279c:	4691      	mov	r9, r2
 800279e:	461f      	mov	r7, r3
 80027a0:	688a      	ldr	r2, [r1, #8]
 80027a2:	690b      	ldr	r3, [r1, #16]
 80027a4:	4606      	mov	r6, r0
 80027a6:	4293      	cmp	r3, r2
 80027a8:	bfb8      	it	lt
 80027aa:	4613      	movlt	r3, r2
 80027ac:	f8c9 3000 	str.w	r3, [r9]
 80027b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027b4:	460c      	mov	r4, r1
 80027b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027ba:	b112      	cbz	r2, 80027c2 <_printf_common+0x2a>
 80027bc:	3301      	adds	r3, #1
 80027be:	f8c9 3000 	str.w	r3, [r9]
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	0699      	lsls	r1, r3, #26
 80027c6:	bf42      	ittt	mi
 80027c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027cc:	3302      	addmi	r3, #2
 80027ce:	f8c9 3000 	strmi.w	r3, [r9]
 80027d2:	6825      	ldr	r5, [r4, #0]
 80027d4:	f015 0506 	ands.w	r5, r5, #6
 80027d8:	d107      	bne.n	80027ea <_printf_common+0x52>
 80027da:	f104 0a19 	add.w	sl, r4, #25
 80027de:	68e3      	ldr	r3, [r4, #12]
 80027e0:	f8d9 2000 	ldr.w	r2, [r9]
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	42ab      	cmp	r3, r5
 80027e8:	dc29      	bgt.n	800283e <_printf_common+0xa6>
 80027ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027ee:	6822      	ldr	r2, [r4, #0]
 80027f0:	3300      	adds	r3, #0
 80027f2:	bf18      	it	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	0692      	lsls	r2, r2, #26
 80027f8:	d42e      	bmi.n	8002858 <_printf_common+0xc0>
 80027fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027fe:	4639      	mov	r1, r7
 8002800:	4630      	mov	r0, r6
 8002802:	47c0      	blx	r8
 8002804:	3001      	adds	r0, #1
 8002806:	d021      	beq.n	800284c <_printf_common+0xb4>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	68e5      	ldr	r5, [r4, #12]
 800280c:	f003 0306 	and.w	r3, r3, #6
 8002810:	2b04      	cmp	r3, #4
 8002812:	bf18      	it	ne
 8002814:	2500      	movne	r5, #0
 8002816:	f8d9 2000 	ldr.w	r2, [r9]
 800281a:	f04f 0900 	mov.w	r9, #0
 800281e:	bf08      	it	eq
 8002820:	1aad      	subeq	r5, r5, r2
 8002822:	68a3      	ldr	r3, [r4, #8]
 8002824:	6922      	ldr	r2, [r4, #16]
 8002826:	bf08      	it	eq
 8002828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800282c:	4293      	cmp	r3, r2
 800282e:	bfc4      	itt	gt
 8002830:	1a9b      	subgt	r3, r3, r2
 8002832:	18ed      	addgt	r5, r5, r3
 8002834:	341a      	adds	r4, #26
 8002836:	454d      	cmp	r5, r9
 8002838:	d11a      	bne.n	8002870 <_printf_common+0xd8>
 800283a:	2000      	movs	r0, #0
 800283c:	e008      	b.n	8002850 <_printf_common+0xb8>
 800283e:	2301      	movs	r3, #1
 8002840:	4652      	mov	r2, sl
 8002842:	4639      	mov	r1, r7
 8002844:	4630      	mov	r0, r6
 8002846:	47c0      	blx	r8
 8002848:	3001      	adds	r0, #1
 800284a:	d103      	bne.n	8002854 <_printf_common+0xbc>
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002854:	3501      	adds	r5, #1
 8002856:	e7c2      	b.n	80027de <_printf_common+0x46>
 8002858:	2030      	movs	r0, #48	; 0x30
 800285a:	18e1      	adds	r1, r4, r3
 800285c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002866:	4422      	add	r2, r4
 8002868:	3302      	adds	r3, #2
 800286a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800286e:	e7c4      	b.n	80027fa <_printf_common+0x62>
 8002870:	2301      	movs	r3, #1
 8002872:	4622      	mov	r2, r4
 8002874:	4639      	mov	r1, r7
 8002876:	4630      	mov	r0, r6
 8002878:	47c0      	blx	r8
 800287a:	3001      	adds	r0, #1
 800287c:	d0e6      	beq.n	800284c <_printf_common+0xb4>
 800287e:	f109 0901 	add.w	r9, r9, #1
 8002882:	e7d8      	b.n	8002836 <_printf_common+0x9e>

08002884 <quorem>:
 8002884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	6903      	ldr	r3, [r0, #16]
 800288a:	690c      	ldr	r4, [r1, #16]
 800288c:	4680      	mov	r8, r0
 800288e:	42a3      	cmp	r3, r4
 8002890:	f2c0 8084 	blt.w	800299c <quorem+0x118>
 8002894:	3c01      	subs	r4, #1
 8002896:	f101 0714 	add.w	r7, r1, #20
 800289a:	f100 0614 	add.w	r6, r0, #20
 800289e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80028a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80028a6:	3501      	adds	r5, #1
 80028a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80028ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80028b0:	eb06 030c 	add.w	r3, r6, ip
 80028b4:	eb07 090c 	add.w	r9, r7, ip
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	b39d      	cbz	r5, 8002924 <quorem+0xa0>
 80028bc:	f04f 0a00 	mov.w	sl, #0
 80028c0:	4638      	mov	r0, r7
 80028c2:	46b6      	mov	lr, r6
 80028c4:	46d3      	mov	fp, sl
 80028c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80028ca:	b293      	uxth	r3, r2
 80028cc:	fb05 a303 	mla	r3, r5, r3, sl
 80028d0:	0c12      	lsrs	r2, r2, #16
 80028d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80028d6:	fb05 a202 	mla	r2, r5, r2, sl
 80028da:	b29b      	uxth	r3, r3
 80028dc:	ebab 0303 	sub.w	r3, fp, r3
 80028e0:	f8de b000 	ldr.w	fp, [lr]
 80028e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80028e8:	fa1f fb8b 	uxth.w	fp, fp
 80028ec:	445b      	add	r3, fp
 80028ee:	fa1f fb82 	uxth.w	fp, r2
 80028f2:	f8de 2000 	ldr.w	r2, [lr]
 80028f6:	4581      	cmp	r9, r0
 80028f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80028fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002900:	b29b      	uxth	r3, r3
 8002902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002906:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800290a:	f84e 3b04 	str.w	r3, [lr], #4
 800290e:	d2da      	bcs.n	80028c6 <quorem+0x42>
 8002910:	f856 300c 	ldr.w	r3, [r6, ip]
 8002914:	b933      	cbnz	r3, 8002924 <quorem+0xa0>
 8002916:	9b01      	ldr	r3, [sp, #4]
 8002918:	3b04      	subs	r3, #4
 800291a:	429e      	cmp	r6, r3
 800291c:	461a      	mov	r2, r3
 800291e:	d331      	bcc.n	8002984 <quorem+0x100>
 8002920:	f8c8 4010 	str.w	r4, [r8, #16]
 8002924:	4640      	mov	r0, r8
 8002926:	f001 f825 	bl	8003974 <__mcmp>
 800292a:	2800      	cmp	r0, #0
 800292c:	db26      	blt.n	800297c <quorem+0xf8>
 800292e:	4630      	mov	r0, r6
 8002930:	f04f 0c00 	mov.w	ip, #0
 8002934:	3501      	adds	r5, #1
 8002936:	f857 1b04 	ldr.w	r1, [r7], #4
 800293a:	f8d0 e000 	ldr.w	lr, [r0]
 800293e:	b28b      	uxth	r3, r1
 8002940:	ebac 0303 	sub.w	r3, ip, r3
 8002944:	fa1f f28e 	uxth.w	r2, lr
 8002948:	4413      	add	r3, r2
 800294a:	0c0a      	lsrs	r2, r1, #16
 800294c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002954:	b29b      	uxth	r3, r3
 8002956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800295a:	45b9      	cmp	r9, r7
 800295c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002960:	f840 3b04 	str.w	r3, [r0], #4
 8002964:	d2e7      	bcs.n	8002936 <quorem+0xb2>
 8002966:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800296a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800296e:	b92a      	cbnz	r2, 800297c <quorem+0xf8>
 8002970:	3b04      	subs	r3, #4
 8002972:	429e      	cmp	r6, r3
 8002974:	461a      	mov	r2, r3
 8002976:	d30b      	bcc.n	8002990 <quorem+0x10c>
 8002978:	f8c8 4010 	str.w	r4, [r8, #16]
 800297c:	4628      	mov	r0, r5
 800297e:	b003      	add	sp, #12
 8002980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	3b04      	subs	r3, #4
 8002988:	2a00      	cmp	r2, #0
 800298a:	d1c9      	bne.n	8002920 <quorem+0x9c>
 800298c:	3c01      	subs	r4, #1
 800298e:	e7c4      	b.n	800291a <quorem+0x96>
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	3b04      	subs	r3, #4
 8002994:	2a00      	cmp	r2, #0
 8002996:	d1ef      	bne.n	8002978 <quorem+0xf4>
 8002998:	3c01      	subs	r4, #1
 800299a:	e7ea      	b.n	8002972 <quorem+0xee>
 800299c:	2000      	movs	r0, #0
 800299e:	e7ee      	b.n	800297e <quorem+0xfa>

080029a0 <_dtoa_r>:
 80029a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a4:	4616      	mov	r6, r2
 80029a6:	461f      	mov	r7, r3
 80029a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80029aa:	b095      	sub	sp, #84	; 0x54
 80029ac:	4604      	mov	r4, r0
 80029ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80029b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80029b6:	b93d      	cbnz	r5, 80029c8 <_dtoa_r+0x28>
 80029b8:	2010      	movs	r0, #16
 80029ba:	f000 fdb3 	bl	8003524 <malloc>
 80029be:	6260      	str	r0, [r4, #36]	; 0x24
 80029c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80029c4:	6005      	str	r5, [r0, #0]
 80029c6:	60c5      	str	r5, [r0, #12]
 80029c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	b151      	cbz	r1, 80029e4 <_dtoa_r+0x44>
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	2301      	movs	r3, #1
 80029d2:	4093      	lsls	r3, r2
 80029d4:	604a      	str	r2, [r1, #4]
 80029d6:	608b      	str	r3, [r1, #8]
 80029d8:	4620      	mov	r0, r4
 80029da:	f000 fdea 	bl	80035b2 <_Bfree>
 80029de:	2200      	movs	r2, #0
 80029e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	1e3b      	subs	r3, r7, #0
 80029e6:	bfaf      	iteee	ge
 80029e8:	2300      	movge	r3, #0
 80029ea:	2201      	movlt	r2, #1
 80029ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	9303      	strlt	r3, [sp, #12]
 80029f2:	bfac      	ite	ge
 80029f4:	f8c8 3000 	strge.w	r3, [r8]
 80029f8:	f8c8 2000 	strlt.w	r2, [r8]
 80029fc:	4bae      	ldr	r3, [pc, #696]	; (8002cb8 <_dtoa_r+0x318>)
 80029fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002a02:	ea33 0308 	bics.w	r3, r3, r8
 8002a06:	d11b      	bne.n	8002a40 <_dtoa_r+0xa0>
 8002a08:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	9b02      	ldr	r3, [sp, #8]
 8002a12:	b923      	cbnz	r3, 8002a1e <_dtoa_r+0x7e>
 8002a14:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	f000 8545 	beq.w	80034a8 <_dtoa_r+0xb08>
 8002a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a20:	b953      	cbnz	r3, 8002a38 <_dtoa_r+0x98>
 8002a22:	4ba6      	ldr	r3, [pc, #664]	; (8002cbc <_dtoa_r+0x31c>)
 8002a24:	e021      	b.n	8002a6a <_dtoa_r+0xca>
 8002a26:	4ba6      	ldr	r3, [pc, #664]	; (8002cc0 <_dtoa_r+0x320>)
 8002a28:	9306      	str	r3, [sp, #24]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	9806      	ldr	r0, [sp, #24]
 8002a32:	b015      	add	sp, #84	; 0x54
 8002a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a38:	4ba0      	ldr	r3, [pc, #640]	; (8002cbc <_dtoa_r+0x31c>)
 8002a3a:	9306      	str	r3, [sp, #24]
 8002a3c:	3303      	adds	r3, #3
 8002a3e:	e7f5      	b.n	8002a2c <_dtoa_r+0x8c>
 8002a40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2300      	movs	r3, #0
 8002a48:	4630      	mov	r0, r6
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	f7fd ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8002a50:	4682      	mov	sl, r0
 8002a52:	b160      	cbz	r0, 8002a6e <_dtoa_r+0xce>
 8002a54:	2301      	movs	r3, #1
 8002a56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8520 	beq.w	80034a2 <_dtoa_r+0xb02>
 8002a62:	4b98      	ldr	r3, [pc, #608]	; (8002cc4 <_dtoa_r+0x324>)
 8002a64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	9306      	str	r3, [sp, #24]
 8002a6c:	e7e0      	b.n	8002a30 <_dtoa_r+0x90>
 8002a6e:	ab12      	add	r3, sp, #72	; 0x48
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	ab13      	add	r3, sp, #76	; 0x4c
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	4632      	mov	r2, r6
 8002a78:	463b      	mov	r3, r7
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f000 fff2 	bl	8003a64 <__d2b>
 8002a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002a84:	4683      	mov	fp, r0
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	d07d      	beq.n	8002b86 <_dtoa_r+0x1e6>
 8002a8a:	46b0      	mov	r8, r6
 8002a8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002a90:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002a94:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002a98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002a9c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <_dtoa_r+0x328>)
 8002aa4:	4640      	mov	r0, r8
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	f7fd fb5e 	bl	8000168 <__aeabi_dsub>
 8002aac:	a37c      	add	r3, pc, #496	; (adr r3, 8002ca0 <_dtoa_r+0x300>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fd11 	bl	80004d8 <__aeabi_dmul>
 8002ab6:	a37c      	add	r3, pc, #496	; (adr r3, 8002ca8 <_dtoa_r+0x308>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fb56 	bl	800016c <__adddf3>
 8002ac0:	4606      	mov	r6, r0
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	460f      	mov	r7, r1
 8002ac6:	f7fd fc9d 	bl	8000404 <__aeabi_i2d>
 8002aca:	a379      	add	r3, pc, #484	; (adr r3, 8002cb0 <_dtoa_r+0x310>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fd02 	bl	80004d8 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4630      	mov	r0, r6
 8002ada:	4639      	mov	r1, r7
 8002adc:	f7fd fb46 	bl	800016c <__adddf3>
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	460f      	mov	r7, r1
 8002ae4:	f7fd ffa8 	bl	8000a38 <__aeabi_d2iz>
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4682      	mov	sl, r0
 8002aec:	2300      	movs	r3, #0
 8002aee:	4630      	mov	r0, r6
 8002af0:	4639      	mov	r1, r7
 8002af2:	f7fd ff63 	bl	80009bc <__aeabi_dcmplt>
 8002af6:	b148      	cbz	r0, 8002b0c <_dtoa_r+0x16c>
 8002af8:	4650      	mov	r0, sl
 8002afa:	f7fd fc83 	bl	8000404 <__aeabi_i2d>
 8002afe:	4632      	mov	r2, r6
 8002b00:	463b      	mov	r3, r7
 8002b02:	f7fd ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8002b06:	b908      	cbnz	r0, 8002b0c <_dtoa_r+0x16c>
 8002b08:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002b0c:	f1ba 0f16 	cmp.w	sl, #22
 8002b10:	d85a      	bhi.n	8002bc8 <_dtoa_r+0x228>
 8002b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b16:	496d      	ldr	r1, [pc, #436]	; (8002ccc <_dtoa_r+0x32c>)
 8002b18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b20:	f7fd ff6a 	bl	80009f8 <__aeabi_dcmpgt>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d051      	beq.n	8002bcc <_dtoa_r+0x22c>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8002b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b32:	1b5d      	subs	r5, r3, r5
 8002b34:	1e6b      	subs	r3, r5, #1
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	bf43      	ittte	mi
 8002b3a:	2300      	movmi	r3, #0
 8002b3c:	f1c5 0901 	rsbmi	r9, r5, #1
 8002b40:	9307      	strmi	r3, [sp, #28]
 8002b42:	f04f 0900 	movpl.w	r9, #0
 8002b46:	f1ba 0f00 	cmp.w	sl, #0
 8002b4a:	db41      	blt.n	8002bd0 <_dtoa_r+0x230>
 8002b4c:	9b07      	ldr	r3, [sp, #28]
 8002b4e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002b52:	4453      	add	r3, sl
 8002b54:	9307      	str	r3, [sp, #28]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9308      	str	r3, [sp, #32]
 8002b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	f200 808f 	bhi.w	8002c80 <_dtoa_r+0x2e0>
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	bfc4      	itt	gt
 8002b66:	3b04      	subgt	r3, #4
 8002b68:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002b6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002b6c:	bfc8      	it	gt
 8002b6e:	2500      	movgt	r5, #0
 8002b70:	f1a3 0302 	sub.w	r3, r3, #2
 8002b74:	bfd8      	it	le
 8002b76:	2501      	movle	r5, #1
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	f200 808d 	bhi.w	8002c98 <_dtoa_r+0x2f8>
 8002b7e:	e8df f003 	tbb	[pc, r3]
 8002b82:	7d7b      	.short	0x7d7b
 8002b84:	6f2f      	.short	0x6f2f
 8002b86:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002b8a:	441d      	add	r5, r3
 8002b8c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002b90:	2820      	cmp	r0, #32
 8002b92:	dd13      	ble.n	8002bbc <_dtoa_r+0x21c>
 8002b94:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002b98:	9b02      	ldr	r3, [sp, #8]
 8002b9a:	fa08 f800 	lsl.w	r8, r8, r0
 8002b9e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002ba2:	fa23 f000 	lsr.w	r0, r3, r0
 8002ba6:	ea48 0000 	orr.w	r0, r8, r0
 8002baa:	f7fd fc1b 	bl	80003e4 <__aeabi_ui2d>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4680      	mov	r8, r0
 8002bb2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002bb6:	3d01      	subs	r5, #1
 8002bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8002bba:	e771      	b.n	8002aa0 <_dtoa_r+0x100>
 8002bbc:	9b02      	ldr	r3, [sp, #8]
 8002bbe:	f1c0 0020 	rsb	r0, r0, #32
 8002bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc6:	e7f0      	b.n	8002baa <_dtoa_r+0x20a>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e7b0      	b.n	8002b2e <_dtoa_r+0x18e>
 8002bcc:	900d      	str	r0, [sp, #52]	; 0x34
 8002bce:	e7af      	b.n	8002b30 <_dtoa_r+0x190>
 8002bd0:	f1ca 0300 	rsb	r3, sl, #0
 8002bd4:	9308      	str	r3, [sp, #32]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	eba9 090a 	sub.w	r9, r9, sl
 8002bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8002bde:	e7bc      	b.n	8002b5a <_dtoa_r+0x1ba>
 8002be0:	2301      	movs	r3, #1
 8002be2:	9309      	str	r3, [sp, #36]	; 0x24
 8002be4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dd74      	ble.n	8002cd4 <_dtoa_r+0x334>
 8002bea:	4698      	mov	r8, r3
 8002bec:	9304      	str	r3, [sp, #16]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002bf2:	6072      	str	r2, [r6, #4]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	f102 0014 	add.w	r0, r2, #20
 8002bfa:	4298      	cmp	r0, r3
 8002bfc:	6871      	ldr	r1, [r6, #4]
 8002bfe:	d96e      	bls.n	8002cde <_dtoa_r+0x33e>
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 fca2 	bl	800354a <_Balloc>
 8002c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c08:	6030      	str	r0, [r6, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b8 0f0e 	cmp.w	r8, #14
 8002c10:	9306      	str	r3, [sp, #24]
 8002c12:	f200 80ed 	bhi.w	8002df0 <_dtoa_r+0x450>
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	f000 80ea 	beq.w	8002df0 <_dtoa_r+0x450>
 8002c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c20:	f1ba 0f00 	cmp.w	sl, #0
 8002c24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002c28:	dd77      	ble.n	8002d1a <_dtoa_r+0x37a>
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <_dtoa_r+0x32c>)
 8002c2c:	f00a 030f 	and.w	r3, sl, #15
 8002c30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002c34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c38:	06f0      	lsls	r0, r6, #27
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002c42:	d568      	bpl.n	8002d16 <_dtoa_r+0x376>
 8002c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <_dtoa_r+0x330>)
 8002c4a:	2503      	movs	r5, #3
 8002c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c50:	f7fd fd6c 	bl	800072c <__aeabi_ddiv>
 8002c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c58:	f006 060f 	and.w	r6, r6, #15
 8002c5c:	4f1c      	ldr	r7, [pc, #112]	; (8002cd0 <_dtoa_r+0x330>)
 8002c5e:	e04f      	b.n	8002d00 <_dtoa_r+0x360>
 8002c60:	2301      	movs	r3, #1
 8002c62:	9309      	str	r3, [sp, #36]	; 0x24
 8002c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c66:	4453      	add	r3, sl
 8002c68:	f103 0801 	add.w	r8, r3, #1
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	4643      	mov	r3, r8
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bfb8      	it	lt
 8002c74:	2301      	movlt	r3, #1
 8002c76:	e7ba      	b.n	8002bee <_dtoa_r+0x24e>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e7b2      	b.n	8002be2 <_dtoa_r+0x242>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e7f0      	b.n	8002c62 <_dtoa_r+0x2c2>
 8002c80:	2501      	movs	r5, #1
 8002c82:	2300      	movs	r3, #0
 8002c84:	9509      	str	r5, [sp, #36]	; 0x24
 8002c86:	931e      	str	r3, [sp, #120]	; 0x78
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	9304      	str	r3, [sp, #16]
 8002c90:	4698      	mov	r8, r3
 8002c92:	2312      	movs	r3, #18
 8002c94:	921f      	str	r2, [sp, #124]	; 0x7c
 8002c96:	e7aa      	b.n	8002bee <_dtoa_r+0x24e>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9c:	e7f4      	b.n	8002c88 <_dtoa_r+0x2e8>
 8002c9e:	bf00      	nop
 8002ca0:	636f4361 	.word	0x636f4361
 8002ca4:	3fd287a7 	.word	0x3fd287a7
 8002ca8:	8b60c8b3 	.word	0x8b60c8b3
 8002cac:	3fc68a28 	.word	0x3fc68a28
 8002cb0:	509f79fb 	.word	0x509f79fb
 8002cb4:	3fd34413 	.word	0x3fd34413
 8002cb8:	7ff00000 	.word	0x7ff00000
 8002cbc:	08003c9f 	.word	0x08003c9f
 8002cc0:	08003c96 	.word	0x08003c96
 8002cc4:	08003c95 	.word	0x08003c95
 8002cc8:	3ff80000 	.word	0x3ff80000
 8002ccc:	08003cd0 	.word	0x08003cd0
 8002cd0:	08003ca8 	.word	0x08003ca8
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	4698      	mov	r8, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	e7da      	b.n	8002c94 <_dtoa_r+0x2f4>
 8002cde:	3101      	adds	r1, #1
 8002ce0:	6071      	str	r1, [r6, #4]
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	e787      	b.n	8002bf6 <_dtoa_r+0x256>
 8002ce6:	07f1      	lsls	r1, r6, #31
 8002ce8:	d508      	bpl.n	8002cfc <_dtoa_r+0x35c>
 8002cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf2:	f7fd fbf1 	bl	80004d8 <__aeabi_dmul>
 8002cf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	1076      	asrs	r6, r6, #1
 8002cfe:	3708      	adds	r7, #8
 8002d00:	2e00      	cmp	r6, #0
 8002d02:	d1f0      	bne.n	8002ce6 <_dtoa_r+0x346>
 8002d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d0c:	f7fd fd0e 	bl	800072c <__aeabi_ddiv>
 8002d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d14:	e01b      	b.n	8002d4e <_dtoa_r+0x3ae>
 8002d16:	2502      	movs	r5, #2
 8002d18:	e7a0      	b.n	8002c5c <_dtoa_r+0x2bc>
 8002d1a:	f000 80a4 	beq.w	8002e66 <_dtoa_r+0x4c6>
 8002d1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002d22:	f1ca 0600 	rsb	r6, sl, #0
 8002d26:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <_dtoa_r+0x608>)
 8002d28:	f006 020f 	and.w	r2, r6, #15
 8002d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fbd0 	bl	80004d8 <__aeabi_dmul>
 8002d38:	2502      	movs	r5, #2
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d40:	4f9a      	ldr	r7, [pc, #616]	; (8002fac <_dtoa_r+0x60c>)
 8002d42:	1136      	asrs	r6, r6, #4
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	f040 8083 	bne.w	8002e50 <_dtoa_r+0x4b0>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e0      	bne.n	8002d10 <_dtoa_r+0x370>
 8002d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 808a 	beq.w	8002e6a <_dtoa_r+0x4ca>
 8002d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d62:	2200      	movs	r2, #0
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <_dtoa_r+0x610>)
 8002d66:	f7fd fe29 	bl	80009bc <__aeabi_dcmplt>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d07d      	beq.n	8002e6a <_dtoa_r+0x4ca>
 8002d6e:	f1b8 0f00 	cmp.w	r8, #0
 8002d72:	d07a      	beq.n	8002e6a <_dtoa_r+0x4ca>
 8002d74:	9b04      	ldr	r3, [sp, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd36      	ble.n	8002de8 <_dtoa_r+0x448>
 8002d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <_dtoa_r+0x614>)
 8002d82:	f7fd fba9 	bl	80004d8 <__aeabi_dmul>
 8002d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d8a:	9e04      	ldr	r6, [sp, #16]
 8002d8c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8002d90:	3501      	adds	r5, #1
 8002d92:	4628      	mov	r0, r5
 8002d94:	f7fd fb36 	bl	8000404 <__aeabi_i2d>
 8002d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d9c:	f7fd fb9c 	bl	80004d8 <__aeabi_dmul>
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <_dtoa_r+0x618>)
 8002da4:	f7fd f9e2 	bl	800016c <__adddf3>
 8002da8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002dac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002db0:	950b      	str	r5, [sp, #44]	; 0x2c
 8002db2:	2e00      	cmp	r6, #0
 8002db4:	d15c      	bne.n	8002e70 <_dtoa_r+0x4d0>
 8002db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <_dtoa_r+0x61c>)
 8002dbe:	f7fd f9d3 	bl	8000168 <__aeabi_dsub>
 8002dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dca:	f7fd fe15 	bl	80009f8 <__aeabi_dcmpgt>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	f040 8281 	bne.w	80032d6 <_dtoa_r+0x936>
 8002dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dda:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002dde:	f7fd fded 	bl	80009bc <__aeabi_dcmplt>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	f040 8275 	bne.w	80032d2 <_dtoa_r+0x932>
 8002de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f2c0 814b 	blt.w	800308e <_dtoa_r+0x6ee>
 8002df8:	f1ba 0f0e 	cmp.w	sl, #14
 8002dfc:	f300 8147 	bgt.w	800308e <_dtoa_r+0x6ee>
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <_dtoa_r+0x608>)
 8002e02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f280 80d7 	bge.w	8002fc4 <_dtoa_r+0x624>
 8002e16:	f1b8 0f00 	cmp.w	r8, #0
 8002e1a:	f300 80d3 	bgt.w	8002fc4 <_dtoa_r+0x624>
 8002e1e:	f040 8257 	bne.w	80032d0 <_dtoa_r+0x930>
 8002e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e26:	2200      	movs	r2, #0
 8002e28:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <_dtoa_r+0x61c>)
 8002e2a:	f7fd fb55 	bl	80004d8 <__aeabi_dmul>
 8002e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e32:	f7fd fdd7 	bl	80009e4 <__aeabi_dcmpge>
 8002e36:	4646      	mov	r6, r8
 8002e38:	4647      	mov	r7, r8
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	f040 822d 	bne.w	800329a <_dtoa_r+0x8fa>
 8002e40:	9b06      	ldr	r3, [sp, #24]
 8002e42:	9a06      	ldr	r2, [sp, #24]
 8002e44:	1c5d      	adds	r5, r3, #1
 8002e46:	2331      	movs	r3, #49	; 0x31
 8002e48:	f10a 0a01 	add.w	sl, sl, #1
 8002e4c:	7013      	strb	r3, [r2, #0]
 8002e4e:	e228      	b.n	80032a2 <_dtoa_r+0x902>
 8002e50:	07f2      	lsls	r2, r6, #31
 8002e52:	d505      	bpl.n	8002e60 <_dtoa_r+0x4c0>
 8002e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e58:	f7fd fb3e 	bl	80004d8 <__aeabi_dmul>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	3501      	adds	r5, #1
 8002e60:	1076      	asrs	r6, r6, #1
 8002e62:	3708      	adds	r7, #8
 8002e64:	e76e      	b.n	8002d44 <_dtoa_r+0x3a4>
 8002e66:	2502      	movs	r5, #2
 8002e68:	e771      	b.n	8002d4e <_dtoa_r+0x3ae>
 8002e6a:	4657      	mov	r7, sl
 8002e6c:	4646      	mov	r6, r8
 8002e6e:	e790      	b.n	8002d92 <_dtoa_r+0x3f2>
 8002e70:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <_dtoa_r+0x608>)
 8002e72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002e76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d048      	beq.n	8002f12 <_dtoa_r+0x572>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	2000      	movs	r0, #0
 8002e86:	494e      	ldr	r1, [pc, #312]	; (8002fc0 <_dtoa_r+0x620>)
 8002e88:	f7fd fc50 	bl	800072c <__aeabi_ddiv>
 8002e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e90:	f7fd f96a 	bl	8000168 <__aeabi_dsub>
 8002e94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e98:	9d06      	ldr	r5, [sp, #24]
 8002e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e9e:	f7fd fdcb 	bl	8000a38 <__aeabi_d2iz>
 8002ea2:	9011      	str	r0, [sp, #68]	; 0x44
 8002ea4:	f7fd faae 	bl	8000404 <__aeabi_i2d>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eb0:	f7fd f95a 	bl	8000168 <__aeabi_dsub>
 8002eb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eba:	3330      	adds	r3, #48	; 0x30
 8002ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8002ec0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ec4:	f7fd fd7a 	bl	80009bc <__aeabi_dcmplt>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d163      	bne.n	8002f94 <_dtoa_r+0x5f4>
 8002ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <_dtoa_r+0x610>)
 8002ed4:	f7fd f948 	bl	8000168 <__aeabi_dsub>
 8002ed8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002edc:	f7fd fd6e 	bl	80009bc <__aeabi_dcmplt>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f040 80b5 	bne.w	8003050 <_dtoa_r+0x6b0>
 8002ee6:	9b06      	ldr	r3, [sp, #24]
 8002ee8:	1aeb      	subs	r3, r5, r3
 8002eea:	429e      	cmp	r6, r3
 8002eec:	f77f af7c 	ble.w	8002de8 <_dtoa_r+0x448>
 8002ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <_dtoa_r+0x614>)
 8002ef8:	f7fd faee 	bl	80004d8 <__aeabi_dmul>
 8002efc:	2200      	movs	r2, #0
 8002efe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <_dtoa_r+0x614>)
 8002f08:	f7fd fae6 	bl	80004d8 <__aeabi_dmul>
 8002f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f10:	e7c3      	b.n	8002e9a <_dtoa_r+0x4fa>
 8002f12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f16:	f7fd fadf 	bl	80004d8 <__aeabi_dmul>
 8002f1a:	9b06      	ldr	r3, [sp, #24]
 8002f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f20:	199d      	adds	r5, r3, r6
 8002f22:	461e      	mov	r6, r3
 8002f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f28:	f7fd fd86 	bl	8000a38 <__aeabi_d2iz>
 8002f2c:	9011      	str	r0, [sp, #68]	; 0x44
 8002f2e:	f7fd fa69 	bl	8000404 <__aeabi_i2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f3a:	f7fd f915 	bl	8000168 <__aeabi_dsub>
 8002f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f44:	3330      	adds	r3, #48	; 0x30
 8002f46:	f806 3b01 	strb.w	r3, [r6], #1
 8002f4a:	42ae      	cmp	r6, r5
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	d124      	bne.n	8002f9c <_dtoa_r+0x5fc>
 8002f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <_dtoa_r+0x620>)
 8002f58:	f7fd f908 	bl	800016c <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f64:	f7fd fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d171      	bne.n	8003050 <_dtoa_r+0x6b0>
 8002f6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f70:	2000      	movs	r0, #0
 8002f72:	4913      	ldr	r1, [pc, #76]	; (8002fc0 <_dtoa_r+0x620>)
 8002f74:	f7fd f8f8 	bl	8000168 <__aeabi_dsub>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f80:	f7fd fd1c 	bl	80009bc <__aeabi_dcmplt>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	f43f af2f 	beq.w	8002de8 <_dtoa_r+0x448>
 8002f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f8e:	1e6a      	subs	r2, r5, #1
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d001      	beq.n	8002f98 <_dtoa_r+0x5f8>
 8002f94:	46ba      	mov	sl, r7
 8002f96:	e04a      	b.n	800302e <_dtoa_r+0x68e>
 8002f98:	4615      	mov	r5, r2
 8002f9a:	e7f6      	b.n	8002f8a <_dtoa_r+0x5ea>
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <_dtoa_r+0x614>)
 8002f9e:	f7fd fa9b 	bl	80004d8 <__aeabi_dmul>
 8002fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fa6:	e7bd      	b.n	8002f24 <_dtoa_r+0x584>
 8002fa8:	08003cd0 	.word	0x08003cd0
 8002fac:	08003ca8 	.word	0x08003ca8
 8002fb0:	3ff00000 	.word	0x3ff00000
 8002fb4:	40240000 	.word	0x40240000
 8002fb8:	401c0000 	.word	0x401c0000
 8002fbc:	40140000 	.word	0x40140000
 8002fc0:	3fe00000 	.word	0x3fe00000
 8002fc4:	9d06      	ldr	r5, [sp, #24]
 8002fc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fce:	4630      	mov	r0, r6
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	f7fd fbab 	bl	800072c <__aeabi_ddiv>
 8002fd6:	f7fd fd2f 	bl	8000a38 <__aeabi_d2iz>
 8002fda:	4681      	mov	r9, r0
 8002fdc:	f7fd fa12 	bl	8000404 <__aeabi_i2d>
 8002fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fe4:	f7fd fa78 	bl	80004d8 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4630      	mov	r0, r6
 8002fee:	4639      	mov	r1, r7
 8002ff0:	f7fd f8ba 	bl	8000168 <__aeabi_dsub>
 8002ff4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8002ffc:	9e06      	ldr	r6, [sp, #24]
 8002ffe:	4602      	mov	r2, r0
 8003000:	1bae      	subs	r6, r5, r6
 8003002:	45b0      	cmp	r8, r6
 8003004:	460b      	mov	r3, r1
 8003006:	d135      	bne.n	8003074 <_dtoa_r+0x6d4>
 8003008:	f7fd f8b0 	bl	800016c <__adddf3>
 800300c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003010:	4606      	mov	r6, r0
 8003012:	460f      	mov	r7, r1
 8003014:	f7fd fcf0 	bl	80009f8 <__aeabi_dcmpgt>
 8003018:	b9c8      	cbnz	r0, 800304e <_dtoa_r+0x6ae>
 800301a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800301e:	4630      	mov	r0, r6
 8003020:	4639      	mov	r1, r7
 8003022:	f7fd fcc1 	bl	80009a8 <__aeabi_dcmpeq>
 8003026:	b110      	cbz	r0, 800302e <_dtoa_r+0x68e>
 8003028:	f019 0f01 	tst.w	r9, #1
 800302c:	d10f      	bne.n	800304e <_dtoa_r+0x6ae>
 800302e:	4659      	mov	r1, fp
 8003030:	4620      	mov	r0, r4
 8003032:	f000 fabe 	bl	80035b2 <_Bfree>
 8003036:	2300      	movs	r3, #0
 8003038:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800303a:	702b      	strb	r3, [r5, #0]
 800303c:	f10a 0301 	add.w	r3, sl, #1
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003044:	2b00      	cmp	r3, #0
 8003046:	f43f acf3 	beq.w	8002a30 <_dtoa_r+0x90>
 800304a:	601d      	str	r5, [r3, #0]
 800304c:	e4f0      	b.n	8002a30 <_dtoa_r+0x90>
 800304e:	4657      	mov	r7, sl
 8003050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003054:	1e6b      	subs	r3, r5, #1
 8003056:	2a39      	cmp	r2, #57	; 0x39
 8003058:	d106      	bne.n	8003068 <_dtoa_r+0x6c8>
 800305a:	9a06      	ldr	r2, [sp, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <_dtoa_r+0x6d0>
 8003060:	2330      	movs	r3, #48	; 0x30
 8003062:	7013      	strb	r3, [r2, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	3701      	adds	r7, #1
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	3201      	adds	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e791      	b.n	8002f94 <_dtoa_r+0x5f4>
 8003070:	461d      	mov	r5, r3
 8003072:	e7ed      	b.n	8003050 <_dtoa_r+0x6b0>
 8003074:	2200      	movs	r2, #0
 8003076:	4b99      	ldr	r3, [pc, #612]	; (80032dc <_dtoa_r+0x93c>)
 8003078:	f7fd fa2e 	bl	80004d8 <__aeabi_dmul>
 800307c:	2200      	movs	r2, #0
 800307e:	2300      	movs	r3, #0
 8003080:	4606      	mov	r6, r0
 8003082:	460f      	mov	r7, r1
 8003084:	f7fd fc90 	bl	80009a8 <__aeabi_dcmpeq>
 8003088:	2800      	cmp	r0, #0
 800308a:	d09e      	beq.n	8002fca <_dtoa_r+0x62a>
 800308c:	e7cf      	b.n	800302e <_dtoa_r+0x68e>
 800308e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003090:	2a00      	cmp	r2, #0
 8003092:	f000 8088 	beq.w	80031a6 <_dtoa_r+0x806>
 8003096:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003098:	2a01      	cmp	r2, #1
 800309a:	dc6d      	bgt.n	8003178 <_dtoa_r+0x7d8>
 800309c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800309e:	2a00      	cmp	r2, #0
 80030a0:	d066      	beq.n	8003170 <_dtoa_r+0x7d0>
 80030a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80030a6:	464d      	mov	r5, r9
 80030a8:	9e08      	ldr	r6, [sp, #32]
 80030aa:	9a07      	ldr	r2, [sp, #28]
 80030ac:	2101      	movs	r1, #1
 80030ae:	441a      	add	r2, r3
 80030b0:	4620      	mov	r0, r4
 80030b2:	4499      	add	r9, r3
 80030b4:	9207      	str	r2, [sp, #28]
 80030b6:	f000 fb1c 	bl	80036f2 <__i2b>
 80030ba:	4607      	mov	r7, r0
 80030bc:	2d00      	cmp	r5, #0
 80030be:	dd0b      	ble.n	80030d8 <_dtoa_r+0x738>
 80030c0:	9b07      	ldr	r3, [sp, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	dd08      	ble.n	80030d8 <_dtoa_r+0x738>
 80030c6:	42ab      	cmp	r3, r5
 80030c8:	bfa8      	it	ge
 80030ca:	462b      	movge	r3, r5
 80030cc:	9a07      	ldr	r2, [sp, #28]
 80030ce:	eba9 0903 	sub.w	r9, r9, r3
 80030d2:	1aed      	subs	r5, r5, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	9307      	str	r3, [sp, #28]
 80030d8:	9b08      	ldr	r3, [sp, #32]
 80030da:	b1eb      	cbz	r3, 8003118 <_dtoa_r+0x778>
 80030dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d065      	beq.n	80031ae <_dtoa_r+0x80e>
 80030e2:	b18e      	cbz	r6, 8003108 <_dtoa_r+0x768>
 80030e4:	4639      	mov	r1, r7
 80030e6:	4632      	mov	r2, r6
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 fba1 	bl	8003830 <__pow5mult>
 80030ee:	465a      	mov	r2, fp
 80030f0:	4601      	mov	r1, r0
 80030f2:	4607      	mov	r7, r0
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 fb05 	bl	8003704 <__multiply>
 80030fa:	4659      	mov	r1, fp
 80030fc:	900a      	str	r0, [sp, #40]	; 0x28
 80030fe:	4620      	mov	r0, r4
 8003100:	f000 fa57 	bl	80035b2 <_Bfree>
 8003104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003106:	469b      	mov	fp, r3
 8003108:	9b08      	ldr	r3, [sp, #32]
 800310a:	1b9a      	subs	r2, r3, r6
 800310c:	d004      	beq.n	8003118 <_dtoa_r+0x778>
 800310e:	4659      	mov	r1, fp
 8003110:	4620      	mov	r0, r4
 8003112:	f000 fb8d 	bl	8003830 <__pow5mult>
 8003116:	4683      	mov	fp, r0
 8003118:	2101      	movs	r1, #1
 800311a:	4620      	mov	r0, r4
 800311c:	f000 fae9 	bl	80036f2 <__i2b>
 8003120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003122:	4606      	mov	r6, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 81c6 	beq.w	80034b6 <_dtoa_r+0xb16>
 800312a:	461a      	mov	r2, r3
 800312c:	4601      	mov	r1, r0
 800312e:	4620      	mov	r0, r4
 8003130:	f000 fb7e 	bl	8003830 <__pow5mult>
 8003134:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003136:	4606      	mov	r6, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	dc3e      	bgt.n	80031ba <_dtoa_r+0x81a>
 800313c:	9b02      	ldr	r3, [sp, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d137      	bne.n	80031b2 <_dtoa_r+0x812>
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003148:	2b00      	cmp	r3, #0
 800314a:	d134      	bne.n	80031b6 <_dtoa_r+0x816>
 800314c:	9b03      	ldr	r3, [sp, #12]
 800314e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003152:	0d1b      	lsrs	r3, r3, #20
 8003154:	051b      	lsls	r3, r3, #20
 8003156:	b12b      	cbz	r3, 8003164 <_dtoa_r+0x7c4>
 8003158:	9b07      	ldr	r3, [sp, #28]
 800315a:	f109 0901 	add.w	r9, r9, #1
 800315e:	3301      	adds	r3, #1
 8003160:	9307      	str	r3, [sp, #28]
 8003162:	2301      	movs	r3, #1
 8003164:	9308      	str	r3, [sp, #32]
 8003166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d128      	bne.n	80031be <_dtoa_r+0x81e>
 800316c:	2001      	movs	r0, #1
 800316e:	e02e      	b.n	80031ce <_dtoa_r+0x82e>
 8003170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003172:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003176:	e796      	b.n	80030a6 <_dtoa_r+0x706>
 8003178:	9b08      	ldr	r3, [sp, #32]
 800317a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800317e:	42b3      	cmp	r3, r6
 8003180:	bfb7      	itett	lt
 8003182:	9b08      	ldrlt	r3, [sp, #32]
 8003184:	1b9e      	subge	r6, r3, r6
 8003186:	1af2      	sublt	r2, r6, r3
 8003188:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800318a:	bfbf      	itttt	lt
 800318c:	9608      	strlt	r6, [sp, #32]
 800318e:	189b      	addlt	r3, r3, r2
 8003190:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003192:	2600      	movlt	r6, #0
 8003194:	f1b8 0f00 	cmp.w	r8, #0
 8003198:	bfb9      	ittee	lt
 800319a:	eba9 0508 	sublt.w	r5, r9, r8
 800319e:	2300      	movlt	r3, #0
 80031a0:	464d      	movge	r5, r9
 80031a2:	4643      	movge	r3, r8
 80031a4:	e781      	b.n	80030aa <_dtoa_r+0x70a>
 80031a6:	9e08      	ldr	r6, [sp, #32]
 80031a8:	464d      	mov	r5, r9
 80031aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80031ac:	e786      	b.n	80030bc <_dtoa_r+0x71c>
 80031ae:	9a08      	ldr	r2, [sp, #32]
 80031b0:	e7ad      	b.n	800310e <_dtoa_r+0x76e>
 80031b2:	2300      	movs	r3, #0
 80031b4:	e7d6      	b.n	8003164 <_dtoa_r+0x7c4>
 80031b6:	9b02      	ldr	r3, [sp, #8]
 80031b8:	e7d4      	b.n	8003164 <_dtoa_r+0x7c4>
 80031ba:	2300      	movs	r3, #0
 80031bc:	9308      	str	r3, [sp, #32]
 80031be:	6933      	ldr	r3, [r6, #16]
 80031c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031c4:	6918      	ldr	r0, [r3, #16]
 80031c6:	f000 fa46 	bl	8003656 <__hi0bits>
 80031ca:	f1c0 0020 	rsb	r0, r0, #32
 80031ce:	9b07      	ldr	r3, [sp, #28]
 80031d0:	4418      	add	r0, r3
 80031d2:	f010 001f 	ands.w	r0, r0, #31
 80031d6:	d047      	beq.n	8003268 <_dtoa_r+0x8c8>
 80031d8:	f1c0 0320 	rsb	r3, r0, #32
 80031dc:	2b04      	cmp	r3, #4
 80031de:	dd3b      	ble.n	8003258 <_dtoa_r+0x8b8>
 80031e0:	9b07      	ldr	r3, [sp, #28]
 80031e2:	f1c0 001c 	rsb	r0, r0, #28
 80031e6:	4481      	add	r9, r0
 80031e8:	4405      	add	r5, r0
 80031ea:	4403      	add	r3, r0
 80031ec:	9307      	str	r3, [sp, #28]
 80031ee:	f1b9 0f00 	cmp.w	r9, #0
 80031f2:	dd05      	ble.n	8003200 <_dtoa_r+0x860>
 80031f4:	4659      	mov	r1, fp
 80031f6:	464a      	mov	r2, r9
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 fb67 	bl	80038cc <__lshift>
 80031fe:	4683      	mov	fp, r0
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dd05      	ble.n	8003212 <_dtoa_r+0x872>
 8003206:	4631      	mov	r1, r6
 8003208:	461a      	mov	r2, r3
 800320a:	4620      	mov	r0, r4
 800320c:	f000 fb5e 	bl	80038cc <__lshift>
 8003210:	4606      	mov	r6, r0
 8003212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003214:	b353      	cbz	r3, 800326c <_dtoa_r+0x8cc>
 8003216:	4631      	mov	r1, r6
 8003218:	4658      	mov	r0, fp
 800321a:	f000 fbab 	bl	8003974 <__mcmp>
 800321e:	2800      	cmp	r0, #0
 8003220:	da24      	bge.n	800326c <_dtoa_r+0x8cc>
 8003222:	2300      	movs	r3, #0
 8003224:	4659      	mov	r1, fp
 8003226:	220a      	movs	r2, #10
 8003228:	4620      	mov	r0, r4
 800322a:	f000 f9d9 	bl	80035e0 <__multadd>
 800322e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003230:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003234:	4683      	mov	fp, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8144 	beq.w	80034c4 <_dtoa_r+0xb24>
 800323c:	2300      	movs	r3, #0
 800323e:	4639      	mov	r1, r7
 8003240:	220a      	movs	r2, #10
 8003242:	4620      	mov	r0, r4
 8003244:	f000 f9cc 	bl	80035e0 <__multadd>
 8003248:	9b04      	ldr	r3, [sp, #16]
 800324a:	4607      	mov	r7, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	dc4d      	bgt.n	80032ec <_dtoa_r+0x94c>
 8003250:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003252:	2b02      	cmp	r3, #2
 8003254:	dd4a      	ble.n	80032ec <_dtoa_r+0x94c>
 8003256:	e011      	b.n	800327c <_dtoa_r+0x8dc>
 8003258:	d0c9      	beq.n	80031ee <_dtoa_r+0x84e>
 800325a:	9a07      	ldr	r2, [sp, #28]
 800325c:	331c      	adds	r3, #28
 800325e:	441a      	add	r2, r3
 8003260:	4499      	add	r9, r3
 8003262:	441d      	add	r5, r3
 8003264:	4613      	mov	r3, r2
 8003266:	e7c1      	b.n	80031ec <_dtoa_r+0x84c>
 8003268:	4603      	mov	r3, r0
 800326a:	e7f6      	b.n	800325a <_dtoa_r+0x8ba>
 800326c:	f1b8 0f00 	cmp.w	r8, #0
 8003270:	dc36      	bgt.n	80032e0 <_dtoa_r+0x940>
 8003272:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003274:	2b02      	cmp	r3, #2
 8003276:	dd33      	ble.n	80032e0 <_dtoa_r+0x940>
 8003278:	f8cd 8010 	str.w	r8, [sp, #16]
 800327c:	9b04      	ldr	r3, [sp, #16]
 800327e:	b963      	cbnz	r3, 800329a <_dtoa_r+0x8fa>
 8003280:	4631      	mov	r1, r6
 8003282:	2205      	movs	r2, #5
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f9ab 	bl	80035e0 <__multadd>
 800328a:	4601      	mov	r1, r0
 800328c:	4606      	mov	r6, r0
 800328e:	4658      	mov	r0, fp
 8003290:	f000 fb70 	bl	8003974 <__mcmp>
 8003294:	2800      	cmp	r0, #0
 8003296:	f73f add3 	bgt.w	8002e40 <_dtoa_r+0x4a0>
 800329a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800329c:	9d06      	ldr	r5, [sp, #24]
 800329e:	ea6f 0a03 	mvn.w	sl, r3
 80032a2:	f04f 0900 	mov.w	r9, #0
 80032a6:	4631      	mov	r1, r6
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 f982 	bl	80035b2 <_Bfree>
 80032ae:	2f00      	cmp	r7, #0
 80032b0:	f43f aebd 	beq.w	800302e <_dtoa_r+0x68e>
 80032b4:	f1b9 0f00 	cmp.w	r9, #0
 80032b8:	d005      	beq.n	80032c6 <_dtoa_r+0x926>
 80032ba:	45b9      	cmp	r9, r7
 80032bc:	d003      	beq.n	80032c6 <_dtoa_r+0x926>
 80032be:	4649      	mov	r1, r9
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 f976 	bl	80035b2 <_Bfree>
 80032c6:	4639      	mov	r1, r7
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 f972 	bl	80035b2 <_Bfree>
 80032ce:	e6ae      	b.n	800302e <_dtoa_r+0x68e>
 80032d0:	2600      	movs	r6, #0
 80032d2:	4637      	mov	r7, r6
 80032d4:	e7e1      	b.n	800329a <_dtoa_r+0x8fa>
 80032d6:	46ba      	mov	sl, r7
 80032d8:	4637      	mov	r7, r6
 80032da:	e5b1      	b.n	8002e40 <_dtoa_r+0x4a0>
 80032dc:	40240000 	.word	0x40240000
 80032e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80f3 	beq.w	80034d2 <_dtoa_r+0xb32>
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	dd05      	ble.n	80032fc <_dtoa_r+0x95c>
 80032f0:	4639      	mov	r1, r7
 80032f2:	462a      	mov	r2, r5
 80032f4:	4620      	mov	r0, r4
 80032f6:	f000 fae9 	bl	80038cc <__lshift>
 80032fa:	4607      	mov	r7, r0
 80032fc:	9b08      	ldr	r3, [sp, #32]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d04c      	beq.n	800339c <_dtoa_r+0x9fc>
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4620      	mov	r0, r4
 8003306:	f000 f920 	bl	800354a <_Balloc>
 800330a:	4605      	mov	r5, r0
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	f107 010c 	add.w	r1, r7, #12
 8003312:	3202      	adds	r2, #2
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	300c      	adds	r0, #12
 8003318:	f000 f90c 	bl	8003534 <memcpy>
 800331c:	2201      	movs	r2, #1
 800331e:	4629      	mov	r1, r5
 8003320:	4620      	mov	r0, r4
 8003322:	f000 fad3 	bl	80038cc <__lshift>
 8003326:	46b9      	mov	r9, r7
 8003328:	4607      	mov	r7, r0
 800332a:	9b06      	ldr	r3, [sp, #24]
 800332c:	9307      	str	r3, [sp, #28]
 800332e:	9b02      	ldr	r3, [sp, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	9308      	str	r3, [sp, #32]
 8003336:	4631      	mov	r1, r6
 8003338:	4658      	mov	r0, fp
 800333a:	f7ff faa3 	bl	8002884 <quorem>
 800333e:	4649      	mov	r1, r9
 8003340:	4605      	mov	r5, r0
 8003342:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003346:	4658      	mov	r0, fp
 8003348:	f000 fb14 	bl	8003974 <__mcmp>
 800334c:	463a      	mov	r2, r7
 800334e:	9002      	str	r0, [sp, #8]
 8003350:	4631      	mov	r1, r6
 8003352:	4620      	mov	r0, r4
 8003354:	f000 fb28 	bl	80039a8 <__mdiff>
 8003358:	68c3      	ldr	r3, [r0, #12]
 800335a:	4602      	mov	r2, r0
 800335c:	bb03      	cbnz	r3, 80033a0 <_dtoa_r+0xa00>
 800335e:	4601      	mov	r1, r0
 8003360:	9009      	str	r0, [sp, #36]	; 0x24
 8003362:	4658      	mov	r0, fp
 8003364:	f000 fb06 	bl	8003974 <__mcmp>
 8003368:	4603      	mov	r3, r0
 800336a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336c:	4611      	mov	r1, r2
 800336e:	4620      	mov	r0, r4
 8003370:	9309      	str	r3, [sp, #36]	; 0x24
 8003372:	f000 f91e 	bl	80035b2 <_Bfree>
 8003376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003378:	b9a3      	cbnz	r3, 80033a4 <_dtoa_r+0xa04>
 800337a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800337c:	b992      	cbnz	r2, 80033a4 <_dtoa_r+0xa04>
 800337e:	9a08      	ldr	r2, [sp, #32]
 8003380:	b982      	cbnz	r2, 80033a4 <_dtoa_r+0xa04>
 8003382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003386:	d029      	beq.n	80033dc <_dtoa_r+0xa3c>
 8003388:	9b02      	ldr	r3, [sp, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	dd01      	ble.n	8003392 <_dtoa_r+0x9f2>
 800338e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003392:	9b07      	ldr	r3, [sp, #28]
 8003394:	1c5d      	adds	r5, r3, #1
 8003396:	f883 8000 	strb.w	r8, [r3]
 800339a:	e784      	b.n	80032a6 <_dtoa_r+0x906>
 800339c:	4638      	mov	r0, r7
 800339e:	e7c2      	b.n	8003326 <_dtoa_r+0x986>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e7e3      	b.n	800336c <_dtoa_r+0x9cc>
 80033a4:	9a02      	ldr	r2, [sp, #8]
 80033a6:	2a00      	cmp	r2, #0
 80033a8:	db04      	blt.n	80033b4 <_dtoa_r+0xa14>
 80033aa:	d123      	bne.n	80033f4 <_dtoa_r+0xa54>
 80033ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80033ae:	bb0a      	cbnz	r2, 80033f4 <_dtoa_r+0xa54>
 80033b0:	9a08      	ldr	r2, [sp, #32]
 80033b2:	b9fa      	cbnz	r2, 80033f4 <_dtoa_r+0xa54>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	ddec      	ble.n	8003392 <_dtoa_r+0x9f2>
 80033b8:	4659      	mov	r1, fp
 80033ba:	2201      	movs	r2, #1
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 fa85 	bl	80038cc <__lshift>
 80033c2:	4631      	mov	r1, r6
 80033c4:	4683      	mov	fp, r0
 80033c6:	f000 fad5 	bl	8003974 <__mcmp>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	dc03      	bgt.n	80033d6 <_dtoa_r+0xa36>
 80033ce:	d1e0      	bne.n	8003392 <_dtoa_r+0x9f2>
 80033d0:	f018 0f01 	tst.w	r8, #1
 80033d4:	d0dd      	beq.n	8003392 <_dtoa_r+0x9f2>
 80033d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80033da:	d1d8      	bne.n	800338e <_dtoa_r+0x9ee>
 80033dc:	9b07      	ldr	r3, [sp, #28]
 80033de:	9a07      	ldr	r2, [sp, #28]
 80033e0:	1c5d      	adds	r5, r3, #1
 80033e2:	2339      	movs	r3, #57	; 0x39
 80033e4:	7013      	strb	r3, [r2, #0]
 80033e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80033ea:	1e6a      	subs	r2, r5, #1
 80033ec:	2b39      	cmp	r3, #57	; 0x39
 80033ee:	d04d      	beq.n	800348c <_dtoa_r+0xaec>
 80033f0:	3301      	adds	r3, #1
 80033f2:	e052      	b.n	800349a <_dtoa_r+0xafa>
 80033f4:	9a07      	ldr	r2, [sp, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f102 0501 	add.w	r5, r2, #1
 80033fc:	dd06      	ble.n	800340c <_dtoa_r+0xa6c>
 80033fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003402:	d0eb      	beq.n	80033dc <_dtoa_r+0xa3c>
 8003404:	f108 0801 	add.w	r8, r8, #1
 8003408:	9b07      	ldr	r3, [sp, #28]
 800340a:	e7c4      	b.n	8003396 <_dtoa_r+0x9f6>
 800340c:	9b06      	ldr	r3, [sp, #24]
 800340e:	9a04      	ldr	r2, [sp, #16]
 8003410:	1aeb      	subs	r3, r5, r3
 8003412:	4293      	cmp	r3, r2
 8003414:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003418:	d021      	beq.n	800345e <_dtoa_r+0xabe>
 800341a:	4659      	mov	r1, fp
 800341c:	2300      	movs	r3, #0
 800341e:	220a      	movs	r2, #10
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f8dd 	bl	80035e0 <__multadd>
 8003426:	45b9      	cmp	r9, r7
 8003428:	4683      	mov	fp, r0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f04f 020a 	mov.w	r2, #10
 8003432:	4649      	mov	r1, r9
 8003434:	4620      	mov	r0, r4
 8003436:	d105      	bne.n	8003444 <_dtoa_r+0xaa4>
 8003438:	f000 f8d2 	bl	80035e0 <__multadd>
 800343c:	4681      	mov	r9, r0
 800343e:	4607      	mov	r7, r0
 8003440:	9507      	str	r5, [sp, #28]
 8003442:	e778      	b.n	8003336 <_dtoa_r+0x996>
 8003444:	f000 f8cc 	bl	80035e0 <__multadd>
 8003448:	4639      	mov	r1, r7
 800344a:	4681      	mov	r9, r0
 800344c:	2300      	movs	r3, #0
 800344e:	220a      	movs	r2, #10
 8003450:	4620      	mov	r0, r4
 8003452:	f000 f8c5 	bl	80035e0 <__multadd>
 8003456:	4607      	mov	r7, r0
 8003458:	e7f2      	b.n	8003440 <_dtoa_r+0xaa0>
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	4659      	mov	r1, fp
 8003460:	2201      	movs	r2, #1
 8003462:	4620      	mov	r0, r4
 8003464:	f000 fa32 	bl	80038cc <__lshift>
 8003468:	4631      	mov	r1, r6
 800346a:	4683      	mov	fp, r0
 800346c:	f000 fa82 	bl	8003974 <__mcmp>
 8003470:	2800      	cmp	r0, #0
 8003472:	dcb8      	bgt.n	80033e6 <_dtoa_r+0xa46>
 8003474:	d102      	bne.n	800347c <_dtoa_r+0xadc>
 8003476:	f018 0f01 	tst.w	r8, #1
 800347a:	d1b4      	bne.n	80033e6 <_dtoa_r+0xa46>
 800347c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003480:	1e6a      	subs	r2, r5, #1
 8003482:	2b30      	cmp	r3, #48	; 0x30
 8003484:	f47f af0f 	bne.w	80032a6 <_dtoa_r+0x906>
 8003488:	4615      	mov	r5, r2
 800348a:	e7f7      	b.n	800347c <_dtoa_r+0xadc>
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	4293      	cmp	r3, r2
 8003490:	d105      	bne.n	800349e <_dtoa_r+0xafe>
 8003492:	2331      	movs	r3, #49	; 0x31
 8003494:	9a06      	ldr	r2, [sp, #24]
 8003496:	f10a 0a01 	add.w	sl, sl, #1
 800349a:	7013      	strb	r3, [r2, #0]
 800349c:	e703      	b.n	80032a6 <_dtoa_r+0x906>
 800349e:	4615      	mov	r5, r2
 80034a0:	e7a1      	b.n	80033e6 <_dtoa_r+0xa46>
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <_dtoa_r+0xb60>)
 80034a4:	f7ff bae1 	b.w	8002a6a <_dtoa_r+0xca>
 80034a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f aabb 	bne.w	8002a26 <_dtoa_r+0x86>
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <_dtoa_r+0xb64>)
 80034b2:	f7ff bada 	b.w	8002a6a <_dtoa_r+0xca>
 80034b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f77f ae3f 	ble.w	800313c <_dtoa_r+0x79c>
 80034be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034c0:	9308      	str	r3, [sp, #32]
 80034c2:	e653      	b.n	800316c <_dtoa_r+0x7cc>
 80034c4:	9b04      	ldr	r3, [sp, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dc03      	bgt.n	80034d2 <_dtoa_r+0xb32>
 80034ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	f73f aed5 	bgt.w	800327c <_dtoa_r+0x8dc>
 80034d2:	9d06      	ldr	r5, [sp, #24]
 80034d4:	4631      	mov	r1, r6
 80034d6:	4658      	mov	r0, fp
 80034d8:	f7ff f9d4 	bl	8002884 <quorem>
 80034dc:	9b06      	ldr	r3, [sp, #24]
 80034de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80034e2:	f805 8b01 	strb.w	r8, [r5], #1
 80034e6:	9a04      	ldr	r2, [sp, #16]
 80034e8:	1aeb      	subs	r3, r5, r3
 80034ea:	429a      	cmp	r2, r3
 80034ec:	ddb5      	ble.n	800345a <_dtoa_r+0xaba>
 80034ee:	4659      	mov	r1, fp
 80034f0:	2300      	movs	r3, #0
 80034f2:	220a      	movs	r2, #10
 80034f4:	4620      	mov	r0, r4
 80034f6:	f000 f873 	bl	80035e0 <__multadd>
 80034fa:	4683      	mov	fp, r0
 80034fc:	e7ea      	b.n	80034d4 <_dtoa_r+0xb34>
 80034fe:	bf00      	nop
 8003500:	08003c94 	.word	0x08003c94
 8003504:	08003c96 	.word	0x08003c96

08003508 <_localeconv_r>:
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <_localeconv_r+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a18      	ldr	r0, [r3, #32]
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <_localeconv_r+0x18>)
 8003510:	2800      	cmp	r0, #0
 8003512:	bf08      	it	eq
 8003514:	4618      	moveq	r0, r3
 8003516:	30f0      	adds	r0, #240	; 0xf0
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c
 8003520:	20000070 	.word	0x20000070

08003524 <malloc>:
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <malloc+0xc>)
 8003526:	4601      	mov	r1, r0
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	f000 baf9 	b.w	8003b20 <_malloc_r>
 800352e:	bf00      	nop
 8003530:	2000000c 	.word	0x2000000c

08003534 <memcpy>:
 8003534:	b510      	push	{r4, lr}
 8003536:	1e43      	subs	r3, r0, #1
 8003538:	440a      	add	r2, r1
 800353a:	4291      	cmp	r1, r2
 800353c:	d100      	bne.n	8003540 <memcpy+0xc>
 800353e:	bd10      	pop	{r4, pc}
 8003540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003548:	e7f7      	b.n	800353a <memcpy+0x6>

0800354a <_Balloc>:
 800354a:	b570      	push	{r4, r5, r6, lr}
 800354c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800354e:	4604      	mov	r4, r0
 8003550:	460e      	mov	r6, r1
 8003552:	b93d      	cbnz	r5, 8003564 <_Balloc+0x1a>
 8003554:	2010      	movs	r0, #16
 8003556:	f7ff ffe5 	bl	8003524 <malloc>
 800355a:	6260      	str	r0, [r4, #36]	; 0x24
 800355c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003560:	6005      	str	r5, [r0, #0]
 8003562:	60c5      	str	r5, [r0, #12]
 8003564:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003566:	68eb      	ldr	r3, [r5, #12]
 8003568:	b183      	cbz	r3, 800358c <_Balloc+0x42>
 800356a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003572:	b9b8      	cbnz	r0, 80035a4 <_Balloc+0x5a>
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f506 	lsl.w	r5, r1, r6
 800357a:	1d6a      	adds	r2, r5, #5
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4620      	mov	r0, r4
 8003580:	f000 fabf 	bl	8003b02 <_calloc_r>
 8003584:	b160      	cbz	r0, 80035a0 <_Balloc+0x56>
 8003586:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800358a:	e00e      	b.n	80035aa <_Balloc+0x60>
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	2104      	movs	r1, #4
 8003590:	4620      	mov	r0, r4
 8003592:	f000 fab6 	bl	8003b02 <_calloc_r>
 8003596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003598:	60e8      	str	r0, [r5, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e4      	bne.n	800356a <_Balloc+0x20>
 80035a0:	2000      	movs	r0, #0
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	6802      	ldr	r2, [r0, #0]
 80035a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80035aa:	2300      	movs	r3, #0
 80035ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80035b0:	e7f7      	b.n	80035a2 <_Balloc+0x58>

080035b2 <_Bfree>:
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80035b6:	4606      	mov	r6, r0
 80035b8:	460d      	mov	r5, r1
 80035ba:	b93c      	cbnz	r4, 80035cc <_Bfree+0x1a>
 80035bc:	2010      	movs	r0, #16
 80035be:	f7ff ffb1 	bl	8003524 <malloc>
 80035c2:	6270      	str	r0, [r6, #36]	; 0x24
 80035c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80035c8:	6004      	str	r4, [r0, #0]
 80035ca:	60c4      	str	r4, [r0, #12]
 80035cc:	b13d      	cbz	r5, 80035de <_Bfree+0x2c>
 80035ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80035d0:	686a      	ldr	r2, [r5, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035d8:	6029      	str	r1, [r5, #0]
 80035da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80035de:	bd70      	pop	{r4, r5, r6, pc}

080035e0 <__multadd>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	461f      	mov	r7, r3
 80035e6:	4606      	mov	r6, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	2300      	movs	r3, #0
 80035ec:	690d      	ldr	r5, [r1, #16]
 80035ee:	f101 0c14 	add.w	ip, r1, #20
 80035f2:	f8dc 0000 	ldr.w	r0, [ip]
 80035f6:	3301      	adds	r3, #1
 80035f8:	b281      	uxth	r1, r0
 80035fa:	fb02 7101 	mla	r1, r2, r1, r7
 80035fe:	0c00      	lsrs	r0, r0, #16
 8003600:	0c0f      	lsrs	r7, r1, #16
 8003602:	fb02 7000 	mla	r0, r2, r0, r7
 8003606:	b289      	uxth	r1, r1
 8003608:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800360c:	429d      	cmp	r5, r3
 800360e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003612:	f84c 1b04 	str.w	r1, [ip], #4
 8003616:	dcec      	bgt.n	80035f2 <__multadd+0x12>
 8003618:	b1d7      	cbz	r7, 8003650 <__multadd+0x70>
 800361a:	68a3      	ldr	r3, [r4, #8]
 800361c:	42ab      	cmp	r3, r5
 800361e:	dc12      	bgt.n	8003646 <__multadd+0x66>
 8003620:	6861      	ldr	r1, [r4, #4]
 8003622:	4630      	mov	r0, r6
 8003624:	3101      	adds	r1, #1
 8003626:	f7ff ff90 	bl	800354a <_Balloc>
 800362a:	4680      	mov	r8, r0
 800362c:	6922      	ldr	r2, [r4, #16]
 800362e:	f104 010c 	add.w	r1, r4, #12
 8003632:	3202      	adds	r2, #2
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	300c      	adds	r0, #12
 8003638:	f7ff ff7c 	bl	8003534 <memcpy>
 800363c:	4621      	mov	r1, r4
 800363e:	4630      	mov	r0, r6
 8003640:	f7ff ffb7 	bl	80035b2 <_Bfree>
 8003644:	4644      	mov	r4, r8
 8003646:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800364a:	3501      	adds	r5, #1
 800364c:	615f      	str	r7, [r3, #20]
 800364e:	6125      	str	r5, [r4, #16]
 8003650:	4620      	mov	r0, r4
 8003652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003656 <__hi0bits>:
 8003656:	0c02      	lsrs	r2, r0, #16
 8003658:	0412      	lsls	r2, r2, #16
 800365a:	4603      	mov	r3, r0
 800365c:	b9b2      	cbnz	r2, 800368c <__hi0bits+0x36>
 800365e:	0403      	lsls	r3, r0, #16
 8003660:	2010      	movs	r0, #16
 8003662:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003666:	bf04      	itt	eq
 8003668:	021b      	lsleq	r3, r3, #8
 800366a:	3008      	addeq	r0, #8
 800366c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003670:	bf04      	itt	eq
 8003672:	011b      	lsleq	r3, r3, #4
 8003674:	3004      	addeq	r0, #4
 8003676:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800367a:	bf04      	itt	eq
 800367c:	009b      	lsleq	r3, r3, #2
 800367e:	3002      	addeq	r0, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	db06      	blt.n	8003692 <__hi0bits+0x3c>
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	d503      	bpl.n	8003690 <__hi0bits+0x3a>
 8003688:	3001      	adds	r0, #1
 800368a:	4770      	bx	lr
 800368c:	2000      	movs	r0, #0
 800368e:	e7e8      	b.n	8003662 <__hi0bits+0xc>
 8003690:	2020      	movs	r0, #32
 8003692:	4770      	bx	lr

08003694 <__lo0bits>:
 8003694:	6803      	ldr	r3, [r0, #0]
 8003696:	4601      	mov	r1, r0
 8003698:	f013 0207 	ands.w	r2, r3, #7
 800369c:	d00b      	beq.n	80036b6 <__lo0bits+0x22>
 800369e:	07da      	lsls	r2, r3, #31
 80036a0:	d423      	bmi.n	80036ea <__lo0bits+0x56>
 80036a2:	0798      	lsls	r0, r3, #30
 80036a4:	bf49      	itett	mi
 80036a6:	085b      	lsrmi	r3, r3, #1
 80036a8:	089b      	lsrpl	r3, r3, #2
 80036aa:	2001      	movmi	r0, #1
 80036ac:	600b      	strmi	r3, [r1, #0]
 80036ae:	bf5c      	itt	pl
 80036b0:	600b      	strpl	r3, [r1, #0]
 80036b2:	2002      	movpl	r0, #2
 80036b4:	4770      	bx	lr
 80036b6:	b298      	uxth	r0, r3
 80036b8:	b9a8      	cbnz	r0, 80036e6 <__lo0bits+0x52>
 80036ba:	2010      	movs	r0, #16
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80036c2:	bf04      	itt	eq
 80036c4:	0a1b      	lsreq	r3, r3, #8
 80036c6:	3008      	addeq	r0, #8
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	bf04      	itt	eq
 80036cc:	091b      	lsreq	r3, r3, #4
 80036ce:	3004      	addeq	r0, #4
 80036d0:	079a      	lsls	r2, r3, #30
 80036d2:	bf04      	itt	eq
 80036d4:	089b      	lsreq	r3, r3, #2
 80036d6:	3002      	addeq	r0, #2
 80036d8:	07da      	lsls	r2, r3, #31
 80036da:	d402      	bmi.n	80036e2 <__lo0bits+0x4e>
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	d006      	beq.n	80036ee <__lo0bits+0x5a>
 80036e0:	3001      	adds	r0, #1
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	4770      	bx	lr
 80036e6:	4610      	mov	r0, r2
 80036e8:	e7e9      	b.n	80036be <__lo0bits+0x2a>
 80036ea:	2000      	movs	r0, #0
 80036ec:	4770      	bx	lr
 80036ee:	2020      	movs	r0, #32
 80036f0:	4770      	bx	lr

080036f2 <__i2b>:
 80036f2:	b510      	push	{r4, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	2101      	movs	r1, #1
 80036f8:	f7ff ff27 	bl	800354a <_Balloc>
 80036fc:	2201      	movs	r2, #1
 80036fe:	6144      	str	r4, [r0, #20]
 8003700:	6102      	str	r2, [r0, #16]
 8003702:	bd10      	pop	{r4, pc}

08003704 <__multiply>:
 8003704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	4614      	mov	r4, r2
 800370a:	690a      	ldr	r2, [r1, #16]
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	4688      	mov	r8, r1
 8003710:	429a      	cmp	r2, r3
 8003712:	bfbe      	ittt	lt
 8003714:	460b      	movlt	r3, r1
 8003716:	46a0      	movlt	r8, r4
 8003718:	461c      	movlt	r4, r3
 800371a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800371e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003726:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800372a:	eb07 0609 	add.w	r6, r7, r9
 800372e:	42b3      	cmp	r3, r6
 8003730:	bfb8      	it	lt
 8003732:	3101      	addlt	r1, #1
 8003734:	f7ff ff09 	bl	800354a <_Balloc>
 8003738:	f100 0514 	add.w	r5, r0, #20
 800373c:	462b      	mov	r3, r5
 800373e:	2200      	movs	r2, #0
 8003740:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003744:	4573      	cmp	r3, lr
 8003746:	d316      	bcc.n	8003776 <__multiply+0x72>
 8003748:	f104 0214 	add.w	r2, r4, #20
 800374c:	f108 0114 	add.w	r1, r8, #20
 8003750:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003754:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	9b00      	ldr	r3, [sp, #0]
 800375c:	9201      	str	r2, [sp, #4]
 800375e:	4293      	cmp	r3, r2
 8003760:	d80c      	bhi.n	800377c <__multiply+0x78>
 8003762:	2e00      	cmp	r6, #0
 8003764:	dd03      	ble.n	800376e <__multiply+0x6a>
 8003766:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800376a:	2b00      	cmp	r3, #0
 800376c:	d05d      	beq.n	800382a <__multiply+0x126>
 800376e:	6106      	str	r6, [r0, #16]
 8003770:	b003      	add	sp, #12
 8003772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003776:	f843 2b04 	str.w	r2, [r3], #4
 800377a:	e7e3      	b.n	8003744 <__multiply+0x40>
 800377c:	f8b2 b000 	ldrh.w	fp, [r2]
 8003780:	f1bb 0f00 	cmp.w	fp, #0
 8003784:	d023      	beq.n	80037ce <__multiply+0xca>
 8003786:	4689      	mov	r9, r1
 8003788:	46ac      	mov	ip, r5
 800378a:	f04f 0800 	mov.w	r8, #0
 800378e:	f859 4b04 	ldr.w	r4, [r9], #4
 8003792:	f8dc a000 	ldr.w	sl, [ip]
 8003796:	b2a3      	uxth	r3, r4
 8003798:	fa1f fa8a 	uxth.w	sl, sl
 800379c:	fb0b a303 	mla	r3, fp, r3, sl
 80037a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80037a4:	f8dc 4000 	ldr.w	r4, [ip]
 80037a8:	4443      	add	r3, r8
 80037aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80037ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80037b2:	46e2      	mov	sl, ip
 80037b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80037be:	454f      	cmp	r7, r9
 80037c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80037c4:	f84a 3b04 	str.w	r3, [sl], #4
 80037c8:	d82b      	bhi.n	8003822 <__multiply+0x11e>
 80037ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	3204      	adds	r2, #4
 80037d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80037d6:	f1ba 0f00 	cmp.w	sl, #0
 80037da:	d020      	beq.n	800381e <__multiply+0x11a>
 80037dc:	4689      	mov	r9, r1
 80037de:	46a8      	mov	r8, r5
 80037e0:	f04f 0b00 	mov.w	fp, #0
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80037ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80037f4:	46c4      	mov	ip, r8
 80037f6:	445c      	add	r4, fp
 80037f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80037fc:	f84c 3b04 	str.w	r3, [ip], #4
 8003800:	f859 3b04 	ldr.w	r3, [r9], #4
 8003804:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	fb0a b303 	mla	r3, sl, r3, fp
 800380e:	454f      	cmp	r7, r9
 8003810:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003814:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003818:	d805      	bhi.n	8003826 <__multiply+0x122>
 800381a:	f8c8 3004 	str.w	r3, [r8, #4]
 800381e:	3504      	adds	r5, #4
 8003820:	e79b      	b.n	800375a <__multiply+0x56>
 8003822:	46d4      	mov	ip, sl
 8003824:	e7b3      	b.n	800378e <__multiply+0x8a>
 8003826:	46e0      	mov	r8, ip
 8003828:	e7dd      	b.n	80037e6 <__multiply+0xe2>
 800382a:	3e01      	subs	r6, #1
 800382c:	e799      	b.n	8003762 <__multiply+0x5e>
	...

08003830 <__pow5mult>:
 8003830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003834:	4615      	mov	r5, r2
 8003836:	f012 0203 	ands.w	r2, r2, #3
 800383a:	4606      	mov	r6, r0
 800383c:	460f      	mov	r7, r1
 800383e:	d007      	beq.n	8003850 <__pow5mult+0x20>
 8003840:	4c21      	ldr	r4, [pc, #132]	; (80038c8 <__pow5mult+0x98>)
 8003842:	3a01      	subs	r2, #1
 8003844:	2300      	movs	r3, #0
 8003846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800384a:	f7ff fec9 	bl	80035e0 <__multadd>
 800384e:	4607      	mov	r7, r0
 8003850:	10ad      	asrs	r5, r5, #2
 8003852:	d035      	beq.n	80038c0 <__pow5mult+0x90>
 8003854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003856:	b93c      	cbnz	r4, 8003868 <__pow5mult+0x38>
 8003858:	2010      	movs	r0, #16
 800385a:	f7ff fe63 	bl	8003524 <malloc>
 800385e:	6270      	str	r0, [r6, #36]	; 0x24
 8003860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003864:	6004      	str	r4, [r0, #0]
 8003866:	60c4      	str	r4, [r0, #12]
 8003868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800386c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003870:	b94c      	cbnz	r4, 8003886 <__pow5mult+0x56>
 8003872:	f240 2171 	movw	r1, #625	; 0x271
 8003876:	4630      	mov	r0, r6
 8003878:	f7ff ff3b 	bl	80036f2 <__i2b>
 800387c:	2300      	movs	r3, #0
 800387e:	4604      	mov	r4, r0
 8003880:	f8c8 0008 	str.w	r0, [r8, #8]
 8003884:	6003      	str	r3, [r0, #0]
 8003886:	f04f 0800 	mov.w	r8, #0
 800388a:	07eb      	lsls	r3, r5, #31
 800388c:	d50a      	bpl.n	80038a4 <__pow5mult+0x74>
 800388e:	4639      	mov	r1, r7
 8003890:	4622      	mov	r2, r4
 8003892:	4630      	mov	r0, r6
 8003894:	f7ff ff36 	bl	8003704 <__multiply>
 8003898:	4681      	mov	r9, r0
 800389a:	4639      	mov	r1, r7
 800389c:	4630      	mov	r0, r6
 800389e:	f7ff fe88 	bl	80035b2 <_Bfree>
 80038a2:	464f      	mov	r7, r9
 80038a4:	106d      	asrs	r5, r5, #1
 80038a6:	d00b      	beq.n	80038c0 <__pow5mult+0x90>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	b938      	cbnz	r0, 80038bc <__pow5mult+0x8c>
 80038ac:	4622      	mov	r2, r4
 80038ae:	4621      	mov	r1, r4
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7ff ff27 	bl	8003704 <__multiply>
 80038b6:	6020      	str	r0, [r4, #0]
 80038b8:	f8c0 8000 	str.w	r8, [r0]
 80038bc:	4604      	mov	r4, r0
 80038be:	e7e4      	b.n	800388a <__pow5mult+0x5a>
 80038c0:	4638      	mov	r0, r7
 80038c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c6:	bf00      	nop
 80038c8:	08003d98 	.word	0x08003d98

080038cc <__lshift>:
 80038cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	460c      	mov	r4, r1
 80038d2:	4607      	mov	r7, r0
 80038d4:	4616      	mov	r6, r2
 80038d6:	6923      	ldr	r3, [r4, #16]
 80038d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80038dc:	eb0a 0903 	add.w	r9, sl, r3
 80038e0:	6849      	ldr	r1, [r1, #4]
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	f109 0501 	add.w	r5, r9, #1
 80038e8:	42ab      	cmp	r3, r5
 80038ea:	db32      	blt.n	8003952 <__lshift+0x86>
 80038ec:	4638      	mov	r0, r7
 80038ee:	f7ff fe2c 	bl	800354a <_Balloc>
 80038f2:	2300      	movs	r3, #0
 80038f4:	4680      	mov	r8, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	f100 0114 	add.w	r1, r0, #20
 80038fc:	4553      	cmp	r3, sl
 80038fe:	db2b      	blt.n	8003958 <__lshift+0x8c>
 8003900:	6920      	ldr	r0, [r4, #16]
 8003902:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003906:	f104 0314 	add.w	r3, r4, #20
 800390a:	f016 021f 	ands.w	r2, r6, #31
 800390e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003912:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003916:	d025      	beq.n	8003964 <__lshift+0x98>
 8003918:	2000      	movs	r0, #0
 800391a:	f1c2 0e20 	rsb	lr, r2, #32
 800391e:	468a      	mov	sl, r1
 8003920:	681e      	ldr	r6, [r3, #0]
 8003922:	4096      	lsls	r6, r2
 8003924:	4330      	orrs	r0, r6
 8003926:	f84a 0b04 	str.w	r0, [sl], #4
 800392a:	f853 0b04 	ldr.w	r0, [r3], #4
 800392e:	459c      	cmp	ip, r3
 8003930:	fa20 f00e 	lsr.w	r0, r0, lr
 8003934:	d814      	bhi.n	8003960 <__lshift+0x94>
 8003936:	6048      	str	r0, [r1, #4]
 8003938:	b108      	cbz	r0, 800393e <__lshift+0x72>
 800393a:	f109 0502 	add.w	r5, r9, #2
 800393e:	3d01      	subs	r5, #1
 8003940:	4638      	mov	r0, r7
 8003942:	f8c8 5010 	str.w	r5, [r8, #16]
 8003946:	4621      	mov	r1, r4
 8003948:	f7ff fe33 	bl	80035b2 <_Bfree>
 800394c:	4640      	mov	r0, r8
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	3101      	adds	r1, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	e7c7      	b.n	80038e8 <__lshift+0x1c>
 8003958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800395c:	3301      	adds	r3, #1
 800395e:	e7cd      	b.n	80038fc <__lshift+0x30>
 8003960:	4651      	mov	r1, sl
 8003962:	e7dc      	b.n	800391e <__lshift+0x52>
 8003964:	3904      	subs	r1, #4
 8003966:	f853 2b04 	ldr.w	r2, [r3], #4
 800396a:	459c      	cmp	ip, r3
 800396c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003970:	d8f9      	bhi.n	8003966 <__lshift+0x9a>
 8003972:	e7e4      	b.n	800393e <__lshift+0x72>

08003974 <__mcmp>:
 8003974:	6903      	ldr	r3, [r0, #16]
 8003976:	690a      	ldr	r2, [r1, #16]
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	d10c      	bne.n	8003998 <__mcmp+0x24>
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	3014      	adds	r0, #20
 8003982:	3114      	adds	r1, #20
 8003984:	1884      	adds	r4, r0, r2
 8003986:	4411      	add	r1, r2
 8003988:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800398c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003990:	4295      	cmp	r5, r2
 8003992:	d003      	beq.n	800399c <__mcmp+0x28>
 8003994:	d305      	bcc.n	80039a2 <__mcmp+0x2e>
 8003996:	2301      	movs	r3, #1
 8003998:	4618      	mov	r0, r3
 800399a:	bd30      	pop	{r4, r5, pc}
 800399c:	42a0      	cmp	r0, r4
 800399e:	d3f3      	bcc.n	8003988 <__mcmp+0x14>
 80039a0:	e7fa      	b.n	8003998 <__mcmp+0x24>
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039a6:	e7f7      	b.n	8003998 <__mcmp+0x24>

080039a8 <__mdiff>:
 80039a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	460d      	mov	r5, r1
 80039ae:	4607      	mov	r7, r0
 80039b0:	4611      	mov	r1, r2
 80039b2:	4628      	mov	r0, r5
 80039b4:	4614      	mov	r4, r2
 80039b6:	f7ff ffdd 	bl	8003974 <__mcmp>
 80039ba:	1e06      	subs	r6, r0, #0
 80039bc:	d108      	bne.n	80039d0 <__mdiff+0x28>
 80039be:	4631      	mov	r1, r6
 80039c0:	4638      	mov	r0, r7
 80039c2:	f7ff fdc2 	bl	800354a <_Balloc>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80039cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d0:	bfa4      	itt	ge
 80039d2:	4623      	movge	r3, r4
 80039d4:	462c      	movge	r4, r5
 80039d6:	4638      	mov	r0, r7
 80039d8:	6861      	ldr	r1, [r4, #4]
 80039da:	bfa6      	itte	ge
 80039dc:	461d      	movge	r5, r3
 80039de:	2600      	movge	r6, #0
 80039e0:	2601      	movlt	r6, #1
 80039e2:	f7ff fdb2 	bl	800354a <_Balloc>
 80039e6:	f04f 0e00 	mov.w	lr, #0
 80039ea:	60c6      	str	r6, [r0, #12]
 80039ec:	692b      	ldr	r3, [r5, #16]
 80039ee:	6926      	ldr	r6, [r4, #16]
 80039f0:	f104 0214 	add.w	r2, r4, #20
 80039f4:	f105 0914 	add.w	r9, r5, #20
 80039f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80039fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003a00:	f100 0114 	add.w	r1, r0, #20
 8003a04:	f852 ab04 	ldr.w	sl, [r2], #4
 8003a08:	f859 5b04 	ldr.w	r5, [r9], #4
 8003a0c:	fa1f f38a 	uxth.w	r3, sl
 8003a10:	4473      	add	r3, lr
 8003a12:	b2ac      	uxth	r4, r5
 8003a14:	1b1b      	subs	r3, r3, r4
 8003a16:	0c2c      	lsrs	r4, r5, #16
 8003a18:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003a1c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003a26:	45c8      	cmp	r8, r9
 8003a28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003a2c:	4694      	mov	ip, r2
 8003a2e:	f841 4b04 	str.w	r4, [r1], #4
 8003a32:	d8e7      	bhi.n	8003a04 <__mdiff+0x5c>
 8003a34:	45bc      	cmp	ip, r7
 8003a36:	d304      	bcc.n	8003a42 <__mdiff+0x9a>
 8003a38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003a3c:	b183      	cbz	r3, 8003a60 <__mdiff+0xb8>
 8003a3e:	6106      	str	r6, [r0, #16]
 8003a40:	e7c4      	b.n	80039cc <__mdiff+0x24>
 8003a42:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003a46:	b2a2      	uxth	r2, r4
 8003a48:	4472      	add	r2, lr
 8003a4a:	1413      	asrs	r3, r2, #16
 8003a4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003a50:	b292      	uxth	r2, r2
 8003a52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003a56:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003a5a:	f841 2b04 	str.w	r2, [r1], #4
 8003a5e:	e7e9      	b.n	8003a34 <__mdiff+0x8c>
 8003a60:	3e01      	subs	r6, #1
 8003a62:	e7e9      	b.n	8003a38 <__mdiff+0x90>

08003a64 <__d2b>:
 8003a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a68:	461c      	mov	r4, r3
 8003a6a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4690      	mov	r8, r2
 8003a72:	f7ff fd6a 	bl	800354a <_Balloc>
 8003a76:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003a7a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003a7e:	4607      	mov	r7, r0
 8003a80:	bb34      	cbnz	r4, 8003ad0 <__d2b+0x6c>
 8003a82:	9201      	str	r2, [sp, #4]
 8003a84:	f1b8 0200 	subs.w	r2, r8, #0
 8003a88:	d027      	beq.n	8003ada <__d2b+0x76>
 8003a8a:	a802      	add	r0, sp, #8
 8003a8c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003a90:	f7ff fe00 	bl	8003694 <__lo0bits>
 8003a94:	9900      	ldr	r1, [sp, #0]
 8003a96:	b1f0      	cbz	r0, 8003ad6 <__d2b+0x72>
 8003a98:	9a01      	ldr	r2, [sp, #4]
 8003a9a:	f1c0 0320 	rsb	r3, r0, #32
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	40c2      	lsrs	r2, r0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	9201      	str	r2, [sp, #4]
 8003aaa:	9b01      	ldr	r3, [sp, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2102      	movne	r1, #2
 8003ab2:	2101      	moveq	r1, #1
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	6139      	str	r1, [r7, #16]
 8003ab8:	b1c4      	cbz	r4, 8003aec <__d2b+0x88>
 8003aba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003abe:	4404      	add	r4, r0
 8003ac0:	6034      	str	r4, [r6, #0]
 8003ac2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003ac6:	6028      	str	r0, [r5, #0]
 8003ac8:	4638      	mov	r0, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ad4:	e7d5      	b.n	8003a82 <__d2b+0x1e>
 8003ad6:	6179      	str	r1, [r7, #20]
 8003ad8:	e7e7      	b.n	8003aaa <__d2b+0x46>
 8003ada:	a801      	add	r0, sp, #4
 8003adc:	f7ff fdda 	bl	8003694 <__lo0bits>
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	9b01      	ldr	r3, [sp, #4]
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	3020      	adds	r0, #32
 8003aea:	e7e5      	b.n	8003ab8 <__d2b+0x54>
 8003aec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003af0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003af4:	6030      	str	r0, [r6, #0]
 8003af6:	6918      	ldr	r0, [r3, #16]
 8003af8:	f7ff fdad 	bl	8003656 <__hi0bits>
 8003afc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003b00:	e7e1      	b.n	8003ac6 <__d2b+0x62>

08003b02 <_calloc_r>:
 8003b02:	b538      	push	{r3, r4, r5, lr}
 8003b04:	fb02 f401 	mul.w	r4, r2, r1
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f000 f809 	bl	8003b20 <_malloc_r>
 8003b0e:	4605      	mov	r5, r0
 8003b10:	b118      	cbz	r0, 8003b1a <_calloc_r+0x18>
 8003b12:	4622      	mov	r2, r4
 8003b14:	2100      	movs	r1, #0
 8003b16:	f7fe fb6f 	bl	80021f8 <memset>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003b20 <_malloc_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	1ccd      	adds	r5, r1, #3
 8003b24:	f025 0503 	bic.w	r5, r5, #3
 8003b28:	3508      	adds	r5, #8
 8003b2a:	2d0c      	cmp	r5, #12
 8003b2c:	bf38      	it	cc
 8003b2e:	250c      	movcc	r5, #12
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	4606      	mov	r6, r0
 8003b34:	db01      	blt.n	8003b3a <_malloc_r+0x1a>
 8003b36:	42a9      	cmp	r1, r5
 8003b38:	d903      	bls.n	8003b42 <_malloc_r+0x22>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	2000      	movs	r0, #0
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	f000 f869 	bl	8003c18 <__malloc_lock>
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <_malloc_r+0xac>)
 8003b48:	6814      	ldr	r4, [r2, #0]
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	b991      	cbnz	r1, 8003b74 <_malloc_r+0x54>
 8003b4e:	4c20      	ldr	r4, [pc, #128]	; (8003bd0 <_malloc_r+0xb0>)
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	b91b      	cbnz	r3, 8003b5c <_malloc_r+0x3c>
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 f83d 	bl	8003bd4 <_sbrk_r>
 8003b5a:	6020      	str	r0, [r4, #0]
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 f838 	bl	8003bd4 <_sbrk_r>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d124      	bne.n	8003bb2 <_malloc_r+0x92>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	f000 f854 	bl	8003c1a <__malloc_unlock>
 8003b72:	e7e4      	b.n	8003b3e <_malloc_r+0x1e>
 8003b74:	680b      	ldr	r3, [r1, #0]
 8003b76:	1b5b      	subs	r3, r3, r5
 8003b78:	d418      	bmi.n	8003bac <_malloc_r+0x8c>
 8003b7a:	2b0b      	cmp	r3, #11
 8003b7c:	d90f      	bls.n	8003b9e <_malloc_r+0x7e>
 8003b7e:	600b      	str	r3, [r1, #0]
 8003b80:	18cc      	adds	r4, r1, r3
 8003b82:	50cd      	str	r5, [r1, r3]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f848 	bl	8003c1a <__malloc_unlock>
 8003b8a:	f104 000b 	add.w	r0, r4, #11
 8003b8e:	1d23      	adds	r3, r4, #4
 8003b90:	f020 0007 	bic.w	r0, r0, #7
 8003b94:	1ac3      	subs	r3, r0, r3
 8003b96:	d0d3      	beq.n	8003b40 <_malloc_r+0x20>
 8003b98:	425a      	negs	r2, r3
 8003b9a:	50e2      	str	r2, [r4, r3]
 8003b9c:	e7d0      	b.n	8003b40 <_malloc_r+0x20>
 8003b9e:	684b      	ldr	r3, [r1, #4]
 8003ba0:	428c      	cmp	r4, r1
 8003ba2:	bf16      	itet	ne
 8003ba4:	6063      	strne	r3, [r4, #4]
 8003ba6:	6013      	streq	r3, [r2, #0]
 8003ba8:	460c      	movne	r4, r1
 8003baa:	e7eb      	b.n	8003b84 <_malloc_r+0x64>
 8003bac:	460c      	mov	r4, r1
 8003bae:	6849      	ldr	r1, [r1, #4]
 8003bb0:	e7cc      	b.n	8003b4c <_malloc_r+0x2c>
 8003bb2:	1cc4      	adds	r4, r0, #3
 8003bb4:	f024 0403 	bic.w	r4, r4, #3
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d005      	beq.n	8003bc8 <_malloc_r+0xa8>
 8003bbc:	1a21      	subs	r1, r4, r0
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 f808 	bl	8003bd4 <_sbrk_r>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d0cf      	beq.n	8003b68 <_malloc_r+0x48>
 8003bc8:	6025      	str	r5, [r4, #0]
 8003bca:	e7db      	b.n	8003b84 <_malloc_r+0x64>
 8003bcc:	200001fc 	.word	0x200001fc
 8003bd0:	20000200 	.word	0x20000200

08003bd4 <_sbrk_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4c05      	ldr	r4, [pc, #20]	; (8003bf0 <_sbrk_r+0x1c>)
 8003bda:	4605      	mov	r5, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	f7fe fa5a 	bl	8002098 <_sbrk>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d102      	bne.n	8003bee <_sbrk_r+0x1a>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	b103      	cbz	r3, 8003bee <_sbrk_r+0x1a>
 8003bec:	602b      	str	r3, [r5, #0]
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	20000248 	.word	0x20000248

08003bf4 <__ascii_mbtowc>:
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	b901      	cbnz	r1, 8003bfa <__ascii_mbtowc+0x6>
 8003bf8:	a901      	add	r1, sp, #4
 8003bfa:	b142      	cbz	r2, 8003c0e <__ascii_mbtowc+0x1a>
 8003bfc:	b14b      	cbz	r3, 8003c12 <__ascii_mbtowc+0x1e>
 8003bfe:	7813      	ldrb	r3, [r2, #0]
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	1c10      	adds	r0, r2, #0
 8003c06:	bf18      	it	ne
 8003c08:	2001      	movne	r0, #1
 8003c0a:	b002      	add	sp, #8
 8003c0c:	4770      	bx	lr
 8003c0e:	4610      	mov	r0, r2
 8003c10:	e7fb      	b.n	8003c0a <__ascii_mbtowc+0x16>
 8003c12:	f06f 0001 	mvn.w	r0, #1
 8003c16:	e7f8      	b.n	8003c0a <__ascii_mbtowc+0x16>

08003c18 <__malloc_lock>:
 8003c18:	4770      	bx	lr

08003c1a <__malloc_unlock>:
 8003c1a:	4770      	bx	lr

08003c1c <__ascii_wctomb>:
 8003c1c:	b149      	cbz	r1, 8003c32 <__ascii_wctomb+0x16>
 8003c1e:	2aff      	cmp	r2, #255	; 0xff
 8003c20:	bf8b      	itete	hi
 8003c22:	238a      	movhi	r3, #138	; 0x8a
 8003c24:	700a      	strbls	r2, [r1, #0]
 8003c26:	6003      	strhi	r3, [r0, #0]
 8003c28:	2001      	movls	r0, #1
 8003c2a:	bf88      	it	hi
 8003c2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8003c30:	4770      	bx	lr
 8003c32:	4608      	mov	r0, r1
 8003c34:	4770      	bx	lr
	...

08003c38 <_init>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr

08003c44 <_fini>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr
